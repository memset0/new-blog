<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello, World!</title>
      <link href="about/"/>
      <url>about/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客！</p><p>​p><a id="more"></a><p>经过了一段时间的打理，决定重新建一个博客啦。原来的博客移到 <a href="https://notebook.memset0.cn">notebook.memset0.cn</a>。</p><p>我只保留了原博文的很少一部分，并为他们分别挑选了一张封面图。</p><p>这或许使得现在的博客更像是一个“博客”，而非一个“笔记本”。</p><p>同时，新博客带来了很多实验性的设定：中文字体的 webfont、加载页面的 tips 等等很少会在博客里见到的东西…</p><!--很多人其实并不喜欢这样的博客：信息密度低、加载速度慢。仿佛把网站打点成一个“华而不实”的艺术品。但毕竟在这难得属于我的一亩三分地，最重要的还是让他成为自己喜欢的样子。我希望别人看到我心中的博客是什么样的，而非一个正常的 OI 向博客是什么样的。更希望这样的博客，你也能喜欢 ：）--><p><br></p><p>当初决定写博客貌似也是一时跟风，沉静下来发现能写的内容真的不多。</p><p>很多 OI 题目，往往有现成的优质题解，而我们写的，大部分无非是各处摘抄借鉴；这样的内容，至多是为了自己复习，并不大会引起别人的兴趣，也带不来什么帮助。</p><p>故这个博客的方向仍不确定，可能会继续更新 OI 内容，也可能随便写点杂谈，看之后的心情了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LOJ6380 「是男人就过8题——Pony.ai」IntervalTree</title>
      <link href="loj6380/"/>
      <url>loj6380/</url>
      
        <content type="html"><![CDATA[<blockquote><p>定义区间树为线段树的拓展，即每次断开的位置可以不是线段的中心。</p><p>给定一个 $[1, n]$ 的区间树和 $q$ 次询问，每次询问包含一个正整数 $k$, 你需要求出有多少区间的时间复杂度恰好等于 $k$。</p><p>$n, q\le 10^5,\ k\le 10^9$。</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>在线回答询问无意义，考虑利用生成函数处理出所有询问的答案。</p><p>询问 $[l;r]$ 选中的线段（$ql=l \land qr=r$ 的线段，而非经过的线段），LCA 往两侧深度单调减（且中间平的一段的长度至多为 $2$）。</p><p>求出往两侧单调的生成函数合并，类似：</p><script type="math/tex; mode=display">L_u(x) = x (1 + L_l(x) + x (L_r(x) - x)) = x L_l(x) + x^2 L_r(x) + x - x^3 \\R_u(x) = x (1 + R_r(x) + x (R_l(x) - x)) = x R_r(x) + x^2 R_l(x) + x - x^3 \\</script><p>其中 $L,R$ 分别表示左/右端点和当前线段的左/右端点相同的线段（不包括完全相同的情况）的生成函数，$u$ 是当前节点，$l$ 是左儿子，$r$ 是右儿子。</p><p>处理一些平凡情况，在断点计算贡献：</p><script type="math/tex; mode=display">S_u(x) = x^{dep_u} (R_l(x) L_r(x) - x^2 + 1)</script><p>就能做到 $\text{polylog} \times \sum \small{\text{线段长度}}$ 复杂度。</p><p>进一步优化复杂度，考虑边分治：假设当前处理子树 $u$，边分的子树 $v$。递归处理出 $u \leftrightarrow v$ 的路径上的 $S,L,R$。下面考虑 $L_v,R_v$ 对路径上点的 $S$ 和 $u$ 的 $L,R$ 的贡献。</p><p>前者可以分别考虑 $L_v,R_v$ 的贡献，通过两次卷积得到。后者则是路径上的 $L,R$ 通过一定位移得到。</p><p>至于处理可以分别在两侧继续边分。复杂度 $O(n \log^2 n)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">  x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>); <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x,<span class="keyword">char</span> c)</span></span>&#123;print(x),<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> _,n,m,cnt,siz[N],vis[N],mid[N],ch[N][<span class="number">2</span>],fa[N],l[N],r[N],dep[N],rev[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  z(<span class="keyword">int</span> x=<span class="number">0</span>):x(x)&#123;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;w[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">fpow</span><span class="params">(z a,<span class="keyword">int</span> b)</span></span>&#123;z s=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;<span class="keyword">return</span> s;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;a)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i].x); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;a,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line">  a.resize(lim);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)<span class="keyword">if</span>(i&lt;rev[i])<span class="built_in">std</span>::swap(a[i],a[rev[i]]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;lim;len&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i+=(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">        z x=a[i+j],y=a[i+j+len]*w[j+len];</span><br><span class="line">        a[i+j]=x+y,a[i+j+len]=x-y;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="keyword">operator</span>+(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;b)&#123;</span><br><span class="line">  a.resize(<span class="built_in">std</span>::max(a.size(),b.size()));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]=a[i]+b[i]; <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="keyword">operator</span>-(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;b)&#123;</span><br><span class="line">  a.resize(<span class="built_in">std</span>::max(a.size(),b.size()));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]=a[i]-b[i]; <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="keyword">operator</span>*(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; b)&#123;</span><br><span class="line">  <span class="keyword">int</span> len=a.size()+b.size()<span class="number">-1</span>,lim=<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(lim&lt;len)lim&lt;&lt;=<span class="number">1</span>,++k;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)rev[i]=rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">  dft(a,lim),dft(b,lim);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*b[i];</span><br><span class="line">  dft(a,lim),<span class="built_in">std</span>::reverse(&amp;a[<span class="number">1</span>],&amp;a[lim]);</span><br><span class="line">  z inv=fpow(lim,mod<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*inv;</span><br><span class="line">  <span class="keyword">return</span> a.resize(len),a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift</span><span class="params">(z x,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;dst,<span class="keyword">size_t</span> dta)</span></span>&#123;</span><br><span class="line">  dst.resize(<span class="built_in">std</span>::max(dst.size(),dta+<span class="number">1</span>));</span><br><span class="line">  dst[dta]=dst[dta]+x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;src,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;dst,<span class="keyword">size_t</span> dta)</span></span>&#123;</span><br><span class="line">  dst.resize(<span class="built_in">std</span>::max(dst.size(),src.size()+dta));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;src.size();i++)dst[i+dta]=dst[i+dta]+src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfsInit</span><span class="params">(<span class="keyword">int</span> &amp;u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">    u=n<span class="number">-1</span>+l;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    u=++cnt;</span><br><span class="line">    dfsInit(ch[u][<span class="number">0</span>],l,mid[u],dep+<span class="number">1</span>),fa[ch[u][<span class="number">0</span>]]=u;</span><br><span class="line">    dfsInit(ch[u][<span class="number">1</span>],mid[u]+<span class="number">1</span>,r,dep+<span class="number">1</span>),fa[ch[u][<span class="number">1</span>]]=u;</span><br><span class="line">  &#125;</span><br><span class="line">  ::l[u]=l,::r[u]=r,::dep[u]=dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calcSize</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!u||vis[u])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> siz[u]=<span class="number">1</span>+calcSize(ch[u][<span class="number">0</span>])+calcSize(ch[u][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">std::pair&lt;int,int&gt; findSubTree(int u,int lim)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!u||vis[u])<span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span>(siz[u]&lt;lim)<span class="keyword">return</span> &#123;u,siz[u]&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x=ch[u][<span class="number">0</span>]?findSubTree(ch[u][<span class="number">0</span>],lim):<span class="built_in">std</span>::<span class="built_in">make_pair</span>(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; y=ch[u][<span class="number">1</span>]?findSubTree(ch[u][<span class="number">1</span>],lim):<span class="built_in">std</span>::<span class="built_in">make_pair</span>(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> x.second&gt;y.second?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">bool</span> fl,<span class="keyword">int</span> u,<span class="keyword">int</span> mov,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;f)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(vis[u]||l[u]==r[u])<span class="keyword">return</span> shift(<span class="number">1</span>,f,mov+<span class="number">1</span>);</span><br><span class="line">  shift(<span class="number">1</span>,f,mov+<span class="number">1</span>);</span><br><span class="line">  shift(mod<span class="number">-1</span>,f,mov+<span class="number">3</span>);</span><br><span class="line">  calc(fl,ch[u][<span class="number">0</span>],mov+(fl?<span class="number">2</span>:<span class="number">1</span>),f);</span><br><span class="line">  calc(fl,ch[u][<span class="number">1</span>],mov+(fl?<span class="number">1</span>:<span class="number">2</span>),f);</span><br><span class="line">&#125;</span><br><span class="line">std::pair&lt;std::vector&lt;z&gt;,std::vector&lt;z&gt;&gt; fuck(int u)&#123;</span><br><span class="line">  <span class="keyword">if</span>(vis[u]||l[u]==r[u])<span class="keyword">return</span> &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; Ll,Lr,Rl,Rr,Lu,Ru;</span><br><span class="line">  Lu=Ru=<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,mod<span class="number">-1</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::tie(Ll,Rl)=fuck(ch[u][<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::tie(Lr,Rr)=fuck(ch[u][<span class="number">1</span>]);</span><br><span class="line">  shift(Ll,Lu,<span class="number">1</span>),shift(Lr,Lu,<span class="number">2</span>);</span><br><span class="line">  shift(Rr,Ru,<span class="number">1</span>),shift(Rl,Ru,<span class="number">2</span>);</span><br><span class="line">  shift(Rl*Lr,ans,dep[u]);</span><br><span class="line">  <span class="keyword">return</span> &#123;Lu,Ru&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::pair&lt;std::vector&lt;z&gt;,std::vector&lt;z&gt;&gt; solve(int u)&#123;</span><br><span class="line">  <span class="keyword">if</span>(vis[u]||l[u]==r[u])<span class="keyword">return</span> &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">  <span class="keyword">int</span> siz=calcSize(u);</span><br><span class="line">  <span class="keyword">int</span> v=findSubTree(u,(siz*<span class="number">2</span>)/<span class="number">4</span>).first;</span><br><span class="line">  <span class="keyword">if</span>(v==<span class="number">-1</span>)<span class="keyword">return</span> fuck(u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; Lu,Ru,Lv,Rv,Lt,Rt,T;</span><br><span class="line">  <span class="built_in">std</span>::tie(Lv,Rv)=solve(v);</span><br><span class="line">  vis[v]=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">std</span>::tie(Lu,Ru)=solve(u);</span><br><span class="line">  vis[v]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> lmov=<span class="number">0</span>,rmov=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> p=v;p!=u;lmov+=ch[fa[p]][<span class="number">0</span>]==p?<span class="number">1</span>:<span class="number">2</span>,rmov+=ch[fa[p]][<span class="number">0</span>]==p?<span class="number">2</span>:<span class="number">1</span>,p=fa[p])&#123;</span><br><span class="line">    <span class="keyword">int</span> f=fa[p],q=ch[f][<span class="number">0</span>]==p?ch[f][<span class="number">1</span>]:ch[f][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(ch[f][<span class="number">0</span>]==p)&#123;</span><br><span class="line">      T.clear(),calc(<span class="number">0</span>,q,<span class="number">0</span>,T),shift(T,Lt,rmov+dep[f]-dep[u]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      T.clear(),calc(<span class="number">1</span>,q,<span class="number">0</span>,T),shift(T,Rt,lmov+dep[f]-dep[u]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  shift(mod<span class="number">-1</span>,Lv,<span class="number">1</span>);</span><br><span class="line">  shift(mod<span class="number">-1</span>,Rv,<span class="number">1</span>);</span><br><span class="line">  shift(Lv*Rt,ans,dep[u]);</span><br><span class="line">  shift(Rv*Lt,ans,dep[u]);</span><br><span class="line">  shift(Lv,Lu,lmov);</span><br><span class="line">  shift(Rv,Ru,rmov);</span><br><span class="line">  <span class="keyword">return</span> &#123;Lu,Ru&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)read(mid[i]);</span><br><span class="line">  dfsInit(_,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">  solve(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(n&lt;&lt;<span class="number">1</span>);i++)shift(<span class="number">1</span>,ans,dep[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)shift(mod<span class="number">-1</span>,ans,dep[i]+<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,q;i&lt;=m;i++)&#123;</span><br><span class="line">    read(q);</span><br><span class="line">    print(q&lt;ans.size()?ans[q].x:<span class="number">0</span>,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cnt=<span class="number">0</span>;</span><br><span class="line">  ans.clear();</span><br><span class="line">  <span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="keyword">sizeof</span>(ch));</span><br><span class="line">  <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;(N&lt;&lt;<span class="number">1</span>);len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    z wn=fpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>)); w[len]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)w[i+len]=w[i+len<span class="number">-1</span>]*wn;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))solution(),recycle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树分治 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UOJ372 【UR #17】滑稽树前做游戏</title>
      <link href="uoj372/"/>
      <url>uoj372/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个 $n$ 个点 $m$ 条边的无向图，其中每个点的点权是 $[0;1]$ 范围内生成的连续型随机变量，求：</p><script type="math/tex; mode=display">\max \{ \max_{i \in V} x_i + \max_{(u,v) \in E} (x_u + x_v) \}</script><p>的期望，答案对 $998244353$ 取模。</p><p>$n \leq 25$。（实际上可以跑 $n \leq 30$。。。</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><script type="math/tex; mode=display">ans = \int_0^2 Pr[\lambda = x] x \text dx = 2 - \int_0^2 Pr[\lambda \leq x] \text dx</script><p>考虑如何计算 $Pr[\lambda \leq x]$，设 $g(s,y,t)$ 表示对于点集 $s$，点权最大值 $\leq y$，答案 $\leq t$ 的概率。考虑其状态转义：</p><ul><li>如果生成的所有数都 $\leq \frac t 2$，则贡献为 $(\frac t 2)^{|s|}$</li><li>对于其他情况，考虑最大值点 $i$，并递归。</li></ul><script type="math/tex; mode=display">g(s,y,t) = (\tfrac t 2)^{|s|} + \sum_{i \in s} \int_{\tfrac t 2}^y g(s_i, x, t) (t - x)^{|s| - |s_i| - 1}\text dx</script><p>其中 $s_i$ 表示从 $s$ 中删除 $i$ 以及所有和 $i$ 相邻的点得到的点集。</p><p>如果我们直接暴力状压维护二元多项式转移显然麻烦的一比，而且常数还贼他妈大，考虑理性一点的方式。</p><p>首先，如果当前的状态是若干独立的联通块，可以直接把每个联通块的答案相乘，这可以大大减小状态数。</p><p>另外，我们可以注意到，对于二元多项式的每一项 $y^i t^j$，都满足 $i+j$ 是定值，即二元多项式 $g(s)$ 每项的幂次和都是 $|s|$。由二项式定理的系数可以方便得到。</p><p>最后，我们需要注意 $g(s,y,t)$ 的取值范围 $\tfrac t 2 \leq y \leq \min(1, t)$，所以答案是</p><script type="math/tex; mode=display">ans = 2 - \int_0^1 f(t,t) \text dt  - \int_1^2 f(1,t) \text dt</script><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">30</span>,mod=<span class="number">998244353</span>,inv2=(mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tim,G[N],vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  z(<span class="keyword">int</span> x=<span class="number">0</span>):x(x)&#123;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;ans,inp[N],inv[N],C[N][N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt;&gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;a,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;b)&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">c</span><span class="params">(a.size()+b.size()<span class="number">-1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.size();j++)</span><br><span class="line">      c[i+j]=c[i+j]+a[i]*b[j];</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">integral</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; f)</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">g</span><span class="params">(f.size()+<span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=f.size();i++)g[i]=f[i<span class="number">-1</span>]*inv[i];</span><br><span class="line">  <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">evaluation</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  a=integral(a); z p,s; <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(p=<span class="number">1</span>,i=<span class="number">0</span>;i&lt;a.size();i++)s=s+a[i]*p,p=p*r;</span><br><span class="line">  <span class="keyword">for</span>(p=<span class="number">1</span>,i=<span class="number">0</span>;i&lt;a.size();i++)s=s-a[i]*p,p=p*l;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initfac</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  inp[<span class="number">0</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)inv[i]=(mod-mod/i)*inv[mod%i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)inp[i]=inp[i<span class="number">-1</span>]*inv2;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> res=<span class="number">1</span>&lt;&lt;u; vis[u]=tim;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)<span class="keyword">if</span>(((s&gt;&gt;v)&amp;<span class="number">1</span>)&amp;&amp;((G[u]&gt;&gt;v)&amp;<span class="number">1</span>)&amp;&amp;vis[v]!=tim)res|=dfs(v,s);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;s,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">b</span><span class="params">(k+<span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)b[i]=C[k][i]*(i&amp;<span class="number">1</span>?mod<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">  a=integral(a*b);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)s[i]=s[i]+a[i],s[<span class="number">0</span>]=s[<span class="number">0</span>]-inp[i]*a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">solve</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">map</span>.count(s))<span class="keyword">return</span> <span class="built_in">map</span>[s];</span><br><span class="line">  <span class="keyword">int</span> l=__builtin_popcount(s); <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; res; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> t,i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>((s&gt;&gt;i)&amp;<span class="number">1</span>)++tim,t=dfs(i,s),<span class="built_in">set</span>.push_back(t),s^=t;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x:<span class="built_in">set</span>)s|=x;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">set</span>.size()&gt;<span class="number">1</span>)&#123;res=&#123;<span class="number">1</span>&#125;; <span class="keyword">for</span>(<span class="keyword">auto</span> t:<span class="built_in">set</span>)res=res*solve(t);&#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    res.resize(l+<span class="number">1</span>),res[<span class="number">0</span>]=inp[l];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>((s&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">int</span> t=s^(s&amp;(G[i]|(<span class="number">1</span>&lt;&lt;i)));</span><br><span class="line">      update(res,solve(t),__builtin_popcount(s&amp;G[i]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>[s]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m,initfac(N),<span class="built_in">map</span>[<span class="number">0</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u,v,i=<span class="number">0</span>;i&lt;m;i++)<span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v,--u,--v,G[u]|=<span class="number">1</span>&lt;&lt;v,G[v]|=<span class="number">1</span>&lt;&lt;u;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; s=solve((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>),a(n+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)a[n]=a[n]+s[i];</span><br><span class="line">  <span class="built_in">std</span>::reverse(s.begin(),s.end());</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;(<span class="number">2</span>-evaluation(s,<span class="number">1</span>,<span class="number">2</span>)-evaluation(a,<span class="number">0</span>,<span class="number">1</span>)).x&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷4156 [WC2016]论战捆竹竿</title>
      <link href="lg4156/"/>
      <url>lg4156/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个字符串 $s$，假设其 border 集合为 $S$，则每次你可以在 $s$ 后面接上一个长度为 $|s| - x$ 的字符串，其中 $x \in S$。问在总长度 $\leq w$ 的情况下有多少种可能的本质不同的长度。</p><p>$n \leq 5 \times 10^5,\ w \leq 10^{18}$。</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>做法和哥哥们的好像不大一样，不过本质应该差不多，但还是厚颜无耻的来水一篇。</p><p>border 的贡献是若干端等差数列，不妨设其中一段为 $kx + b$，其中 $x \in [0,l]$，考虑其产生的贡献整理后可以理解为三种：</p><ul><li>长度为 $b$ 的贡献，可以选择 $\inf$ 次；</li><li>长度为 $lk + b$ 的贡献，可以选择 $\inf$ 次；</li><li>长度为 $(0…l)k + b$ 的贡献，可以选择 $1$ 次。</li></ul><p>考虑前两种贡献，就是朴素的同余最短路问题。考虑先计算出他们的 dis 数组，再转移上第三类贡献。</p><p>对于每一种等差数列分开处理，分模 $k$ 的余数讨论，容易发现可以直接用单调队列维护下转移。</p><p>同余最短路跑 spfa 是线性的，可以直接用（。</p><p>时间复杂度 $O(n \log w)$。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,fl,mod;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w,ans,t[N],dis[<span class="number">2</span>][N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; key;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">atom</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> b,k,l;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;atom&gt; res;</span><br><span class="line"><span class="keyword">namespace</span> <span class="built_in">priority_queue</span>&#123;</span><br><span class="line"><span class="keyword">int</span> nod;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> pre,nxt,i;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">nod=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">set</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lim,hed,til;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">hed=til=<span class="number">0</span>,lim=l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_front</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hed==til)hed=til=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">e[e[til].pre].nxt=<span class="number">0</span>;</span><br><span class="line">til=e[til].pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hed==til)hed=til=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">e[e[hed].nxt].pre=<span class="number">0</span>;</span><br><span class="line">hed=e[hed].nxt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">e[++nod].i=i,e[nod].x=x;</span><br><span class="line"><span class="keyword">if</span>(!hed)&#123;</span><br><span class="line">hed=til=nod;</span><br><span class="line">e[nod].pre=e[nod].nxt=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">e[nod].nxt=hed,e[hed].pre=nod;</span><br><span class="line">hed=nod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(hed&amp;&amp;e[hed].x&gt;x)pop_back();</span><br><span class="line">push_back(i,x);</span><br><span class="line"><span class="keyword">while</span>(e[til].i&lt;i-lim)pop_front();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> e[til].x;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">priority_queue</span>::<span class="built_in">set</span> <span class="built_in">set</span>[N];</span><br><span class="line"><span class="keyword">namespace</span> border_finder&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b=<span class="number">131131</span>,p1=<span class="number">998244353</span>,p2=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> f[N],g[N],pf[N],pg[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vet;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> *a,<span class="keyword">int</span> *pa,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=(a[r]-(<span class="keyword">long</span> <span class="keyword">long</span>)a[l<span class="number">-1</span>]*pa[r-l+<span class="number">1</span>])%p;</span><br><span class="line"><span class="keyword">return</span> res&lt;<span class="number">0</span>?res+p:res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">pf[<span class="number">0</span>]=pg[<span class="number">0</span>]=<span class="number">1</span>,vet.clear(),res.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">pf[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)pf[i<span class="number">-1</span>]*b%p1;</span><br><span class="line">pg[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)pg[i<span class="number">-1</span>]*b%p2;</span><br><span class="line">f[i]=((<span class="keyword">long</span> <span class="keyword">long</span>)f[i<span class="number">-1</span>]*b+s[i]-<span class="string">&#x27;a&#x27;</span>)%p1;</span><br><span class="line">g[i]=((<span class="keyword">long</span> <span class="keyword">long</span>)g[i<span class="number">-1</span>]*b+s[i]-<span class="string">&#x27;a&#x27;</span>)%p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(query(<span class="number">1</span>,i,f,pf,p1)==query(n-i+<span class="number">1</span>,n,f,pf,p1)&amp;&amp;query(<span class="number">1</span>,i,g,pg,p2)==query(n-i+<span class="number">1</span>,n,g,pg,p2))</span><br><span class="line">vet.push_back(n-i);</span><br><span class="line">vet.push_back(n);</span><br><span class="line"><span class="keyword">int</span> first=vet[<span class="number">0</span>],delta=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;vet.size();i++)<span class="keyword">if</span>(!delta)&#123;</span><br><span class="line">delta=vet[i]-vet[i<span class="number">-1</span>],cnt=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vet[i]-vet[i<span class="number">-1</span>]==delta)++cnt;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">res.push_back((atom)&#123;first,delta,cnt&#125;);</span><br><span class="line">first=vet[i],delta=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res.push_back((atom)&#123;first,delta,cnt&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;key,<span class="keyword">long</span> <span class="keyword">long</span> *dis)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> l,r,q[N&lt;&lt;<span class="number">3</span>]; <span class="keyword">static</span> <span class="keyword">bool</span> inq[N];</span><br><span class="line">mod=*<span class="built_in">std</span>::max_element(key.begin(),key.end());</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">63</span>,mod&lt;&lt;<span class="number">3</span>);</span><br><span class="line">q[l=r=<span class="number">1</span>]=dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[l++]; inq[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> w:key)&#123;</span><br><span class="line"><span class="keyword">int</span> c=(u+w)/mod; <span class="keyword">int</span> v=u+w-c*mod;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+c&lt;dis[v])&#123;</span><br><span class="line">dis[v]=dis[u]+c;</span><br><span class="line"><span class="keyword">if</span>(!inq[v])inq[v]=<span class="number">1</span>,q[++r]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> *f,<span class="keyword">long</span> <span class="keyword">long</span> *g,<span class="keyword">const</span> atom &amp;it)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!it.l)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mod;i++)&#123;</span><br><span class="line">g[i]=<span class="built_in">std</span>::min(f[i],f[(i-it.b+mod)%mod]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(t,<span class="number">63</span>,mod&lt;&lt;<span class="number">3</span>),<span class="built_in">priority_queue</span>::init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;it.k;i++)<span class="built_in">set</span>[i].reset(it.l);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=-mod;i&lt;mod;i++)&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;<span class="built_in">set</span>=::<span class="built_in">set</span>[(i+mod)%it.k];</span><br><span class="line"><span class="built_in">set</span>.insert((i+mod)/it.k,i&lt;<span class="number">0</span>?f[i+mod]+<span class="number">1</span>:f[i]);</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">0</span>)t[i]=<span class="built_in">set</span>.query();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mod;i++)&#123;</span><br><span class="line">g[i]=<span class="built_in">std</span>::min(f[i],i&lt;it.b?t[i-it.b+mod]+<span class="number">1</span>:t[i-it.b]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(read(T);T--;ans=<span class="number">0</span>,key.clear())&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%s&quot;</span>,&amp;n,&amp;w,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(w&lt;n)&#123;<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">border_finder::solve(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:res)&#123;</span><br><span class="line">key.push_back(x.b);</span><br><span class="line"><span class="keyword">if</span>(x.l)key.push_back(x.b+x.k*x.l);</span><br><span class="line">&#125;</span><br><span class="line">spfa(key,dis[fl]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:res)&#123;</span><br><span class="line">trans(dis[fl],dis[fl^<span class="number">1</span>],x);</span><br><span class="line">fl^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mod;i++)<span class="keyword">if</span>(dis[fl][i]!=<span class="number">4557430888798830399</span>)&#123;</span><br><span class="line">ans+=<span class="built_in">std</span>::max(<span class="number">0l</span>l,(w-n-i)/mod+<span class="number">1</span>-dis[fl][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 同余最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1336E2 Chiori and Doll Picking (hard version)</title>
      <link href="cf1336e2/"/>
      <url>cf1336e2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定 $n$ 个整数 $\langle a_1, a_2 … a_n \rangle$，在 $[0; 2^m)$ 的范围内。对于 $k \in [0; m]$，求选出一个子集使得异或和的二进制表示有 $k$ 个 $1$ 的方案数。</p><p>$1 \leq n \leq 2 \times 10^5,\ 0 \leq m \leq 53$。</p></blockquote><a id="more"></a><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>定义：</p><ul><li>$\operatorname{popcount}(x)$ 表示 $x$ 的二进制表示下 $1$ 的个数</li><li>$\langle i, j \rangle = \operatorname{popcount(i\ \&amp;\ j)}$</li></ul><p>对于线性基 $S$，定义：</p><ul><li>$\operatorname{span}(S)$ 表示 $S$ 张成的向量空间</li><li>$F(S) = \sum_{x \in \operatorname{span}(S)} z^x$</li><li>$P(S) = \sum_{x \in \operatorname{span}(S)} z^{\operatorname{popcount}(x)}$</li></ul><p>对于此题，定义</p><ul><li>$A$ 为由题中给定数得到的线性基</li></ul><p>首先你已经会了一个 $O(2^{\operatorname{rank}(A)})$ 的暴力，下文我们介绍一种 $O(2^{m-\operatorname{rank}(A)})$ 的算法，就可以通过分治在 $O(2^{m/2})$ 的时间复杂度内通过本题。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>由线性基的基本性质，可以得到：</p><script type="math/tex; mode=display">(z^x) * F(A) = F(A)</script><p>在此基础上枚举 $x \in \operatorname{span}(A)$ 有</p><script type="math/tex; mode=display">\begin{aligned}    F(A) * F(A) &= F(A) \cdot 2^{\operatorname{rank}(A)} \\    \operatorname{FWT}(F(A)) \cdot \operatorname{FWT}(F(A)) &= \operatorname{FWT}(F(A)) \cdot 2^{\operatorname{rank}(A)}\end{aligned}</script><p>由于是按位相乘，考虑方程 $x^2=x+1$ 的实根仅有</p><script type="math/tex; mode=display">\left\{ \begin{aligned} x_1 &= 0 \\ x_2 &= 2^{\operatorname{rank}(A)} \end{aligned} \right.</script><p>故 $[z^i] \operatorname{FWT}(F(A))  \in \{0, 2^{\operatorname{rank}(A)}\}$。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>让我们再回到 $\operatorname{FWT}$ 运算本身的意义：</p><script type="math/tex; mode=display">\begin{aligned}[z^i] \operatorname{FWT}(F(A))&= \sum_{x \in \operatorname{span}(A)} (-1)^{\langle i,x \rangle} \\&\in \{ 0, 2^{\operatorname{rank}(A)} \} \\\end{aligned}</script><p>如果存在 $x$ 使得 $(-1)^{\langle i,x \rangle} = -1$，则 $\operatorname{FWT}(A)_i$ 只能为 $0$。</p><p>$\langle x,y \rangle$ 和 $\oplus$ 运算满足结合律：</p><script type="math/tex; mode=display">\langle i,x \rangle \oplus \langle j,x \rangle = \langle i \oplus j, x \rangle</script><p>可以通过把 $\&amp;$ 理解为二进制按位乘法，$\oplus$ 理解为二进制不进位加法来证明。</p><p>故我们只需检验 $A$ 中的每个基底而非 $\operatorname{span}(A)$ 即可判断这一位的值。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>定义 $A$ 的正交线性基为 $B$，使得对于所有 $x \in \operatorname{span}(A), y \in \operatorname{span}(B)$，满足 $\operatorname{popcount(x \&amp; y)}$ 是偶数，且 $\operatorname{rank}(A) + \operatorname{rank}(B) = m$。</p><p>根据前面的引理，有</p><script type="math/tex; mode=display">B \cdot 2^{\operatorname{rank}(A)} = \operatorname{FWT} (A) \Leftrightarrow \operatorname{IFWT}(B \cdot 2^{\operatorname{rank}(A)}) = A</script><p>一种简单的正交线性基构造方式是</p><p><img src="https://i.loli.net/2020/04/26/wKc3le9s8vBzQYr.png" style="margin: auto;" /></p><p>用高斯消元整理关键位，旋转右上角到左下角得到。</p><p><img src="https://i.loli.net/2020/04/26/QckSaT4BjewVXNE.png" style="margin: auto;" /></p><p>证明可以考虑图中圈出矩形的左上角和右上角一定为 $1$，而两向量的异或的 $\operatorname{popcount}$ 为偶数，那么左下角和右上角的数要么全为 $0$，要么全为 $1$。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>知道了正交线性基怎么求，如何计算答案呢？</p><p>考虑用 $\operatorname{FWT}$ 表示答案统计：</p><script type="math/tex; mode=display">[z^c]P(A) = [z^0] (A * G^c) = [z^0] \operatorname{IFWT}(\operatorname{FWT}(F(A)) \cdot \operatorname{FWT}(G^c))</script><p>其中 $G^c$ 表示 $\sum_{x \geq 0} z^x [\operatorname{popcount}(x)=c]$。</p><p>其中：</p><script type="math/tex; mode=display">[z^0] \operatorname{IFWT}(X) = 2^{-m} [z^0] \operatorname{FWT}(X) = 2^{-m} \sum_{i \geq 0} [z^i] X</script><p>由于 $\operatorname{FWT}(F(A)) = F(B) \cdot 2^k$，而 $B$ 中的元素只有 $2^{\operatorname{rank}(B)} = 2^{m - \operatorname{rank}(A)}$ 个。故通过暴力得到 $P(B)$，即可通过组合数计算得 $P(A)$。</p><script type="math/tex; mode=display">[z^c]P(A) = 2^{k-m} \sum_{d \geq 0} [z^d] P(B) \sum_{i \geq 0} (-1)^i \binom d i \binom {m-d} {c-i}</script><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">60</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,c[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N],g[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">z(<span class="keyword">int</span> x=<span class="number">0</span>):x(x)&#123;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;p[N],q[N],fac[N],ifac[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;<span class="keyword">return</span> n&lt;m?<span class="number">0</span>:fac[n]*ifac[m]*ifac[n-m];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">fpow</span><span class="params">(z a,<span class="keyword">int</span> b)</span></span>&#123;z s=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;<span class="keyword">return</span> s;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;<span class="keyword">if</span>(f[i])x^=f[i]; <span class="keyword">else</span> &#123;f[i]=x; <span class="keyword">return</span>;&#125;&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="keyword">long</span> <span class="keyword">long</span> x; read(x),insert(x);&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;m;j++)<span class="keyword">if</span>((f[j]&gt;&gt;i)&amp;<span class="number">1</span>)f[j]^=f[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="keyword">if</span>(f[i])c[i]=k++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="keyword">if</span>(!f[i])c[i]=k+(t++);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="keyword">if</span>(f[i])<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)<span class="keyword">if</span>((f[i]&gt;&gt;j)&amp;<span class="number">1</span>)g[c[i]]|=<span class="number">1l</span>l&lt;&lt;c[j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)<span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&lt;m;j++)<span class="keyword">if</span>((g[i]&gt;&gt;j)&amp;<span class="number">1</span>)g[j]|=<span class="number">1l</span>l&lt;&lt;i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;m;i++)g[i]|=<span class="number">1l</span>l&lt;&lt;i;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=((m+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>))&#123;</span><br><span class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>,<span class="keyword">long</span> <span class="keyword">long</span>)&gt; dfs=[&amp;](<span class="keyword">int</span> i,<span class="keyword">long</span> <span class="keyword">long</span> s)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=k)&#123;p[__builtin_popcountll(s)].x++;<span class="keyword">return</span>;&#125;</span><br><span class="line">dfs(i+<span class="number">1</span>,s),dfs(i+<span class="number">1</span>,s^g[i]);</span><br><span class="line">&#125;;</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">0l</span>l);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>,<span class="keyword">long</span> <span class="keyword">long</span>)&gt; dfs=[&amp;](<span class="keyword">int</span> i,<span class="keyword">long</span> <span class="keyword">long</span> s)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=m)&#123;q[__builtin_popcountll(s)].x++;<span class="keyword">return</span>;&#125;</span><br><span class="line">dfs(i+<span class="number">1</span>,s),dfs(i+<span class="number">1</span>,s^g[i]);</span><br><span class="line">&#125;;</span><br><span class="line">dfs(k,<span class="number">0l</span>l);</span><br><span class="line">fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=ifac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)ifac[i]=(mod-mod/i)*ifac[mod%i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)ifac[i]=ifac[i<span class="number">-1</span>]*ifac[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=m;c++)<span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;=m;d++)<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=c;i++)&#123;</span><br><span class="line">p[c]=p[c]+fpow(<span class="number">2</span>,mod<span class="number">-1</span>+k-m)*q[d]*(i&amp;<span class="number">1</span>?mod<span class="number">-1</span>:<span class="number">1</span>)*C(d,i)*C(m-d,c-i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,(p[i]*fpow(<span class="number">2</span>,n-k)).x,<span class="string">&quot; \n&quot;</span>[i==m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数 </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷5655 基础数论函数练习题</title>
      <link href="lg5655/"/>
      <url>lg5655/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个长度为 $n$ 的数组 $\{a_i\}_{i=1}^n$，$Q$ 次询问，每次给定 $l$ 和 $r$ 查询 $\operatorname{lcm}(\{a_i\}_{i=l}^r)$，答案对 $10^9+7$ 取模。</p><p><strong>多组数据</strong>，$T,n,Q \leq 300,\ a_i \leq 10^{18}$。</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>把 $&lt; 10^{4.5}$ 的质数分开来处理，这样剩余每个数至多剩余 $3$ 个不同的质因子。考虑我们不需把每个数分解质因数，只需要能够构造一个等价的质数集合即可。构造方法如下：</p><p>对于所有 $1 \leq i &lt; j \leq n$，将 $\gcd(a_i, a_j), a_i / \gcd(a_i, a_j), a_j / \gcd(a_i, a_j)$ 加入到集合 $S$ 中。将其中存在 $S$ 中的数作为因数的数删掉，剩下的集合就是一个合法的质数集合。</p><p>接下来的一个朴素做法是莫队，需要一些精妙的实现使得那个 $\log$ 是加上去的而不是乘上去的。</p><ol><li>会用到质数的快速幂，这个可以预处理</li><li>相当于对于每个质数维护一个出现次数集合，支持加减和查询最大的出现次数。首先维护一个桶来去重，然后开一个 long long，并每次查询最高的 $1$ 出现的位置。</li></ol><p>时间复杂度近似于 $O(n^3 \log n)$，需要一些精细的实现。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>一度 TLE，后来被 zx2003 哥哥卡了半天卡进去了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pair std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">310</span>,M=<span class="number">32000</span>,L=<span class="number">5000</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = (<span class="number">1</span> &lt;&lt; <span class="number">21</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ibuf[SIZE], *iS, *iT, obuf[SIZE], *oS = obuf, *oT = oS + SIZE - <span class="number">1</span>, c, qu[<span class="number">55</span>]; <span class="keyword">int</span> f, qr;</span><br><span class="line"><span class="comment">// getchar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)</span></span><br><span class="line"><span class="comment">// print the remaining part</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">fwrite (obuf, <span class="number">1</span>, oS - obuf, <span class="built_in">stdout</span>);</span><br><span class="line">oS = obuf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// putchar</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span> <span class="params">(<span class="keyword">char</span> x)</span> </span>&#123;</span><br><span class="line">*oS ++ = x;</span><br><span class="line"><span class="keyword">if</span> (oS == oT) flush ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// input a signed integer</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gch</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=gc();<span class="keyword">for</span>(;<span class="built_in">isspace</span>(c);c=gc());</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gs</span><span class="params">(<span class="keyword">char</span>*c)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> x=gc();<span class="keyword">for</span>(;<span class="built_in">isspace</span>(x);x=gc());</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isspace</span>(x);x=gc())*c++=x;*c=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gi</span> <span class="params">(I &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (f = <span class="number">1</span>, c = gc(); c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c = gc()) <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; c &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; c &gt;= <span class="string">&#x27;0&#x27;</span>; c = gc()) x = x * <span class="number">10</span> + (c &amp; <span class="number">15</span>); x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print a signed integer</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">(I x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) putc (<span class="string">&#x27;0&#x27;</span>); <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc (<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">while</span> (x) qu[++ qr] = x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>,  x /= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (qr) putc (qu[qr --]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//no need to call flush at the end manually!</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flusher_</span> &#123;</span>~Flusher_()&#123;flush();&#125;&#125;io_flusher_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ExactDiv</span> &#123;</span></span><br><span class="line">  ExactDiv() &#123;&#125;</span><br><span class="line">  ExactDiv(ull n)&#123;</span><br><span class="line">  <span class="keyword">for</span>(z=<span class="number">0</span>;!(n&amp;<span class="number">1</span>);++z,n&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">  t=((ull)<span class="number">-1</span>) / n;</span><br><span class="line">i=mul_inv(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">ull <span class="title">mul_inv</span><span class="params">(ull n)</span> </span>&#123;</span><br><span class="line">    ull x = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) x *= <span class="number">2</span> - n * x;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(<span class="keyword">const</span> ull&amp;n)</span> </span>&#123; <span class="keyword">return</span> ((n&gt;&gt;z&lt;&lt;z)==n) &amp;&amp; (n&gt;&gt;z)*<span class="keyword">this</span>-&gt;i&lt;=<span class="keyword">this</span>-&gt;t; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">const</span> ll&amp;n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n&gt;=<span class="number">0</span> &amp;&amp; divide(n);</span><br><span class="line">  &#125;</span><br><span class="line">  ull t, i,z;</span><br><span class="line">&#125;ediv[M],el[L];</span><br><span class="line"><span class="keyword">int</span> T,n,m,l,tl,pc,sqn,p[L],ans[N],vis[M],bln[N],pri[M];ll a[N],ls[L],pw[L][<span class="number">65</span>],ipw[L][<span class="number">65</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ll&gt; fac;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&gt; v[N];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Z=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> gg[Z][Z];</span><br><span class="line"><span class="keyword">int</span> C;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">gcd</span><span class="params">(T x,T y)</span></span>&#123;++C;<span class="keyword">return</span> x&lt;Z &amp;&amp; y&lt;Z?gg[x][y]:(y?gcd(y,x%y):x);&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> query &amp;other)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> bln[l]==bln[other.l]?(r&lt;other.r)==(bln[l]&amp;<span class="number">1</span>):l&lt;other.l;</span><br><span class="line"><span class="comment">//return bln[l]==bln[other.l]?r&lt;other.r:l&lt;other.l;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=(ll)a*a%mod)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=(ll)s*a%mod;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> buc[L][<span class="number">65</span>],mx[L];</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">1</span>,zcnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&gt; &amp;vet)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:vet)&#123;</span><br><span class="line"><span class="keyword">if</span>(mx[it.first])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls[it.first])tot=tot*ipw[it.first][mx[it.first]]%mod;</span><br><span class="line"><span class="keyword">else</span> --zcnt;</span><br><span class="line">&#125;</span><br><span class="line">++buc[it.first][it.second];</span><br><span class="line">mx[it.first]=<span class="built_in">std</span>::max(mx[it.first],it.second);</span><br><span class="line"><span class="keyword">if</span>(mx[it.first])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls[it.first])tot=tot*pw[it.first][mx[it.first]]%mod;</span><br><span class="line"><span class="keyword">else</span> ++zcnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&gt; &amp;vet)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:vet)&#123;</span><br><span class="line"><span class="keyword">if</span>(mx[it.first])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls[it.first])tot=tot*ipw[it.first][mx[it.first]]%mod;</span><br><span class="line"><span class="keyword">else</span> --zcnt;</span><br><span class="line">&#125;</span><br><span class="line">--buc[it.first][it.second];</span><br><span class="line"><span class="keyword">for</span>(mx[it.first]=p[it.first];mx[it.first] &amp;&amp; !buc[it.first][mx[it.first]];--mx[it.first]);</span><br><span class="line"><span class="keyword">if</span>(mx[it.first])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls[it.first])tot=tot*pw[it.first][mx[it.first]]%mod;</span><br><span class="line"><span class="keyword">else</span> ++zcnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fpow2</span><span class="params">(ll x,ll y,ll mo)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=(__int128)x*x%mo)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans=(__int128)x*x%mo;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ck</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;pri[i]&lt;=<span class="number">10</span>;++i)<span class="keyword">if</span>(fpow2(pri[i],x<span class="number">-1</span>,x)!=<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hmp</span>&#123;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> mo=<span class="number">1999</span>;</span><br><span class="line"><span class="keyword">int</span> h[mo],nxt[mo],xb;ll v[mo];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> z=x%mo,i=h[z];</span><br><span class="line"><span class="keyword">for</span>(;i &amp;&amp; v[i]!=x;i=nxt[i]);</span><br><span class="line"><span class="keyword">if</span>(!i)nxt[++xb]=h[z],h[z]=xb,v[xb]=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;ss;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;M;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])pri[++pc]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=pc&amp;&amp;i*pri[j]&lt;M;j++)&#123;</span><br><span class="line">vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pc;++i)ediv[i]=pri[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Z;++i)<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Z;++j)gg[i][j]=!i || !j?i+j:(i&gt;j?gg[i-j][j]:gg[i][j-i]);</span><br><span class="line"><span class="keyword">for</span>(io::gi(T);T--;)&#123;</span><br><span class="line">io::gi(n),io::gi(m),sqn=<span class="built_in">sqrt</span>(n),l=<span class="number">0</span>,fac.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)io::gi(a[i]),bln[i]=i/sqn,v[i].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)io::gi(q[i].l),io::gi(q[i].r),q[i].id=i,ans[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> id[M];<span class="built_in">memset</span>(id+<span class="number">1</span>,<span class="number">0</span>,pc&lt;&lt;<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,cnt;j&lt;=pc;j++)<span class="keyword">if</span>(ediv[j].divide(a[i]))&#123;</span><br><span class="line">cnt=<span class="number">0</span>;<span class="keyword">while</span>(a[i]%pri[j]==<span class="number">0</span>)++cnt,a[i]/=pri[j];</span><br><span class="line"><span class="keyword">if</span>(!id[j])ls[id[j]=++l]=pri[j],el[l]=ls[l],p[l]=<span class="number">0</span>;</span><br><span class="line">v[i].push_back(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(id[j],cnt)),p[id[j]]=<span class="built_in">std</span>::max(p[id[j]],cnt);</span><br><span class="line">&#125;</span><br><span class="line">ss.xb=<span class="number">0</span>;<span class="built_in">memset</span>(ss.h,<span class="number">0</span>,<span class="keyword">sizeof</span> ss.h);</span><br><span class="line"><span class="keyword">int</span> step=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">static</span> ll aa[N];<span class="keyword">int</span> nn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>)aa[++nn]=a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;++i)ss.insert(aa[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=nn;j+=step)&#123;</span><br><span class="line">ll pi=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;step &amp;&amp; j+k&lt;=nn;++k)pi=(__int128)pi*aa[j+k]%aa[i];</span><br><span class="line"><span class="keyword">if</span>(gcd(pi,aa[i])!=<span class="number">1</span>)<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;step &amp;&amp; j+k&lt;=nn;++k)&#123;</span><br><span class="line">ll x=gcd(aa[i],aa[j+k]);</span><br><span class="line">ss.insert(x);ss.insert(aa[i]/x);ss.insert(aa[j+k]/x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fac=<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ll&gt;(ss.v+<span class="number">1</span>,ss.v+ss.xb+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">std</span>::sort(fac.begin(),fac.end()),fac.erase(<span class="built_in">std</span>::unique(fac.begin(),fac.end()),fac.end());</span><br><span class="line">tl=l;</span><br><span class="line"><span class="keyword">if</span>(!fac.empty())<span class="keyword">for</span>(<span class="keyword">int</span> i=fac[<span class="number">0</span>]==<span class="number">1</span>?<span class="number">1</span>:<span class="number">0</span>,fl;fl=<span class="number">0</span>,i&lt;fac.size();i++)&#123;</span><br><span class="line">fl=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(fl)ls[++l]=fac[i],p[l]=<span class="number">0</span>,el[l]=ls[l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=tl+<span class="number">1</span>,cnt;j&lt;=l;j++)<span class="keyword">if</span>(el[j].divide(a[i]))&#123;</span><br><span class="line">cnt=<span class="number">0</span>;<span class="keyword">while</span>(a[i]%ls[j]==<span class="number">0</span>)++cnt,a[i]/=ls[j];</span><br><span class="line">v[i].push_back(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(j,cnt)),p[j]=<span class="built_in">std</span>::max(p[j],cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=p[i];j++)ipw[i][j]=fpow(pw[i][j]=fpow(ls[i]%mod,j),mod<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">std</span>::stable_sort(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ul=<span class="number">1</span>,ur=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(ul&gt;q[i].l)add(v[--ul]);<span class="keyword">while</span>(ur&lt;q[i].r)add(v[++ur]);</span><br><span class="line"><span class="keyword">while</span>(ul&lt;q[i].l)del(v[ul++]);<span class="keyword">while</span>(ur&gt;q[i].r)del(v[ur--]);</span><br><span class="line">ans[q[i].id]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ul&lt;=ur)del(v[ur--]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)io::print(ans[i]),io::putc(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LOJ6051 「雅礼集训 2017 Day11」PATH</title>
      <link href="loj6051/"/>
      <url>loj6051/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定 $ n $ 和 $ \{a_i\} $，满足 $ a_0 \geq a_1 \geq \cdots \geq a_{n - 1} \geq 0 $，求出在 $ n $ 维空间中从 $ (0, 0, \ldots, 0) $ 走到 $ (a_0, a_1, \ldots, a_{n - 1}) $，每一步使某一维坐标增加 $ 1 $ 的方案中随机选出一种，满足经过的所有点 $ (x_0, x_1, \ldots, x_{n - 1}) $ 都满足 $ x_0 \geq x_1 \geq \cdots \geq x_{n - 1} $ 的概率，答案模 $ 1004535809 $ 输出。</p><p>$n, a_i \leq 5\times 10^5$。</p></blockquote><a id="more"></a><p>利用钩子定理相关知识我们可以直接得到</p><script type="math/tex; mode=display">ans = \frac { \displaystyle \frac {m!} { \prod\limits_{(i, j) \in \lambda} h(i, j)}} { \displaystyle \frac {m!} {\prod\limits_{i=1}^n a_i} }</script><p>其中 $m = \sum\limits_{i=1}^n a_i$，$\lambda$ 是第 $i$ 行长度为 $a_i$ 的杨表，$h_\lambda(i, j)$ 表示杨表 $\lambda$ 中第 $i$ 行第 $j$ 个元素的钩子长度。</p><p>根据</p><script type="math/tex; mode=display">\prod\limits_{(i, j) \in \lambda} h_\lambda(i, j)= \frac { \prod\limits_{i=1}^n (a_i + n - i)! } { \prod\limits_{1 \leq i < j \leq n} \left((a_i - i) - (a_j - j)\right)}</script><p>那么</p><script type="math/tex; mode=display">\begin{aligned}ans&= \frac { \displaystyle \frac {m! \prod\limits_{1 \leq i < j \leq n} \left((a_i - i) - (a_j - j)\right)} { \prod\limits_{i=1}^n (a_i + n - i)! }} { \displaystyle \frac {m!} {\prod\limits_{i=1}^n a_i} } \\&= \frac { \prod\limits_{i=1}^n a_i} { \prod\limits_{i=1}^n (a_i + n - i)! } \times \prod\limits_{1 \leq i < j \leq n} \left((a_i - i) - (a_j - j)\right)\end{aligned}</script><p>发现处理的瓶颈在于右半部分。</p><p>注意到 $\{a_i\}_{i=1}^n$ 为仅为 $O(n)$ 级别。并且由于 $\forall i &lt; j ,\; a_i \geq a_j$ ，可得 $\forall i &lt; j, (a_i - i) &gt; (a_j - j)$ 。考虑卷积优化。</p><p>可以开两个多项式，一个幂次为 $(a_i - i)$ 一个幂次为 $-(a_i - i)$ ，卷积一波只取幂次为整数的即可。（如果由 $i \geq j$ 的贡献而成，一定满足幂次 $\leq 0$）。</p><p>时间复杂度 $O(n \log n)$ 。</p><!--more--><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2019.07.20 18:22:18</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = (l), i##ed = (r); i &lt;= i##ed; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> for_each(i, a) for (size_t i = 0, i##ed = a.size(); i &lt; i##ed; ++i)</span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">char</span> c = getchar(); <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">&#x27;-&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c)</span> </span>&#123; print(x), <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T a, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="string">&quot;&quot;</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) print(a[i], <span class="string">&quot; \n&quot;</span>[i == r]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e6</span> + <span class="number">10</span>, mod = <span class="number">1004535809</span>;</span><br><span class="line"><span class="keyword">int</span> n, l, tn, tm, ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], f[N], g[N], h[N], w[N], rev[N], fac[N], ifac[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> &amp;l, <span class="keyword">int</span> n)</span> </span>&#123; ++a[n], l = <span class="built_in">std</span>::max(l, n); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a -= b; <span class="keyword">return</span> a &lt; <span class="number">0</span> ? a + mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a += b; <span class="keyword">return</span> a &gt;= mod ? a - mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (ll)a * b - (ll)a * b / mod * mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">2</span> ? <span class="number">1</span> : mul(mod - mod / x, inv(mod % x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">int</span> s = <span class="number">1</span>; <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = mul(a, a)) <span class="keyword">if</span> (b &amp; <span class="number">1</span>) s = mul(s, a); <span class="keyword">return</span> s; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_fac</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fac[i] = mul(fac[i - <span class="number">1</span>], i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = mul(mod - mod / i, ifac[mod % i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = mul(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; l; len &lt;&lt;= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i += (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = a[i + j], y = mul(a[i + j + len], w[j + len]);</span><br><span class="line">a[i + j] = inc(x, y), a[i + j + len] = dec(x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *c, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> &amp;l)</span> </span>&#123;</span><br><span class="line">l = <span class="number">1</span>; <span class="keyword">int</span> k = <span class="number">0</span>; <span class="keyword">while</span> (l &lt; n + m - <span class="number">1</span>) l &lt;&lt;= <span class="number">1</span>, ++k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> wn, len = <span class="number">1</span>; len &lt; l; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">wn = fpow(<span class="number">3</span>, (mod - <span class="number">1</span>) / (len &lt;&lt; <span class="number">1</span>)), w[len] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) w[i + len] = mul(w[i + len - <span class="number">1</span>], wn);</span><br><span class="line">&#125; <span class="keyword">int</span> inv_l = inv(l);</span><br><span class="line">ntt(a, l), ntt(b, l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) c[i] = mul(a[i], b[i]);</span><br><span class="line"><span class="built_in">std</span>::reverse(c + <span class="number">1</span>, c + l), ntt(c, l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) c[i] = mul(c[i], inv_l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]);</span><br><span class="line">init_fac(n + a[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans = mul(ans, mul(fac[a[i]], ifac[a[i] + n - i]));</span><br><span class="line">setup(f, tn, a[i] - i + n);</span><br><span class="line">setup(g, tm, -a[i] + i + a[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// printf(&quot;%d &lt;&lt; %d %d : %d %d\n&quot;, ans, a[i], a[i] + n - i, fac[a[i]], mul(ifac[a[i] + n - i], fac[a[i] + n - i]));</span></span><br><span class="line">&#125;</span><br><span class="line">mul(f, g, h, tn + <span class="number">1</span>, tm + <span class="number">1</span>, l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, d = n + a[<span class="number">1</span>]; i + d &lt; l; i++) &#123;</span><br><span class="line"><span class="comment">// if (h[i + d]) printf(&quot;%d %d : %d\n&quot;, i, i + d, h[i + d]);</span></span><br><span class="line">ans = mul(ans, fpow(i, h[i + d]));</span><br><span class="line">&#125;</span><br><span class="line">print(ans, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> ringo::main(), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 杨表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTT2018 esperar（PKUSC2019 试机题）</title>
      <link href="ctt2018-esperar/"/>
      <url>ctt2018-esperar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定 $n$ 和长度为 $n$ 的数组 $\{a_i \} _{i=1}^n$ ，求满足 $\forall i \in [1, n], c_i | b_i, b_i | a_i$ 并且 $\prod_{i=1}^n c_i^2  \leq \prod_{i=1}^n b_i$ 的 $\{b_i\}_{i=1}^n$ 和 $\{c_i\}_{i=1}^n$ 的方案数。</p><p>$n \leq 100,\ a_i \leq 10^9$。</p></blockquote><a id="more"></a><p>假设 $B = \prod_{i=1}^n b_i, C = \prod_{i=1}^n c_i^2$ ，易证 $C &lt; B$ 的方案与 $C &gt; B$ 的方案是相同的，可以算出总共的方案加上等于的方案再除以二。</p><p>考虑等于的方案，可把每个质因数分开考虑，相当于做背包取第 $0$ 项；</p><p>考虑总共的方案，对于在 $a_i$ 中出现了 $k$ 次的质因数 $x$，贡献为 $\frac 1 2 (k + 1) (k + 2)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2019.07.07 11:14:03</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">char</span> c = getchar(); <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">&#x27;-&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c)</span> </span>&#123; print(x), <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T a, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="string">&quot;&quot;</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) print(a[i], <span class="string">&quot; \n&quot;</span>[i == r]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">1e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, min, max, ans = <span class="number">1</span>, sum = <span class="number">1</span>, pcnt;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N][M], c[M][N], pri[M], vis[M], f[M], g[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a -= b; <span class="keyword">return</span> a &lt; <span class="number">0</span> ? a + mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a += b; <span class="keyword">return</span> a &gt;= mod ? a - mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (ll)a * b - (ll)a * b / mod * mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_pri</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; limit; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[i]) pri[++pcnt] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pcnt &amp;&amp; i * pri[j] &lt; limit; j++)</span><br><span class="line">&#123; vis[i * pri[j]] = <span class="number">1</span>; <span class="keyword">if</span> (i % pri[j] == <span class="number">0</span>) <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> *cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pcnt; i++) <span class="keyword">while</span> (x % pri[i] == <span class="number">0</span>) ++cnt[i], x /= pri[i];</span><br><span class="line"><span class="keyword">if</span> (x != <span class="number">1</span>) ++cnt[<span class="built_in">map</span>.find(x) == <span class="built_in">map</span>.end() ? (pri[++pcnt] = x, <span class="built_in">map</span>[x] = pcnt) : <span class="built_in">map</span>[x]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = min; i &lt;= max; i++) f[i] = <span class="number">0</span>;</span><br><span class="line">min = max = <span class="number">0</span>, f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= cnt[i]; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= j; k++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = min; i &lt;= max; i++)</span><br><span class="line">g[i + (k &lt;&lt; <span class="number">1</span>) - j] = inc(g[i + (k &lt;&lt; <span class="number">1</span>) - j], f[i]);</span><br><span class="line">min -= cnt[i], max += cnt[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = min; i &lt;= max; i++) f[i] = g[i], g[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), init_pri(<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]), split(a[i], b[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pcnt; j++) c[j][i] = b[i][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pcnt; i++) ans = mul(ans, solve(c[i]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pcnt; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) sum = mul(sum, mul((mod + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, mul(c[i][j] + <span class="number">2</span>, c[i][j] + <span class="number">1</span>)));</span><br><span class="line">print(mul(inc(ans, sum), (mod + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MEMSET0_LOCAL_ENVIRONMENT</span></span><br><span class="line">freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> ringo::main(), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1053E Euler tour</title>
      <link href="cf1053e/"/>
      <url>cf1053e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一棵树的欧拉序，其中被若干位被删除。你可以在被删除的位置填数，要求构造任何一个合法的欧拉序。</p><p>$n \leq 5 \times 10^5, |S| = 2n - 1$。</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="主体思路"><a href="#主体思路" class="headerlink" title="主体思路"></a>主体思路</h3><p>我们可以分治，$\operatorname{solve}(l, r)$ 表示解决 $l$ 到 $r$ 这段区间其中 $a_l = a_r$。</p><p>首先如果 $a_{(l + 1) \cdots (r - 1)}$ 中有何 $a_l$ 相等的数，那么可以继续分治，否则的话中间没有和 $a_l$ 相等的数。</p><p>对于所有满足 $l &lt; p &lt; q &lt; r \text{ and } a_p = a_q$，也可以递归，递归完后删除掉除了这段区间的根节点的点。这样的话 $a_{(l + 1) \cdots (r - 1)}$ 除 $0$ 外互不相同。</p><p>接下来考虑对于所有 $x, y, 0$ 或 $0, y, x$ 的，可以直接把空格处填成 $x$，然后缩掉。这样的话只会剩下连续的 $0$。</p><p>对于连续的 $0$，依次补过去，每补上一个，如果存在 $x, y, 0$ 或 $0, y, x$ 就继续缩掉。</p><p>最后只剩下一个点，也就完成了递归。</p><h3 id="对无解的判断"><a href="#对无解的判断" class="headerlink" title="对无解的判断"></a>对无解的判断</h3><ol><li>没有足够的点用来放</li><li>$a_1 \neq a_n$</li><li>对于 $\operatorname{solve}(l, r)$，$r - l + 1$ 是 $2$ 的倍数</li><li>对于 $\operatorname{solve}(l, r)$，递归完后 $0$ 的个数小于非 $0$ 个数 $-1$</li><li>存在 $p &lt; q &lt; r &lt; s$ 满足 $a_p = a_r \text{ and } a_q = a_s \text{ and } a_p \neq a_q \text{ and } a_r \neq a_s$</li></ol><h3 id="对于-a-1-a-2n-1-的特殊处理"><a href="#对于-a-1-a-2n-1-的特殊处理" class="headerlink" title="对于 $a_1, a_{2n - 1}$ 的特殊处理"></a>对于 $a_1, a_{2n - 1}$ 的特殊处理</h3><ol><li>如果 $a_1 \neq 0 \text{ and } a_{2n-1} \neq 0 \text{ and } a_1 \neq a_{2n-1}$，那么无解</li><li>如果 $(a_1 = 0 \text{ and } a_{2n-1} \neq 0) \text{ or } (a_1 \neq 0 \text{ and } a_{2n-1} = 0)$，那么 $a_1 = a_{2n-1} = \max(a_1, a_{2n-1})$ 即可</li><li>如果 $a_1 = a_{2n-1} = 0$ 那么需要给 $a_1, a_{2n-1}$ 分配一个标号。先枚举检查有没有可以从中间选出的可能，如果没有，就新分配一个点</li></ol><h3 id="对于递归的复杂度保证"><a href="#对于递归的复杂度保证" class="headerlink" title="对于递归的复杂度保证"></a>对于递归的复杂度保证</h3><p>直接实现的可能会超时，我把相同值的下标存到一起，然后根据「CTSC2018 青蕈领主」的方式建树，先把区间内与根节点不同色的递归处理掉，再来处理根节点同色的。</p><h3 id="对于扫描形如-x-y-0-和-y-x-0-的复杂度保证"><a href="#对于扫描形如-x-y-0-和-y-x-0-的复杂度保证" class="headerlink" title="对于扫描形如 $x, y, 0$ 和 $y, x, 0$ 的复杂度保证"></a>对于扫描形如 $x, y, 0$ 和 $y, x, 0$ 的复杂度保证</h3><p>可以开一个栈暴力扫过去，用类似括号匹配的方式处理，这里不多讲。</p><p>需要注意的是，我的实现是先把已有的 $x, y, 0$ 和 $y, x, 0$ 填掉，不然有可能不是最优方案。</p><p>然后两端同时扫描，如果没有可以直接填的，但给两端中的 $0$ 的点分配标号可以配对的话，就分配掉。如果都没有，随便一端填个数即可。</p><h3 id="复杂度证明"><a href="#复杂度证明" class="headerlink" title="复杂度证明"></a>复杂度证明</h3><p>一个数只会在某一层被处理掉，对那一层的复杂度贡献是 $\mathcal O(1)$ 的，所以这一部分的时间复杂度为 $\mathcal O(n)$。</p><p>由于需要判断无解等等情况，可以写一个支持区间查询最大值 / 最小值的线段树 / ST 表，时间复杂度 $\mathcal O(n \log n)$，其中 ST 表的空间复杂度为 $\mathcal O(n \log n)$，可能会导致 $\text{MLE}$。</p><p>综上，时间复杂度 $\mathcal O(n \log n)$，空间复杂度 $\mathcal O(n)$，可以通过本题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2019.05.08 21:39:49</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">&#x27;-&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c)</span> </span>&#123; print(x), <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T a, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="string">&quot;&quot;</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) print(a[i], <span class="string">&quot; \n&quot;</span>[i == r]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, L = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N], del[N], use[N], <span class="built_in">log</span>[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[N], G[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val, id;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">info</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">info</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123; val = a[k], id = k; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">info</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; val = a, id = b; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;info&gt; s, h, t, bkt[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="built_in">std</span>::greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">noSolution</span><span class="params">()</span> </span>&#123; <span class="built_in">puts</span>(<span class="string">&quot;no&quot;</span>), <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">minimax</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> min, max;</span><br><span class="line"><span class="keyword">inline</span> minimax <span class="keyword">operator</span>^(<span class="keyword">const</span> minimax &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="built_in">std</span>::min(min, other.min), <span class="built_in">std</span>::max(max, other.max)&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> seg &#123;</span><br><span class="line">minimax b[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, mid;</span><br><span class="line">minimax x;</span><br><span class="line">&#125; p[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">p[u].l = l, p[u].r = r, p[u].mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123; p[u].x = b[l]; <span class="keyword">return</span>; &#125;</span><br><span class="line">build(u &lt;&lt; <span class="number">1</span>, l, p[u].mid);</span><br><span class="line">build(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, p[u].mid + <span class="number">1</span>, r);</span><br><span class="line">p[u].x = p[u &lt;&lt; <span class="number">1</span>].x ^ p[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">minimax <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p[u].l == l &amp;&amp; p[u].r == r) <span class="keyword">return</span> p[u].x;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= p[u].mid) <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (l &gt; p[u].mid) <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span>, l, p[u].mid) ^ query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, p[u].mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> tmp[N];</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (!tmp[a[i]]) tmp[a[i]] = i;</span><br><span class="line">b[i].min = tmp[a[i]];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b[i].min = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= <span class="number">1</span>; i--) <span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (!tmp[a[i]]) tmp[a[i]] = i;</span><br><span class="line">b[i].max = tmp[a[i]];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b[i].max = i;</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">minimax <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> query(<span class="number">1</span>, l, r); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">possible</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!((r - l + <span class="number">1</span>) &amp; <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (l + <span class="number">1</span> &gt; r - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">auto</span> it = query(l + <span class="number">1</span>, r - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> it.max &lt;= r &amp;&amp; it.min &gt;= l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (use[cur]) cur++;</span><br><span class="line"><span class="keyword">if</span> (cur &gt; n) <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;[No enougth nodes] No solution.\n&quot;</span>, noSolution();</span><br><span class="line"><span class="keyword">return</span> use[cur] = <span class="number">1</span>, cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; jump;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> y : G[x]) &#123;</span><br><span class="line">solve(y);</span><br><span class="line">jump.push_back(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(*v[y].begin(), *--v[y].end()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::reverse(jump.begin(), jump.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, L, R, at = <span class="number">0</span>; i + <span class="number">1</span> &lt; v[x].size(); i++) &#123;</span><br><span class="line">L = v[x][i], R = v[x][i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!((R - L + <span class="number">1</span>) &amp; <span class="number">1</span>)) noSolution(); <span class="comment">// 要求每个这样的区间为奇数</span></span><br><span class="line">s.clear(), s.push_back(info(L));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = L + <span class="number">1</span>; i &lt;= R - <span class="number">1</span>; i++) &#123;</span><br><span class="line">s.push_back(info(i));</span><br><span class="line"><span class="keyword">if</span> (at &lt; jump.size() &amp;&amp; i == jump[at].first) i = jump[at++].second;</span><br><span class="line">&#125;</span><br><span class="line">s.push_back(info(R));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c0 = <span class="number">0</span>, c1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + <span class="number">1</span> &lt; s.size(); i++)</span><br><span class="line">s[i].val ? ++c1 : ++c0;</span><br><span class="line"><span class="keyword">if</span> (c0 &lt; c1 - <span class="number">1</span>) noSolution();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tl = <span class="number">0</span>, tr = s.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (tl &lt; s.size() &amp;&amp; s[tl].val) tl++;</span><br><span class="line"><span class="keyword">while</span> (tr &gt;= <span class="number">0</span> &amp;&amp; s[tr].val) tr--;</span><br><span class="line"><span class="keyword">if</span> (tl == s.size()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = tl; i &lt;= tr; i++)</span><br><span class="line"><span class="keyword">if</span> (s[i].val) &#123;</span><br><span class="line"><span class="keyword">if</span> (t.size() &gt;= <span class="number">2</span> &amp;&amp; (--t.end())-&gt;val &amp;&amp; !(----t.end())-&gt;val) &#123;</span><br><span class="line">a[(----t.end())-&gt;id] = s[i].val;</span><br><span class="line">del[(----t.end())-&gt;id] = del[(--t.end())-&gt;id] = <span class="number">1</span>;</span><br><span class="line">t.pop_back(), t.pop_back(), t.push_back(s[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t.push_back(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (t.size() &gt;= <span class="number">2</span> &amp;&amp; (--t.end())-&gt;val &amp;&amp; (----t.end())-&gt;val) &#123;</span><br><span class="line">a[s[i].id] = (----t.end())-&gt;val;</span><br><span class="line">del[s[i].id] = del[(--t.end())-&gt;id] = <span class="number">1</span>;</span><br><span class="line">t.pop_back();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t.push_back(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.clear(), <span class="built_in">std</span>::swap(t, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.size(); i++)</span><br><span class="line"><span class="keyword">if</span> (del[t[i].id]) del[t[i].id] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> s.push_back(t[i]);</span><br><span class="line">t.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = s.size() - <span class="number">1</span>; i &lt;= j; ) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i].val) &#123;</span><br><span class="line">h.push_back(s[i++]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[j].val) &#123;</span><br><span class="line">t.push_back(s[j--]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (h.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">a[s[i].id] = s[i].val = (----h.end())-&gt;val;</span><br><span class="line">h.pop_back(), i++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">a[s[j].id] = s[j].val = (----t.end())-&gt;val;</span><br><span class="line">t.pop_back(), j--;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a[s[i].id] = s[i].val = newNode();</span><br><span class="line">h.push_back(s[i++]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h.clear(), t.clear(), s.clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), m = (n &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, <span class="built_in">log</span>[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">log</span>[i] = <span class="built_in">log</span>[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">read(a[i]);</span><br><span class="line"><span class="keyword">if</span> (a[i]) use[a[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">1</span>] &amp;&amp; a[m] &amp;&amp; a[<span class="number">1</span>] != a[m]) noSolution();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!a[<span class="number">1</span>] &amp;&amp; !a[m]) &#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> any = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= m - <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &amp;&amp; a[i] != a[<span class="number">2</span>] &amp;&amp; a[i] != a[m - <span class="number">1</span>] &amp;&amp; possible(<span class="number">1</span>, i) &amp;&amp; possible(i, m))</span><br><span class="line">any = <span class="built_in">std</span>::max(any, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;any = &quot;</span> &lt;&lt; any &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">a[<span class="number">1</span>] = a[m] = any ? any : newNode();</span><br><span class="line">&#125; <span class="keyword">else</span> a[<span class="number">1</span>] = a[m] = a[<span class="number">1</span>] | a[m];</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (a[i]) v[a[i]].push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (v[i].size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + <span class="number">1</span> &lt; v[i].size(); j++)</span><br><span class="line"><span class="keyword">if</span> (!possible(v[i][j], v[i][j + <span class="number">1</span>])) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;[Impossible section] &quot;</span> &lt;&lt; v[i][j] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i][j + <span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">noSolution();</span><br><span class="line">&#125;</span><br><span class="line">bkt[*--v[i].end()].push_back(&#123;*v[i].begin(), i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : bkt[i]) &#123;</span><br><span class="line"><span class="keyword">while</span> (s.size() &amp;&amp; (--s.end())-&gt;val &gt;= it.val) &#123;</span><br><span class="line">G[it.id].push_back((--s.end())-&gt;id);</span><br><span class="line">s.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">s.push_back(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s.clear();</span><br><span class="line">solve(a[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">print(a, <span class="number">1</span>, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> ringo::main(), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷5293 [HNOI2019]白兔之舞</title>
      <link href="lg5293/"/>
      <url>lg5293/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有一张顶点数为 $(L+1)\times n$ 的有向图。这张图的每个顶点由一个二元组$(u,v)$表示$(0\le u\le L,1\le v\le n)$。<br>这张图不是简单图，对于任意两个顶点 $(u_1,v_1)(u_2,v_2)$，如果 $u_1&lt;u_2$，则从 $(u_1,v_1)$ 到 $(u_2,v_2)$ 一共有 $w[v_1][v_2]$ 条不同的边，如果 $u_1\ge u_2$ 则没有边。</p><p>白兔将在这张图上上演一支舞曲。白兔初始时位于该有向图的顶点 $(0,x)$。</p><p>白兔将会跳若干步。每一步，白兔会从当前顶点沿任意一条出边跳到下一个顶点。白兔可以在任意时候停止跳舞（也可以没有跳就直接结束）。当到达第一维为 $L$ 的顶点就不得不停止，因为该顶点没有出边。</p><p>假设白兔停止时，跳了 $m$ 步，白兔会把这只舞曲给记录下来成为一个序列。序列的第 $i$ 个元素为它第 $i$ 步经过的边。</p><p>问题来了：给定正整数 $k$ 和 $y$（$1\le y\le n$），对于每个 $t$（$0\le t&lt;k$），求有多少种舞曲（假设其长度为 $m$）满足 $m \bmod k=t$，且白兔最后停在了坐标第二维为 $y$ 的顶点？</p><p>两支舞曲不同定义为它们的长度（$m$）不同或者存在某一步它们所走的边不同。</p><p>输出的结果对 $p$ 取模。保证 $p$ 是质数，$10^8 \leq p \leq 2^{30}$。</p><p>$1 \leq n \leq 3,\ 1 \leq k \leq 65536$。</p></blockquote><p>对于 $n=1$ 的情况，考虑令 $a = w_{1, 1}$ ，用 $f_i$ 表示跳了 $i$ 步的答案，则 $f_i = a^i \binom n i$ 。</p><p>考虑</p><script type="math/tex; mode=display">\begin{aligned}ans&= \sum_{i \bmod k=m} f_i = \sum_{i \bmod k=m} a^i \binom ni \\&= \sum_{i=0}^n [k|i-m] a^i \binom ni \\&= \sum_{i=0}^n \frac 1k \sum_{j=0}^{k-1} \omega_k^{j(i-m)} a^i \binom ni \\&= \frac 1k \sum_{j=0}^{k-1} \omega^{-mj}_k \sum_{i=0}^n \binom ni (\omega^{j}_k a)^i 1^{n-i} \\&= \frac 1k \sum_{i=0}^{k-1} \omega^{-mi}_k \left(\omega^i_k a + 1\right)^n\end{aligned}</script><p>考虑后面的 $\displaystyle{\left(\omega^i_k a + 1\right)^n}$ 对于固定的 $i$ 是相同的，可以与先处理出 $i \in [0, k)$ 的值，设为 $c(i)$。</p><p>一个暴力是多项式多点求值出多项式 $\displaystyle{\frac 1k \sum_{i=0}^{k-1} x^i c(i)}$ 在 $\omega_k^0, \omega_k^{-1}, \omega_k^{-2} … \omega_k^{-k+1}$ 的值，复杂度 $O(k \log^2 k)$，有学长写了一发，貌似被针对了过不去 …</p><p>考虑是否有更优秀的做法来处理 $\omega^{-mj}$？毛爷爷论文中提到把 $ij$ 拆成 $\frac {(i+j)^2} 2 - \frac {i^2} 2 - \frac {j^2} 2$ ，然而可能存在单位根没有二次剩余的情况。考虑把 $ij$ 拆成 $\binom {i+j} 2 - \binom i2 - \binom j2$ ，那么原式可以化为</p><script type="math/tex; mode=display">\begin{aligned}ans&= \frac 1k \sum_{i=0}^{k-1} \omega^{-mi}_k c(i) \\&= \frac 1k \sum_{i=0}^{k-1} \omega^{\binom {i-m} 2 - \binom i2 - \binom {-m}2} _k c(i) \\&= \frac {\omega^{- \binom {-m}2}} k \sum_{i=0}^{k-1} \omega^{\binom {i-m} 2}_k \left( \omega^{- \binom i2}_k  c(i)\right)  \\\end{aligned}</script><p>是一个卷积的形式，复杂度 $O(k \log k)$。</p><p>考虑 $n \le 3$ 的情况，原来的转移会变成矩阵，类似于 BZOJ3328 PYXFIB，可以发现 $c(i)$ 仍然是一个常数，同理卷积即可。</p><a id="more"></a><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2019.04.08 17:56:11</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">&#x27;-&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c)</span> </span>&#123; print(x), <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">7e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, L, x, y, mod;</span><br><span class="line"><span class="keyword">int</span> c[N], w[N], ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a -= b; <span class="keyword">return</span> a &lt; <span class="number">0</span> ? a + mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a += b; <span class="keyword">return</span> a &gt;= mod ? a - mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (ll)a * b - (ll)a * b / mod * mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">2</span> ? <span class="number">1</span> : mul(mod - mod / x, inv(mod % x)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_omega</span><span class="params">(T x)</span> </span>&#123; x = x % k; <span class="keyword">return</span> w[x &lt; <span class="number">0</span> ? x + k : x]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">int</span> s = <span class="number">1</span>; <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = mul(a, a)) <span class="keyword">if</span> (b &amp; <span class="number">1</span>) s = mul(s, a); <span class="keyword">return</span> s; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> phi = <span class="number">1</span>, tmp = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= tmp; i++)</span><br><span class="line"><span class="keyword">if</span> (tmp % i == <span class="number">0</span>) &#123;</span><br><span class="line">phi *= i - <span class="number">1</span>, tmp /= i;</span><br><span class="line"><span class="keyword">while</span> (tmp % i == <span class="number">0</span>) phi *= i, tmp /= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp != <span class="number">1</span>) phi *= tmp - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; e(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= phi; i++)</span><br><span class="line"><span class="keyword">if</span> (phi % i == <span class="number">0</span>) &#123;</span><br><span class="line">e.push_back(i);</span><br><span class="line"><span class="keyword">if</span> (i * i != phi) e.push_back(phi / i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">2</span>; ; w++) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; ::iterator it = e.begin(); it != e.end(); it++)</span><br><span class="line"><span class="keyword">if</span> (fpow(w, *it) == <span class="number">1</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">print(a[i][j], <span class="string">&quot; \n&quot;</span>[j == <span class="number">2</span>]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> matrix <span class="keyword">operator</span> + (matrix a, <span class="keyword">const</span> matrix &amp;b) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">a.a[i][j] = sub(a.a[i][j], b.a[i][j]);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> matrix <span class="keyword">operator</span> * (matrix a, <span class="keyword">int</span> b) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">a.a[i][j] = mul(a.a[i][j], b);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> matrix &amp;a, <span class="keyword">const</span> matrix &amp;b) &#123;</span><br><span class="line">matrix c; <span class="built_in">memset</span>(c.a, <span class="number">0</span>, <span class="keyword">sizeof</span>(c.a));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++)</span><br><span class="line">c.a[i][j] = (c.a[i][j] + (ll)a.a[i][k] * b.a[k][j]) % mod;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">inline</span> matrix <span class="title">fpow</span><span class="params">(matrix a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">matrix s; <span class="built_in">memset</span>(s.a, <span class="number">0</span>, <span class="keyword">sizeof</span>(s.a)), s.a[<span class="number">0</span>][<span class="number">0</span>] = s.a[<span class="number">1</span>][<span class="number">1</span>] = s.a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a)</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) s = s * a;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125; I, S, A;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span> :</span> <span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; &#123;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; ::<span class="built_in">vector</span>;</span><br><span class="line">&#125; f, g;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MTT &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = N &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line">    ll p30 = <span class="number">1l</span>l &lt;&lt; <span class="number">30</span>, p15 = <span class="number">1l</span>l &lt;&lt; <span class="number">15</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">complex</span> &#123;</span></span><br><span class="line">        <span class="keyword">double</span> a, b;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">complex</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">complex</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; a = x, b = <span class="number">0</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">complex</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; a = x, b = y; &#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="built_in">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="built_in">complex</span> &amp;other) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">complex</span>(a + other.a, b + other.b); &#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="built_in">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="built_in">complex</span> &amp;other) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">complex</span>(a - other.a, b - other.b); &#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="built_in">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="built_in">complex</span> &amp;other) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">complex</span>(a * other.a - b * other.b, a * other.b + b * other.a); &#125;</span><br><span class="line">    &#125; w[M], iw[M], a[M], b[M], c[M], d[M], e[M], f[M], g[M], h[M];</span><br><span class="line">    <span class="keyword">int</span> lim, rev[M];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lim = <span class="number">1</span>, k = <span class="number">0</span>; <span class="keyword">while</span> (lim &lt; len) lim &lt;&lt;= <span class="number">1</span>, ++k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span><br><span class="line">        len = lim &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) w[i + len] = <span class="built_in">complex</span>(<span class="built_in">cos</span>(pi * i / len), <span class="built_in">sin</span>(pi * i / len));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) iw[i + len] = <span class="built_in">complex</span>(<span class="built_in">cos</span>(pi * i / len), -<span class="built_in">sin</span>(pi * i / len));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) w[i] = w[i &lt;&lt; <span class="number">1</span>], iw[i] = iw[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> lim;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="built_in">complex</span> *a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; lim; len &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i += (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                    <span class="built_in">complex</span> x = a[i + j], y = a[i + j + len] * w[j + len];</span><br><span class="line">                    a[i + j] = x + y, a[i + j + len] = x - y;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ifft</span><span class="params">(<span class="built_in">complex</span> *a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; lim; len &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i += (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                    <span class="built_in">complex</span> x = a[i + j], y = a[i + j + len] * iw[j + len];</span><br><span class="line">                    a[i + j] = x + y, a[i + j + len] = x - y;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) a[i].a /= lim;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> poly <span class="keyword">operator</span> * (<span class="keyword">const</span> poly &amp;F, <span class="keyword">const</span> poly &amp;G) &#123;</span><br><span class="line">        <span class="function">poly <span class="title">H</span><span class="params">(F.size() + G.size() - <span class="number">1</span>)</span></span>; lim = init(H.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; F.size(); i++) a[i] = F[i] &gt;&gt; <span class="number">15</span>, b[i] = F[i] &amp; <span class="number">32767</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.size(); i++) c[i] = G[i] &gt;&gt; <span class="number">15</span>, d[i] = G[i] &amp; <span class="number">32767</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = F.size(); i &lt; lim; i++) a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = G.size(); i &lt; lim; i++) c[i] = d[i] = <span class="number">0</span>;</span><br><span class="line">        fft(a), fft(b), fft(c), fft(d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++)</span><br><span class="line">            e[i] = a[i] * c[i], f[i] = a[i] * d[i], g[i] = b[i] * c[i], h[i] = b[i] * d[i];</span><br><span class="line">        ifft(e), ifft(f), ifft(g), ifft(h);</span><br><span class="line">        p30 %= mod, p15 %= mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; H.size(); i++)</span><br><span class="line">            H[i] = ((ll)(e[i].a + <span class="number">0.5</span>) % mod * p30 % mod + (ll)(f[i].a + <span class="number">0.5</span>) % mod * p15 % mod + (ll)(g[i].a + <span class="number">0.5</span>) % mod * p15 % mod + (ll)(h[i].a + <span class="number">0.5</span>)) % mod;</span><br><span class="line">        <span class="keyword">return</span> H;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> MTT::<span class="keyword">operator</span> *;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), read(k), read(L), read(x), read(y), read(mod), --x, --y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) read(A.a[i][j]);</span><br><span class="line">w[<span class="number">0</span>] = <span class="number">1</span>, w[<span class="number">1</span>] = fpow(get_root(mod), (mod - <span class="number">1</span>) / k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; k; i++) w[i] = mul(w[i - <span class="number">1</span>], w[<span class="number">1</span>]);</span><br><span class="line">I.a[<span class="number">0</span>][<span class="number">0</span>] = I.a[<span class="number">1</span>][<span class="number">1</span>] = I.a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>, S.a[<span class="number">0</span>][x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) c[i] = (S * fpow(A * w[i] + I, L)).a[<span class="number">0</span>][y];</span><br><span class="line">f.resize((k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>), g.resize(k + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; f.size(); i++) f[i] = get_omega(-((ll)i * (i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g.size(); i++) g[i] = mul(c[i], get_omega(((ll)i * (i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>)));</span><br><span class="line"><span class="comment">// printf(&quot;w: &quot;); for (int i = 0; i &lt; k; i++) print(w[i], &quot; \n&quot;[i == k - 1]);</span></span><br><span class="line"><span class="comment">// printf(&quot;c: &quot;); for (int i = 0; i &lt; k; i++) print(c[i], &quot; \n&quot;[i == k - 1]);</span></span><br><span class="line"><span class="comment">// printf(&quot;f: &quot;); for (int i = 0; i &lt; f.size(); i++) print(f[i], &quot; \n&quot;[i == f.size() - 1]);</span></span><br><span class="line"><span class="comment">// printf(&quot;g: &quot;); for (int i = 0; i &lt; g.size(); i++) print(g[i], &quot; \n&quot;[i == g.size() - 1]);</span></span><br><span class="line"><span class="built_in">std</span>::reverse(g.begin(), g.end());</span><br><span class="line">f = f * g;<span class="keyword">int</span> inv_k = inv(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) ans[i] = mul(f[k + i], mul(get_omega(((ll)i * (i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>)), inv_k));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) print(ans[i], <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MEMSET0_LOCAL_ENVIRONMENT</span></span><br><span class="line">freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> ringo::main(), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵 </tag>
            
            <tag> 单位根 </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式多点求值与快速插值学习笔记</title>
      <link href="mpe-and-fip/"/>
      <url>mpe-and-fip/</url>
      
        <content type="html"><![CDATA[<h2 id="多点求值"><a href="#多点求值" class="headerlink" title="多点求值"></a>多点求值</h2><p>我们若求一个一次函数 $f(x) = ax + b$ 在 $x_0$ 处的值，可以拿 $f(x)$ 对 $(x - x_0)$ 取模，得到的零次多项式即在 $x_0$ 处的点值，容易证明其正确性。</p><p>考虑分治，假设我们需要求 $x_l$ ~ $x_r$ 处的点值，可以通过当前的 $f(x)$ 对 $\prod_{i=l}^{mid} (x-x_i)$ 取模得到递归到 $x_{mid + 1}$ ~ $x_r$ 的多项式，对 $\prod_{i=mid+1}^r (x-x_i)$ 取模得到递归到 $x_l$ ~ $x_mid$ 的多项式。其中上面两个连乘积可以通过分治 + 多项式乘法得到，保存在线段树状结构中。若多项式项数与待求值点数相同则在叶子节点我们可以直接获取点值。</p><h2 id="快速插值"><a href="#快速插值" class="headerlink" title="快速插值"></a>快速插值</h2><p>这是朴素的拉格朗日插值</p><script type="math/tex; mode=display">f(x) = \sum_{i=1}^n y_i \prod_{j\not=i} \frac {x-x_j} {x_i - x_j}</script><p>1、<br>求下半部分，即对于每个 $i \in [1, n]$ 求出 $\prod_{j\not=i} (x_i - x_j)$ 。</p><script type="math/tex; mode=display">\prod_{j\not=i} (x_i - x_j)= \lim_{x \rightarrow x_i} \frac {\prod_{j=1}^n (x_i - x_j)} {x - x_i}</script><p>设分子上半部分为 $g(x)$ ，上下均为不定式，用洛必达法则得</p><script type="math/tex; mode=display">\lim_{x \rightarrow x_i} \frac {g(x)} {x - x_i} = \lim_{x \rightarrow x_i} g'(x) = g'(x_i)</script><p>对 $g’(x)$ 多点求值即可。</p><p>2、<br>现在我们可以把原式化为</p><script type="math/tex; mode=display">f(x) = \sum_{i=1}^n \frac {y_i} {\prod\limits_{j\not=i} (x_i - x_j)} \prod_{j\not=i} (x-x_j)</script><p>其中 $\dfrac {y_i} {\prod_{j\not=i} (x_i - x_j)}$ 我们已知，可以用 $z_i$ 来表示</p><script type="math/tex; mode=display">f(x) = \sum_{i=1}^n z_i \prod_{j\not=i} (x-x_j)</script><p>仍然考虑分治，</p><script type="math/tex; mode=display">\begin{aligned}f_{l \rightarrow r}(x)    =&  \sum_{i=l}^r z_i \prod_{j=l,j\not=i}^r (x-x_j) \\    =&  \sum_{i=l}^{mid} z_i \prod_{j=l,j\not=i}^r (x-x_j) +        \sum_{i=mid+1}^{r} z_i \prod_{j=l,j\not=i} (x-x_j) \\    =&  \sum_{i=l}^{mid} z_i \prod_{j=l,j\not=i}^{mid} (x-x_j) \times        \prod_{j=mid+1,j\not=i}^{r} (x-x_j) +\\     &  \sum_{i=mid+1}^{r} z_i \prod_{j=mid+1,j\not=i}^{r} (x-x_j) \times        \prod_{j=l,j\not=i}^{mid} (x-x_j) \\    =&  f_{l \rightarrow mid}(x)        \prod_{j=mid+1,j\not=i}^{r} (x-x_j) +        f_{mid+1 \rightarrow r}(x)        \prod_{j=l,j\not=i}^{mid} (x-x_j) \\\end{aligned}</script><p>可以直接调用之前分治 + 多项式乘法的结果，减小常数。</p>]]></content>
      
      
      <categories>
          
          <category> OI算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
