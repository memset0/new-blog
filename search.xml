<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello, World</title>
      <link href="about/"/>
      <url>about/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客！</p><a id="more"></a>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>「Petrozavodsk Summer 2020」Parity Sort</title>
      <link href="petrozavodsk2020-summer-day5-c/"/>
      <url>petrozavodsk2020-summer-day5-c/</url>
      
        <content type="html"><![CDATA[<blockquote><p>定义一个排列 $P$ 上的操作 $(t,S)$ 为：</p><ol><li>有两个空序列 $A$ 和 $B$</li><li>枚举 $i$ 从 $1$ 到 $n$<ul><li>如果 $S_i=0$，不进行操作</li><li>如果 $S_i=1$，如果 $P_i$ 是偶数，则放到 $A$ 的末尾，否则放到 $B$ 的末尾</li></ul></li><li>如果 $t=0$，$C=\overline{AB}$；否则 $C=\overline{BA}$。</li><li>枚举 $i$ 从 $1$ 到 $n$<ul><li>如果 $S_i=0$，不进行操作</li><li>如果 $S_i=1$，将 $P_i$ 设为 $C$ 的开头元素，删去 $C$ 的开头元素</li></ul></li></ol><p>现给出一个排列 $P$，你需要使用至多 $30$ 次如上操作，使 $P$ 从小到大排序，注意你并不需要最小化操作次数。</p><p>$1\le n\le 15000$。</p></blockquote><a id="more"></a><h2 id="题意补充"><a href="#题意补充" class="headerlink" title="题意补充"></a>题意补充</h2><p>对于 $P=\{0,4,2,3,6,5,1\}$ 上的操作 $(1,\texttt{1101101})$，有示意图如下</p><p><img src="https://i.loli.net/2021/01/21/wtvp71AuR4xklOq.png" alt="zoom:40%|center"></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于 $30=2\left(\left\lfloor\log n\right\rfloor\right)+1$，我们考虑 $t=0$ 和 $t=1$ 的操作交错执行。</p><p>首先可以确定最后一次操作前，每个数的位置，如 $n=13$ 的时候，最后一次操作前的 $p$ 应为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 8 2 10 4 12 6 7 1 9 3 11 5</span><br></pre></td></tr></table></figure><p>故对于每个数，我们求出此时期望的位置 $rk$，也就是说，现在我们要把每个 $p_i$，移动到 $rk_{p_i}$ 的位置上。</p><p>考虑从低位到高位，每次把这一位是 $1$ 的数不改变相对顺序地丢到最后面，$\log$ 次后即可完成排序。</p><p>先进行一次 $(0,\texttt{111\ldots1})$ 操作后，所有偶数都在奇数前面，我们可以认为是两个序列；把偶数中需要放后面的数和奇数中需要放前面的数执行 $t=1$ 操作即可。但 $n$ 时可能两侧的数字个数不同，这时候给偶数序列中多丢一个 $0$ 就好了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">150009</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t,p[N],rk[N];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b,c;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">bool</span>,<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(<span class="keyword">bool</span> t,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">  a.clear(),b.clear();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>)(p[i]&amp;<span class="number">1</span>?b:a).push_back(p[i]);</span><br><span class="line">  <span class="keyword">if</span>(t)swap(a,b);</span><br><span class="line">  c=a,c.insert(c.end(),b.begin(),b.end());</span><br><span class="line">  reverse(c.begin(),c.end());</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>)p[i]=c.back(),c.pop_back();</span><br><span class="line">  ans.push_back(<span class="built_in">make_pair</span>(t,s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> s00=((n+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>)/<span class="number">2</span>,s01=(n+<span class="number">1</span>)/<span class="number">4</span>,s10=s01,s11=n/<span class="number">2</span>-s10;</span><br><span class="line">  assert(s00+s01+s10+s11==n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s00;i++)rk[i&lt;&lt;<span class="number">1</span>]=i&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s10;i++)rk[(i+s00)&lt;&lt;<span class="number">1</span>]=i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s01;i++)rk[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(i+s00)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s11;i++)rk[(i+s10)&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(i+s10)&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i+=<span class="number">2</span>)rk[i]=n<span class="number">-1</span>-rk[i]+(n&amp;<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// for(int i=0;i&lt;n;i++)fprintf(stderr,&quot;%d%c&quot;,rk[i],&quot; \n&quot;[i+1==n]);</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">14</span>;k++)&#123;</span><br><span class="line">    apply(<span class="number">0</span>,<span class="built_in">string</span>(n,<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">    s=<span class="built_in">string</span>(n,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;n;i++)cerr&lt;&lt;p[i]&lt;&lt;&quot; \n&quot;[i+1==n];</span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(p[i]%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;(rk[p[i]]&gt;&gt;k)%<span class="number">2</span>==<span class="number">1</span>)s[i]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(p[i]%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;(rk[p[i]]&gt;&gt;k)%<span class="number">2</span>==<span class="number">1</span>)s[i]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;n;i++)cerr&lt;&lt;rk[p[i]]&lt;&lt;&quot; \n&quot;[i+1==n];</span></span><br><span class="line">    apply(<span class="number">1</span>,s);</span><br><span class="line">  &#125;</span><br><span class="line">  apply(<span class="number">0</span>,<span class="built_in">string</span>(n,<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">  s=<span class="built_in">string</span>(n,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(p[i]!=i)s[i]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  apply(<span class="number">1</span>,s);</span><br><span class="line">  <span class="comment">// for(int i=0;i&lt;n;i++)cerr&lt;&lt;p[i]&lt;&lt;&quot; \n&quot;[i+1==n];</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)assert(p[i]==i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  <span class="comment">// freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">  freopen(<span class="string">&quot;2.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cin</span>&gt;&gt;p[i];</span><br><span class="line">  solve();</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;ans.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:ans)<span class="built_in">cout</span>&lt;&lt;(it.first?<span class="number">1</span>:<span class="number">0</span>)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「集训队作业 2020」Old Problem</title>
      <link href="loj3401/"/>
      <url>loj3401/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给一个长度为 $n$ 的序列 $a_i$，和 $q$ 组询问 $(l,r,x)$，表示求 $\displaystyle\prod_{i=l}^r\left(1-\frac{a_i}{x}\right)$ 的值。实数输出，精度要求 $10^{-6}$。</p><p>$n,q\le6\times10^5,\ 1\leq a_i &lt; x\leq 10^9$。</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>按照 EI 的话说，这是一个误差分析题。</p><p>首先需要注意到这个式子可以泰勒展开：</p><script type="math/tex; mode=display">\begin{aligned} &\exp\left(\ln\left(\prod_{i=l}^r\left(1-\frac{a_i}{x}\right)\right)\right) \\=&\exp\left(\sum_{i=l}^r\ln\left(1-\frac{a_i}{x}\right)\right) \\=&\exp\left(-\sum_{i=l}^r\sum_{k=1}^{L}\frac{a_i^k}{k\cdot x^k}\right) \\\end{aligned}</script><p>然而，如果直接泰勒展开，需要的 $L$ 是数十万级别的，无益于我们解决问题。</p><p>考虑到导致泰勒展开精度损失的主要原因，是因为当 $a_i/x$ 较大时，我们对 $\ln(1-a_i/x)$ 的精度要求很高。然而，$a_i/x$ 较大时，很容易导致答案小于我们要求的精度范围。</p><p>故我们不妨设定一个阈值 $R=0.5$，当 $a_i/x\le R$ 时，考虑线段树维护泰勒展开；否则，当 $a_i/x&gt;R$ 时，优先找出这些位置并暴力计算。当答案小于精度要求时就退出。暴力计算的次数显然不会超过 $\log_2 10^6$ 次。</p><p>这样就得到了一个 $O(n\log^2L)$ 的做法，实践得 $L$ 取 $20$ 左右即可。</p><p>可以通过本题，但时间较大。实际上，线段树的部分可以直接换为前缀和。为什么精度还在接受范围内呢？注意到 $x&gt;a_i$ 对于任意 $x$ 和任意 $i$ 都成立。如果前缀和的部分因为 $a_i$ 太小被省略，他本身对泰勒展开的影响也是被省略的级别。换句话说，对于泰勒展开的值，前缀和能保证的精度范围，恰为 <code>double</code> 本身的精度范围。</p><p>所以，直接将上述做法中的线段树替换为前缀和就能在 $O(n\log nL)$ 的时间复杂度内解决本题。<del>三个 log 年轻人不讲武德。</del></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">6e5</span>+<span class="number">10</span>,K=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,a[N],lg[N],st[<span class="number">20</span>][N];</span><br><span class="line"><span class="keyword">double</span> sum,ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rng</span><span class="params">(<span class="number">20040725</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">better</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;<span class="keyword">return</span> a[i]&lt;a[j]?j:i;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)<span class="keyword">return</span> l;</span><br><span class="line">  <span class="keyword">int</span> k=lg[r-l];</span><br><span class="line">  <span class="keyword">return</span> better(st[k][l],st[k][r-(<span class="number">1</span>&lt;&lt;k)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> l,r,mid;</span><br><span class="line">  <span class="keyword">double</span> s[K];</span><br><span class="line">&#125;p[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  p[u].l=l,p[u].r=r,p[u].mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">    p[u].s[<span class="number">0</span>]=a[l];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;K;i++)p[u].s[i]=p[u].s[i<span class="number">-1</span>]*a[l];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  build(u&lt;&lt;<span class="number">1</span>,l,p[u].mid);</span><br><span class="line">  build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,p[u].mid+<span class="number">1</span>,r);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">    p[u].s[i]=p[u&lt;&lt;<span class="number">1</span>].s[i]+p[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].s[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p[u].l==l&amp;&amp;p[u].r==r)&#123;</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=K<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">      sum=(sum+p[u].s[i]/(i+<span class="number">1</span>))/x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(r&lt;=p[u].mid)<span class="keyword">return</span> query(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">  <span class="keyword">if</span>(l&gt;p[u].mid)<span class="keyword">return</span> query(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">  <span class="keyword">return</span> query(u&lt;&lt;<span class="number">1</span>,l,p[u].mid)+query(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,p[u].mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l&gt;r||ans&lt;eps)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> pos=query(l,r);</span><br><span class="line">  <span class="keyword">if</span>(a[pos]&lt;(x&gt;&gt;<span class="number">1</span>))&#123;</span><br><span class="line">    ans*=<span class="built_in">exp</span>(-query(<span class="number">1</span>,l,r));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ans*=<span class="number">1</span>-a[pos]/(<span class="keyword">double</span>)x;</span><br><span class="line">  <span class="keyword">if</span>(rng()&amp;<span class="number">1</span>)&#123;</span><br><span class="line">    solve(l,pos<span class="number">-1</span>);</span><br><span class="line">    solve(pos+<span class="number">1</span>,r);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    solve(pos+<span class="number">1</span>,r);</span><br><span class="line">    solve(l,pos<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen(&quot;ex_gjx3.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">12</span>);</span><br><span class="line">  lg[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    st[<span class="number">0</span>][i]=better(i,i+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;i)&lt;=n;j++)&#123;</span><br><span class="line">      st[i][j]=better(st[i<span class="number">-1</span>][j],st[i<span class="number">-1</span>][j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))]);</span><br><span class="line">    &#125;</span><br><span class="line">  build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> l,r,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;x;</span><br><span class="line">    ans=<span class="number">1</span>;</span><br><span class="line">    solve(l,r);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>-ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泰勒展开 </tag>
            
            <tag> 误差分析 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「集训队作业2020」春天，在积雪下结一成形，抽枝发芽</title>
      <link href="loj3397/"/>
      <url>loj3397/</url>
      
        <content type="html"><![CDATA[<p>一个长度为 $n$ 的排列是正确的，当且仅当他不存在非平凡的连续子序列，使得他的值也是连续的。 对于 $k\in[1,n]$ 求出，有多少长度为 $k$ 的正确的排列。</p><p>$n\le 10^5$。</p><a id="more"></a><h2 id="题解-Part-1"><a href="#题解-Part-1" class="headerlink" title="题解 Part 1"></a>题解 Part 1</h2><p>定义 $F(x)=\sum_{i\ge 4}f_ix^i,\ G(x)=\sum_{i\ge 2}g_ix^i,\ H(x)=\sum_{i\ge 2}i!x^i$。</p><p>其中 $f_i$ 表示有 $i$ 个叶子节点，根节点为析点且树高为 $2$ 的析合树数量，$g_i$ 表示有 $n$ 个叶子节点，根节点为合点，且孩子排列的相对大小关系是单调上升的析合树个数。注意到 $g_i$ 也同时表示孩子排列相对大小单调下降的析合树个数。</p><p>考虑一个析合树是合法的，其本身节点的限制：</p><ul><li>如果一个点是析点，他的所有儿子都是析点。</li><li>如果一个点是合点，且他的一个儿子也是合点，那么这两个点的单调性一定恰好相反。</li></ul><p>根据这两条我们可以得到关于上述生成函数的若干等式：</p><script type="math/tex; mode=display">\begin{aligned}&G(x)=\sum_{k\ge 2}(H(x)-G(x))^k & (1)\\&F(H(x))=H(x)-2G(x)-x & (2)\\\end{aligned}</script><p>根据 $(1)$ 式我们可以解得 $G(x)=\dfrac{H^2(x)}{H(x)+1}$。</p><p>在 $(2)$ 式中带入 $H(x)$ 的复合逆 $I(x)$，有</p><script type="math/tex; mode=display">\begin{aligned}&F(H(I(x)))=H(I(x))-2G(I(x))-I(x)\\\Rightarrow\ &F(x)=x-\dfrac{2x^2}{x+1}-I(x)\end{aligned}</script><p>$x-\dfrac{2x^2}{x+1}$ 部分对答案的贡献是容易计算的，故我们的瓶颈在于求出 $H(x)$ 的复合逆 $I(x)$。</p><h2 id="题解-Part-2"><a href="#题解-Part-2" class="headerlink" title="题解 Part 2"></a>题解 Part 2</h2><p>现问题转化为，对于某函数 $\displaystyle F(x)=\sum_{i=1}^\infty i!x^i$，计算其复合逆。</p><p>考虑 $F(x)$ 满足如下微分方程（可以通过其递推式得到）</p><script type="math/tex; mode=display">F(x)=F'(x)\cdot x^2+F(x)\cdot x+x</script><p>带入其复合逆 $G(x)$ 得到</p><script type="math/tex; mode=display">\begin{aligned}&x=F'(G(x))\cdot G^2(x)+ x\cdot G(x)+G(x) \\\Rightarrow\ &x=\frac{1}{G'(x)} G^2(x)+ x\cdot G(x)+G(x) \\\Rightarrow\ &G^2(x)-G'(x)\cdot x+(x+1)G(x)G'(x)=0\\\end{aligned}</script><p>考虑其中每一项都等于 $0$，得到递推式：</p><script type="math/tex; mode=display">g_n=\begin{cases}0&(n=0)\\1&(n=1)\\-\sum_{i=1}^{n-1}(i+1)g_ig_{n-i}-\sum_{i=2}^{n-1}ig_ig_{n-i+1}&(n\ge 2)\end{cases}</script><p>可以分治 NTT 或者半在线卷积。</p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>通过观察阶乘的递推公式，我们得到了关于其生成函数的一个一阶常微分方程，并用以解决多项式复合逆问题，从而提供了一种不同于拉格朗日反演的推导方式。</p><p>想起之前做的“简单的普及组计数”，自己在这方面的水平仍需训练加强。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> mem&#123; <span class="comment">//v2.10.1 =&gt; size: 15.80KiB</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM_FASTIO</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> __SIZEOF_INT128__</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM_INT128</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __integer_mapper(func)    \</span></span><br><span class="line">      func(<span class="keyword">int</span>)                     \</span><br><span class="line">      func(<span class="keyword">unsigned</span> <span class="keyword">int</span>)            \</span><br><span class="line">      func(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)           \</span><br><span class="line">      func(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __float_mapper(func)        \</span></span><br><span class="line">      func(<span class="keyword">float</span>)                     \</span><br><span class="line">      func(<span class="keyword">double</span>)                    \</span><br><span class="line">      func(<span class="keyword">long</span> <span class="keyword">double</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">namespace</span> stdval&#123;</span><br><span class="line">    <span class="keyword">using</span> i32=<span class="keyword">int</span>;</span><br><span class="line">    <span class="keyword">using</span> i64=<span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">    <span class="keyword">using</span> u32=<span class="keyword">unsigned</span>;</span><br><span class="line">    <span class="keyword">using</span> u64=<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">    <span class="keyword">using</span> f32=<span class="keyword">float</span>;</span><br><span class="line">    <span class="keyword">using</span> f64=<span class="keyword">double</span>;</span><br><span class="line">    <span class="keyword">using</span> f96=<span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">    <span class="keyword">using</span> i128=<span class="keyword">__int128_t</span>;</span><br><span class="line">    <span class="keyword">using</span> u128=<span class="keyword">__uint128_t</span>;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">namespace</span> utils&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::tie;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::get;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::sort;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::find;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::copy;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::fill;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::unique;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::reverse;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::shuffle;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::function;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">make_pair</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::make_tuple;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::accumulate;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::lower_bound;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::upper_bound;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::max_element;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::min_element;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::next_permutation;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">namespace</span> random&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> LuckyNumber=<span class="number">0726</span>; <span class="comment">// Kanbe Kotori&#x27;s Birthday</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::mt19937 <span class="title">rng</span><span class="params">(LuckyNumber^<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::mt19937_64 <span class="title">rng64</span><span class="params">(LuckyNumber^<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">rand</span><span class="params">(T l,T r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::uniform_int_distribution&lt;T&gt;(l,r)(rng);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">rand64</span><span class="params">(T l,T r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::uniform_int_distribution&lt;T&gt;(l,r)(rng);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">namespace</span> modint&#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="class"><span class="keyword">struct</span> <span class="title">Z</span>&#123;</span></span><br><span class="line">      <span class="keyword">int</span> x;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="title">Z</span><span class="params">()</span></span>&#123;x=<span class="number">0</span>;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="title">Z</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;x=t;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="title">Z</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> t)</span></span>&#123;x=t%mod,x&lt;<span class="number">0</span>&amp;&amp;(x+=mod);&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>-=(Z a)&#123;(x-=a.x)&lt;<span class="number">0</span>&amp;&amp;(x+=mod);&#125;</span><br><span class="line">      <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>+=(Z a)&#123;(x+=a.x)&gt;=mod&amp;&amp;(x-=mod);&#125;</span><br><span class="line">      <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>*=(Z a)&#123;x=(<span class="keyword">long</span> <span class="keyword">long</span>)x*a.x%mod;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>*(Z a,Z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">      <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>-(Z a,Z b)&#123;<span class="keyword">return</span> ((a.x-=b.x)&lt;<span class="number">0</span>&amp;&amp;(a.x+=mod)),a;&#125;</span><br><span class="line">      <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>+(Z a,Z b)&#123;<span class="keyword">return</span> ((a.x+=b.x)&gt;=mod&amp;&amp;(a.x-=mod)),a;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> Z&lt;mod&gt; <span class="title">finv</span><span class="params">(Z&lt;mod&gt; x)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x.x&lt;<span class="number">2</span>)<span class="keyword">return</span> x;</span><br><span class="line">      <span class="keyword">return</span> (mod-mod/x.x)*finv(mod%x.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> Z&lt;mod&gt; <span class="title">fpow</span><span class="params">(Z&lt;mod&gt; a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">      Z&lt;mod&gt; s=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;</span><br><span class="line">      <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_inverse</span><span class="params">(<span class="keyword">int</span> n,Z&lt;mod&gt; *inv)</span></span>&#123;</span><br><span class="line">      inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)inv[i]=(mod-mod/i)*inv[mod%i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_factorial</span><span class="params">(<span class="keyword">int</span> n,Z&lt;mod&gt; *fac,Z&lt;mod&gt; *ifac)</span></span>&#123;</span><br><span class="line">      fac[<span class="number">0</span>]=<span class="number">1</span>,init_inverse(n,ifac);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)fac[i]=fac[i<span class="number">-1</span>]*i,ifac[i]=ifac[i<span class="number">-1</span>]*ifac[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">namespace</span> math&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> stdval;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::max;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">abs</span><span class="params">(T x)</span></span>&#123;<span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">gcd</span><span class="params">(T n,T m)</span></span>&#123;<span class="keyword">return</span> m?gcd(m,n%m):n;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">lcm</span><span class="params">(T n,T m)</span></span>&#123;<span class="keyword">return</span> n/gcd(n,m)*m;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">FastDiv</span>&#123;</span></span><br><span class="line">      u64 t,i;</span><br><span class="line">      inline FastDiv(u64 p):t(u64(-1)/p),i(mul_inv(p))&#123;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(u64 n)</span></span>&#123;<span class="keyword">return</span> n*i&lt;=t;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(i64 n)</span></span>&#123;<span class="keyword">return</span> u64(n&lt;<span class="number">0</span>?-n:n)*i&lt;=t;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> u64 <span class="title">mul_inv</span><span class="params">(u64 n)</span></span>&#123;</span><br><span class="line">        u64 x=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i)x*=<span class="number">2</span>-n*x;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">FastMod</span>&#123;</span></span><br><span class="line">      u64 m,b;</span><br><span class="line">      inline FastMod(u64 b):m(u64((u128(1)&lt;&lt;64)/b)),b(b)&#123;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> u64 <span class="title">reduce</span><span class="params">(u64 a)</span></span>&#123;</span><br><span class="line">        u64 q=(u64)((u128(m)*a)&gt;&gt;<span class="number">64</span>);</span><br><span class="line">        u64 r=a-q*b;</span><br><span class="line">        <span class="keyword">return</span> r&gt;=b?r-b:r;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">namespace</span> container&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::tuple;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">set</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">multiset</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_set</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_multiset</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">map</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">multimap</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_multimap</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">stack</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">priority_queue</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">deque</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">bitset</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::tie;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::get;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">make_pair</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::make_tuple;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">vector</span>:</span><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&#123;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;::<span class="built_in">vector</span>;</span><br><span class="line">      <span class="keyword">using</span> iterator=<span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;::iterator;</span><br><span class="line">      <span class="keyword">using</span> const_iterator=<span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;::const_iterator;</span><br><span class="line">      <span class="built_in">vector</span>():<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;()&#123;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">explicit</span> <span class="title">vector</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; &amp;plain)</span>:<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;<span class="params">(plain)</span></span>&#123;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>&#123;<span class="built_in">std</span>::reverse(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end());&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">unique</span><span class="params">()</span></span>&#123;<span class="keyword">this</span>-&gt;erase(<span class="built_in">std</span>::unique(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end()),<span class="keyword">this</span>-&gt;end());&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">concat</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span> &amp;rhs)</span></span>&#123;<span class="keyword">this</span>-&gt;insert(<span class="keyword">this</span>-&gt;end(),rhs.begin(),rhs.end());&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">includes</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::find(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x)!=<span class="keyword">this</span>-&gt;end();&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class Function&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Function func)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:*<span class="keyword">this</span>)func(it);&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> iterator <span class="title">find</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::find(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> iterator <span class="title">lower_bound</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::lower_bound(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> iterator <span class="title">upper_bound</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::upper_bound(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> const_iterator <span class="title">find</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::find(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> const_iterator <span class="title">lower_bound</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::lower_bound(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> const_iterator <span class="title">upper_bound</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::upper_bound(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x);&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>&#123;<span class="built_in">std</span>::sort(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end());&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class Function&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Function func)</span></span>&#123;<span class="built_in">std</span>::sort(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),func);&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">vector</span> <span class="title">slice</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;<span class="keyword">this</span>-&gt;size())<span class="keyword">return</span> <span class="built_in">vector</span>(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;begin()+r);</span><br><span class="line">        <span class="function"><span class="built_in">vector</span> <span class="title">rsp</span><span class="params">(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;end())</span></span>;</span><br><span class="line">        <span class="keyword">return</span> rsp.resize(r-l),rsp;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">from</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">set</span>&lt;T&gt; &amp;src)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;resize(src.size());</span><br><span class="line">        <span class="keyword">auto</span> it=<span class="keyword">this</span>-&gt;begin();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> T e:src)*it++=e;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>,<span class="keyword">class</span> <span class="title">Function</span>&gt;</span> <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; _map(Function func) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;R&gt; <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;size();i++)</span><br><span class="line">          res[i]=func(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class R&gt; <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; <span class="title">map</span><span class="params">(R func(T))</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_map&lt;R&gt;(func);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class R&gt; <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; <span class="title">map</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::function&lt;R(T)&gt; &amp;func)</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_map&lt;R&gt;(func);&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">string</span>:</span><span class="built_in">std</span>::<span class="built_in">string</span>&#123;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>;</span><br><span class="line">      <span class="built_in">string</span>():<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;&quot;</span>)&#123;&#125;</span><br><span class="line">      <span class="built_in">string</span>(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;plain):<span class="built_in">std</span>::<span class="built_in">string</span>(plain)&#123;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;vet)</span> <span class="keyword">const</span></span>;</span><br><span class="line">            </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">slice</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;<span class="keyword">this</span>-&gt;size())<span class="keyword">return</span> <span class="built_in">string</span>(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;begin()+r);</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">rsp</span><span class="params">(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;end())</span></span>;</span><br><span class="line">        <span class="keyword">return</span> rsp.resize(r-l),rsp;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;dim)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;empty())<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">char</span> *src=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;length()+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(src,<span class="keyword">this</span>-&gt;c_str());</span><br><span class="line">        <span class="keyword">char</span> *tar=<span class="keyword">new</span> <span class="keyword">char</span>[dim.length()+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(tar,dim.c_str());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; rsp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> *pos=strtok(src,tar);pos;pos=strtok(<span class="literal">nullptr</span>,tar))</span><br><span class="line">          rsp.push_back(<span class="built_in">string</span>(pos));</span><br><span class="line">        <span class="keyword">delete</span>[] src;</span><br><span class="line">        <span class="keyword">delete</span>[] tar;</span><br><span class="line">        <span class="keyword">return</span> rsp;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      template&lt;class... Args&gt; static inline string format(const char *fm,Args... args)&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">snprintf</span>(<span class="literal">nullptr</span>,<span class="number">0</span>,fm,args...);</span><br><span class="line">        <span class="keyword">char</span> *buf=<span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">snprintf</span>(buf,len+<span class="number">1</span>,fm,args...);</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(buf)</span></span>;</span><br><span class="line">        <span class="keyword">delete</span>[] buf;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class... Args&gt; static inline string format(const string &amp;fm,Args... args)&#123;</span><br><span class="line">        <span class="keyword">return</span> format(fm.c_str(),args...);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __to_string(T)                   \</span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123; \</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::to_string(x);          \</span><br><span class="line">      &#125;</span><br><span class="line">    __float_mapper(__to_string)</span><br><span class="line">    __integer_mapper(__to_string)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __to_string</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>&#123;<span class="keyword">return</span> s;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> modint::Z&lt;mod&gt; &amp;v)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::to_string(v.x);&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;ctn)</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;[&quot;</span>+<span class="built_in">string</span>(<span class="string">&quot;,&quot;</span>).join(ctn)+<span class="string">&quot;]&quot;</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">set</span>&lt;T&gt; &amp;ctn)</span></span>&#123;</span><br><span class="line">      <span class="built_in">string</span> result=<span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">      <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:ctn)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)result+=<span class="string">&quot;,&quot;</span>;</span><br><span class="line">        flag=<span class="literal">true</span>;</span><br><span class="line">        result+=to_string(it);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T1,class T2&gt; inline string to_string(const map&lt;T1,T2&gt; &amp;ctn)&#123;</span><br><span class="line">      <span class="built_in">string</span> result=<span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">      <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:ctn)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)result+=<span class="string">&quot;,&quot;</span>;</span><br><span class="line">        flag=<span class="literal">true</span>;</span><br><span class="line">        result+=to_string(it.first)+<span class="string">&quot;:&quot;</span>+to_string(it.second);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">string::join</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;vet)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!vet.size())<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="built_in">string</span> res=to_string(vet[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">1</span>;i&lt;vet.size();i++)&#123;</span><br><span class="line">        res+=*<span class="keyword">this</span>;</span><br><span class="line">        res+=to_string(vet[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">const</span> <span class="keyword">char</span> *s)&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">const</span> <span class="keyword">char</span> *s,<span class="keyword">size_t</span> len)&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s,len);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">long</span> <span class="keyword">double</span> x)&#123;<span class="keyword">return</span> to_string(x);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x)&#123;<span class="keyword">return</span> to_string(x);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">namespace</span> io&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_FASTIO</span></span><br><span class="line">    <span class="keyword">namespace</span> fastio&#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> BUFFER=<span class="number">1</span>&lt;&lt;<span class="number">18</span>;</span><br><span class="line">      <span class="keyword">char</span> ibuf[BUFFER],*iS,*iT;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(iS==iT)&#123;</span><br><span class="line">          iT=(iS=ibuf)+fread(ibuf,<span class="number">1</span>,BUFFER,<span class="built_in">stdin</span>);</span><br><span class="line">          <span class="keyword">return</span> iS==iT?EOF:*iS++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> *iS++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">char</span> obuf[BUFFER],*oS=obuf,*oT=oS+BUFFER<span class="number">-1</span>;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fwrite(obuf,<span class="number">1</span>,oS-obuf,<span class="built_in">stdout</span>);</span><br><span class="line">        oS=obuf;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        *oS++=x;</span><br><span class="line">        <span class="keyword">if</span>(oS==oT)flush();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">Flusher</span>&#123;</span>~Flusher()&#123;flush();&#125;&#125;flusher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> fastio::getc;</span><br><span class="line">    <span class="keyword">using</span> fastio::putc;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;fastio::flush(),fflush(<span class="built_in">stdout</span>);&#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> getchar();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;fflush(<span class="built_in">stdout</span>);&#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read_digit</span><span class="params">(T &amp;x)</span></span>&#123;x=getc(); <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x))x=getc();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read_alpha</span><span class="params">(T &amp;x)</span></span>&#123;x=getc(); <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(x))x=getc();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read_lower</span><span class="params">(T &amp;x)</span></span>&#123;x=getc(); <span class="keyword">while</span>(!<span class="built_in">islower</span>(x))x=getc();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read_upper</span><span class="params">(T &amp;x)</span></span>&#123;x=getc(); <span class="keyword">while</span>(!<span class="built_in">isupper</span>(x))x=getc();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read_digit</span><span class="params">()</span></span>&#123;<span class="keyword">int</span> x; read_digit(x); <span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read_alpha</span><span class="params">()</span></span>&#123;<span class="keyword">int</span> x; read_alpha(x); <span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read_lower</span><span class="params">()</span></span>&#123;<span class="keyword">int</span> x; read_lower(x); <span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read_upper</span><span class="params">()</span></span>&#123;<span class="keyword">int</span> x; read_upper(x); <span class="keyword">return</span> x;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __read(T)                             \</span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;                  \</span><br><span class="line">        x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> c=getc();           \</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getc();   \</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getc(); \</span><br><span class="line">        <span class="keyword">if</span>(f)x=-x;                              \</span><br><span class="line">      &#125;</span><br><span class="line">    __integer_mapper(__read)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">      __read(<span class="keyword">__int128_t</span>)</span><br><span class="line">      __read(<span class="keyword">__uint128_t</span>)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __read</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> &amp;x)</span></span>&#123;x=getc();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">      <span class="keyword">char</span> c=getc();</span><br><span class="line">      <span class="keyword">while</span>(~c&amp;&amp;!<span class="built_in">isspace</span>(c))*s++=c,c=getc();</span><br><span class="line">      *s++=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(container::<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">      <span class="keyword">char</span> c=getc();</span><br><span class="line">      s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">while</span>(~c&amp;&amp;!<span class="built_in">isspace</span>(c))s+=c,c=getc();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">const</span> modint::Z&lt;mod&gt; &amp;x)</span></span>&#123;read(x.x);&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T</span>=<span class="keyword">int</span>&gt; <span class="function"><span class="keyword">inline</span> T <span class="title">read</span><span class="params">()</span></span>&#123;T x; read(x); <span class="keyword">return</span> x;&#125;</span><br><span class="line">    template&lt;class T,class... Args&gt; inline void read(T &amp;x,Args &amp;... args)&#123;</span><br><span class="line">      read(x),read(args...);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __print(T)           \</span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;  \</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)putc(<span class="string">&#x27;-&#x27;</span>),x=-x; \</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);    \</span><br><span class="line">        putc(<span class="string">&#x27;0&#x27;</span>+x%<span class="number">10</span>);        \</span><br><span class="line">      &#125;</span><br><span class="line">    __integer_mapper(__print)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">      __print(<span class="keyword">__int128_t</span>)</span><br><span class="line">      __print(<span class="keyword">__uint128_t</span>)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __print</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;putc(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">      <span class="keyword">size_t</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;len;i++)putc(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> container::<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;s.length();i++)putc(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> modint::Z&lt;mod&gt; &amp;x)</span></span>&#123;print(x.x);&#125;</span><br><span class="line">    </span><br><span class="line">    template&lt;class T,class... Args&gt; inline void print(const T &amp;x,Args... args)&#123;</span><br><span class="line">      print(x),print(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class... Args&gt; inline void println(Args... args)&#123;</span><br><span class="line">      print(args...),putc(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    template&lt;class... Args&gt; inline void printfm(const char *formatter,Args... arguments)&#123;</span><br><span class="line">      print(container::<span class="built_in">string</span>().format(formatter,arguments...));</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class... Args&gt; inline void printfm(const container::string &amp;formatter,Args... arguments)&#123;</span><br><span class="line">      print(container::<span class="built_in">string</span>().format(formatter,arguments...));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">namespace</span> logger&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ConsoleColor</span>&#123;</span></span><br><span class="line">      NOPE=<span class="number">-1</span>,BLACK,RED,GREEN,YELLOW,BLUE,PURPLE,DEEPBLUE</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> ConsoleColor color</span>=NOPE,class... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *formatter,Args... args)</span></span>&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">      <span class="keyword">if</span>(~color)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[%dm&quot;</span>,<span class="number">30</span>+color);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> ConsoleColor color</span>=NOPE,class... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">logln</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *formatter,Args... args)</span></span>&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">      <span class="keyword">if</span>(~color)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[%dm&quot;</span>,<span class="number">30</span>+color);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[0m\n&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">logs</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,container::to_string(x).c_str());</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T,class... Args&gt; inline void logs(const T &amp;x,Args... args)&#123;</span><br><span class="line">      logs(x),logs(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class... Args&gt; inline void logsln(Args... args)&#123;</span><br><span class="line">      logs(args...);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">namespace</span> fileio&#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">file_input</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *dir)</span></span>&#123;freopen(dir,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">file_output</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *dir)</span></span>&#123;freopen(dir,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">file_input</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;dir)</span></span>&#123;file_input(dir.c_str());&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">file_output</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;dir)</span></span>&#123;file_output(dir.c_str());&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">file_input</span><span class="params">(<span class="keyword">const</span> container::<span class="built_in">string</span> &amp;dir)</span></span>&#123;file_input(dir.c_str());&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">file_output</span><span class="params">(<span class="keyword">const</span> container::<span class="built_in">string</span> &amp;dir)</span></span>&#123;file_output(dir.c_str());&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">file_io</span><span class="params">(<span class="keyword">const</span> T name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">namespace</span> container;</span><br><span class="line">      file_input(name+<span class="string">&quot;.in&quot;</span>_s);</span><br><span class="line">      file_output(name+<span class="string">&quot;.out&quot;</span>_s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fast_cpp_io</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __integer_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __float_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __string_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __string_join_mapper</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> io;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> math;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> utils;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> modint;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> random;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> stdval;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> fileio;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> logger;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> container;</span><br><span class="line">&#125; <span class="comment">// namespace mem</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1</span>&lt;&lt;<span class="number">19</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> polynomial&#123;</span><br><span class="line">  <span class="keyword">namespace</span> full&#123;</span><br><span class="line">    <span class="keyword">using</span> u32=<span class="keyword">unsigned</span>;</span><br><span class="line">    <span class="keyword">using</span> u64=<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">    <span class="keyword">using</span> z=mem::modint::Z&lt;mod&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> u32 mod=::mod;</span><br><span class="line">    z fac[N],ifac[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> z <span class="title">fpow</span><span class="params">(z a,<span class="keyword">int</span> b)</span></span>&#123;z s=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;<span class="keyword">return</span> s;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">poly</span>:</span>mem::container::<span class="built_in">vector</span>&lt;z&gt;&#123;</span><br><span class="line">      <span class="keyword">using</span> mem::container::<span class="built_in">vector</span>&lt;z&gt;::<span class="built_in">vector</span>;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;size();i++)&#123;</span><br><span class="line">          mem::io::read(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i).x);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;size();i++)&#123;</span><br><span class="line">          mem::io::print(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i).x);</span><br><span class="line">          <span class="keyword">if</span>(i+<span class="number">1</span>!=<span class="keyword">this</span>-&gt;size())mem::io::putc(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mem::io::putc(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> SimpleNTT&#123;</span><br><span class="line">      u32 lim,shift,rev[N],w[N];</span><br><span class="line">      u64 a[N];</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">dft_base_init</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> wn,len=<span class="number">1</span>;len&lt;N;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">          wn=fpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>)).x,w[len]=<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)w[i+len]=((u64)w[i+len<span class="number">-1</span>]*wn)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">dft_init</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        lim=<span class="number">1</span>,shift=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(lim&lt;len)lim&lt;&lt;=<span class="number">1</span>,++shift;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(shift<span class="number">-1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(u32 *f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[rev[i]]=f[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;lim;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i+=(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">              u64 x=a[i+j],y=a[i+j+len]*w[j+len]%mod;</span><br><span class="line">              a[i+j]=x+y,a[i+j+len]=x+mod-y;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span>(len==<span class="number">131072</span>)<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)f[i]=(u32)(a[i]%mod);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">idft</span><span class="params">(u32 *f)</span></span>&#123;</span><br><span class="line">        dft(f);</span><br><span class="line">        <span class="built_in">std</span>::reverse(f+<span class="number">1</span>,f+lim);</span><br><span class="line">        u32 inv_lim=fpow((<span class="keyword">int</span>)lim,mod<span class="number">-2</span>).x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)f[i]=(u64)f[i]*inv_lim%mod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> FastNTT&#123; <span class="comment">// source: skip2004, https://uoj.ac/submission/415571</span></span><br><span class="line">      <span class="keyword">const</span> u32 mod2=mod&lt;&lt;<span class="number">1</span>;</span><br><span class="line">      u32 lim,shift;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">multi_integer</span>&#123;</span></span><br><span class="line">        u32 val,ival;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">multi_integer</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">explicit</span> <span class="title">multi_integer</span><span class="params">(u32 v)</span></span>&#123;val=v,ival=((u64)v&lt;&lt;<span class="number">32</span>)/mod;&#125;</span><br><span class="line">        <span class="keyword">inline</span> u32 <span class="keyword">operator</span>*(u32 x)<span class="keyword">const</span>&#123;<span class="keyword">return</span> val*x-u32((u64)x*ival&gt;&gt;<span class="number">32</span>)*mod;&#125;</span><br><span class="line">      &#125;wn[N|<span class="number">1</span>],iwn[N|<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> u32 <span class="title">get</span><span class="params">(u32 x)</span></span>&#123;<span class="keyword">return</span> ((u64)x&lt;&lt;<span class="number">32</span>)/mod;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> u32 <span class="title">norm1</span><span class="params">(u32 x)</span></span>&#123;<span class="keyword">return</span> x&gt;=mod?x-mod:x;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> u32 <span class="title">norm2</span><span class="params">(u32 x)</span></span>&#123;<span class="keyword">return</span> x&gt;=mod2?x-mod2:x;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> u32 <span class="title">pow</span><span class="params">(u32 a,u32 b,u32 ans=<span class="number">1</span>)</span></span>&#123;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=(u64)a*a%mod)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=(u64)ans*a%mod;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> u32 <span class="title">multi</span><span class="params">(u32 w,u32 idx)</span></span>&#123;<span class="keyword">return</span> wn[idx]*w;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> u32 <span class="title">div_lim</span><span class="params">(u32 x)</span></span>&#123;<span class="keyword">return</span> (x+(u64)(-x&amp;lim<span class="number">-1</span>)*mod)&gt;&gt;shift;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fold</span><span class="params">(u32 *a)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)<span class="keyword">if</span>(a[i]&gt;=mod)a[i]-=mod;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dft_base_init</span><span class="params">(u32 len)</span></span>&#123;</span><br><span class="line">        u32 N=<span class="number">1</span>; <span class="keyword">for</span>(;N&lt;len;)N&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">const</span> u32 mid=N&gt;&gt;<span class="number">1</span>,w=<span class="built_in">pow</span>(<span class="number">3</span>,mod/N),iw=<span class="built_in">pow</span>((mod+<span class="number">1</span>)/<span class="number">3</span>,mod/N);</span><br><span class="line">        wn[mid]=iwn[mid]=multi_integer(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(u32 i=<span class="number">1</span>;i&lt;mid;++i)&#123;</span><br><span class="line">          wn[mid+i]=multi_integer((u64)wn[mid+i<span class="number">-1</span>].val*w%mod);</span><br><span class="line">          iwn[mid+i]=multi_integer((u64)iwn[mid+i<span class="number">-1</span>].val*iw%mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(u32 i=mid<span class="number">-1</span>;(<span class="keyword">int</span>)i&gt;=<span class="number">0</span>;--i)wn[i]=wn[i&lt;&lt;<span class="number">1</span>],iwn[i]=iwn[i&lt;&lt;<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dft_init</span><span class="params">(u32 len)</span></span>&#123;lim=<span class="number">1</span>,shift=<span class="number">0</span>;<span class="keyword">for</span>(;lim&lt;len;)lim&lt;&lt;=<span class="number">1</span>,++shift;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dft</span><span class="params">(u32 *a)</span></span>&#123;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">define</span> trans(a,b,idx) &#123; \</span></span><br><span class="line">          <span class="keyword">const</span> u32 A=norm2(a+b); \</span><br><span class="line">          b=wn[idx]*(a+mod2-b),a=A; \</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">define</span> trans2(a,b) &#123; \</span></span><br><span class="line">          <span class="keyword">const</span> u32 A=norm2(a+b); \</span><br><span class="line">          b=norm2(a+mod2-b),a=A; \</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(lim==<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(lim==<span class="number">2</span>)&#123;trans(a[<span class="number">0</span>],a[<span class="number">1</span>],<span class="number">1</span>);<span class="keyword">return</span> fold(a);&#125;</span><br><span class="line">        <span class="keyword">if</span>(lim==<span class="number">4</span>)&#123;trans2(a[<span class="number">0</span>],a[<span class="number">2</span>])trans(a[<span class="number">1</span>],a[<span class="number">3</span>],<span class="number">3</span>)trans(a[<span class="number">0</span>],a[<span class="number">1</span>],<span class="number">1</span>)trans(a[<span class="number">2</span>],a[<span class="number">3</span>],<span class="number">1</span>);<span class="keyword">return</span> fold(a);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> mid=lim&gt;&gt;<span class="number">1</span>;mid&gt;<span class="number">2</span>;mid&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j+=mid+mid)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k+=<span class="number">4</span>)&#123;</span><br><span class="line">              trans(a[j+k+<span class="number">0</span>],a[mid+j+k+<span class="number">0</span>],mid+k+<span class="number">0</span>);</span><br><span class="line">              trans(a[j+k+<span class="number">1</span>],a[mid+j+k+<span class="number">1</span>],mid+k+<span class="number">1</span>);</span><br><span class="line">              trans(a[j+k+<span class="number">2</span>],a[mid+j+k+<span class="number">2</span>],mid+k+<span class="number">2</span>);</span><br><span class="line">              trans(a[j+k+<span class="number">3</span>],a[mid+j+k+<span class="number">3</span>],mid+k+<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j+=<span class="number">8</span>)&#123;</span><br><span class="line">          trans2(a[j+<span class="number">0</span>],a[j+<span class="number">2</span>])trans(a[j+<span class="number">1</span>],a[j+<span class="number">3</span>],<span class="number">3</span>);</span><br><span class="line">          trans2(a[j+<span class="number">4</span>],a[j+<span class="number">6</span>])trans(a[j+<span class="number">5</span>],a[j+<span class="number">7</span>],<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j+=<span class="number">8</span>)&#123;</span><br><span class="line">          trans2(a[j+<span class="number">0</span>],a[j+<span class="number">1</span>])trans2(a[j+<span class="number">2</span>],a[j+<span class="number">3</span>]);</span><br><span class="line">          trans2(a[j+<span class="number">4</span>],a[j+<span class="number">5</span>])trans2(a[j+<span class="number">6</span>],a[j+<span class="number">7</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)<span class="keyword">if</span>(a[i]&gt;=mod)a[i]-=mod;</span><br><span class="line">        fold(a);</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">undef</span> trans</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">undef</span> trans2</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">idft</span><span class="params">(u32 *a)</span></span>&#123;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">define</span> trans(a,b,idx) &#123; \</span></span><br><span class="line">          u32 _a=a,_b=b,A=norm2(_a),B=iwn[idx]*_b; \</span><br><span class="line">          a=A+B,b=A+mod2-B; \</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">define</span> trans2(a,b) &#123; \</span></span><br><span class="line">          <span class="keyword">const</span> u32 A=norm2(a),B=norm2(b); \</span><br><span class="line">          a=A+B,b=A+mod2-B; \</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(lim==<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(lim==<span class="number">2</span>)&#123;</span><br><span class="line">          <span class="keyword">const</span> u32 A=a[<span class="number">0</span>],B=a[<span class="number">1</span>];</span><br><span class="line">          a[<span class="number">0</span>]=div_lim(A+B),a[<span class="number">1</span>]=div_lim(A+mod2-B);</span><br><span class="line">          <span class="keyword">return</span> fold(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(lim==<span class="number">4</span>)&#123;</span><br><span class="line">          trans(a[<span class="number">0</span>],a[<span class="number">1</span>],<span class="number">1</span>)trans(a[<span class="number">2</span>],a[<span class="number">3</span>],<span class="number">1</span>)trans2(a[<span class="number">0</span>],a[<span class="number">2</span>])trans(a[<span class="number">1</span>],a[<span class="number">3</span>],<span class="number">3</span>);</span><br><span class="line">          a[<span class="number">0</span>]=div_lim(a[<span class="number">0</span>]),a[<span class="number">1</span>]=div_lim(a[<span class="number">1</span>]),a[<span class="number">2</span>]=div_lim(a[<span class="number">2</span>]),a[<span class="number">3</span>]=div_lim(a[<span class="number">3</span>]);</span><br><span class="line">          <span class="keyword">return</span> fold(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j+=<span class="number">8</span>)&#123;</span><br><span class="line">          trans2(a[j+<span class="number">0</span>],a[j+<span class="number">1</span>])trans2(a[j+<span class="number">2</span>],a[j+<span class="number">3</span>]);</span><br><span class="line">          trans2(a[j+<span class="number">4</span>],a[j+<span class="number">5</span>])trans2(a[j+<span class="number">6</span>],a[j+<span class="number">7</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j+=<span class="number">8</span>)&#123;</span><br><span class="line">          trans2(a[j+<span class="number">0</span>],a[j+<span class="number">2</span>])trans(a[j+<span class="number">1</span>],a[j+<span class="number">3</span>],<span class="number">3</span>);</span><br><span class="line">          trans2(a[j+<span class="number">4</span>],a[j+<span class="number">6</span>])trans(a[j+<span class="number">5</span>],a[j+<span class="number">7</span>],<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">4</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j+=mid+mid)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k+=<span class="number">4</span>)&#123;</span><br><span class="line">              trans(a[j+k+<span class="number">0</span>],a[mid+j+k+<span class="number">0</span>],mid+k+<span class="number">0</span>);</span><br><span class="line">              trans(a[j+k+<span class="number">1</span>],a[mid+j+k+<span class="number">1</span>],mid+k+<span class="number">1</span>);</span><br><span class="line">              trans(a[j+k+<span class="number">2</span>],a[mid+j+k+<span class="number">2</span>],mid+k+<span class="number">2</span>);</span><br><span class="line">              trans(a[j+k+<span class="number">3</span>],a[mid+j+k+<span class="number">3</span>],mid+k+<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;++i)a[i]=div_lim(a[i]);</span><br><span class="line">        fold(a);</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">undef</span> trans</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">undef</span> trans2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> FastNTT;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dft</span><span class="params">(z *a)</span></span>&#123;dft((u32*)a);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">idft</span><span class="params">(z *a)</span></span>&#123;idft((u32*)a);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dft</span><span class="params">(poly &amp;a)</span></span>&#123;a.resize(lim),dft((u32*)&amp;a[<span class="number">0</span>]);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">idft</span><span class="params">(poly &amp;a)</span></span>&#123;a.resize(lim),idft((u32*)&amp;a[<span class="number">0</span>]);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> poly <span class="title">mul</span><span class="params">(poly a,poly b,<span class="keyword">int</span> len=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!~len)len=(<span class="keyword">int</span>)a.size()+(<span class="keyword">int</span>)b.size()<span class="number">-1</span>;</span><br><span class="line">      dft_init((<span class="keyword">int</span>)a.size()+(<span class="keyword">int</span>)b.size()<span class="number">-1</span>);</span><br><span class="line">      dft(a),dft(b);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]*=b[i];</span><br><span class="line">      idft(a);</span><br><span class="line">      <span class="keyword">return</span> a.resize(len),a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> poly <span class="keyword">operator</span>+(poly a,<span class="keyword">const</span> poly &amp;b)&#123;</span><br><span class="line">      <span class="keyword">if</span>(b.size()&gt;a.size())a.resize(b.size());</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]+=b[i];</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> poly <span class="keyword">operator</span>-(poly a,<span class="keyword">const</span> poly &amp;b)&#123;</span><br><span class="line">      <span class="keyword">if</span>(b.size()&gt;a.size())a.resize(b.size());</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]-=b[i];</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> poly <span class="keyword">operator</span>*(<span class="keyword">const</span> poly &amp;a,<span class="keyword">const</span> poly &amp;b)&#123;</span><br><span class="line">      <span class="keyword">return</span> mul(a,b,(<span class="keyword">int</span>)a.size()+(<span class="keyword">int</span>)b.size()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PolynomialInit</span>&#123;</span>PolynomialInit()&#123;dft_base_init(N);&#125;&#125;_polynomial_initer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">using</span> full::z;</span><br><span class="line">  <span class="keyword">using</span> full::poly;</span><br><span class="line">  <span class="keyword">using</span> full::dft_init;</span><br><span class="line">  <span class="keyword">using</span> full::dft;</span><br><span class="line">  <span class="keyword">using</span> full::idft;</span><br><span class="line">  <span class="keyword">using</span> full::mul;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> polynomial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> type,n;</span><br><span class="line">z a[N],b[N],c[N],d[N],e[N],f[N],g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l+<span class="number">1</span>==r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==<span class="number">1</span>)g[l]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//for(int j=1;j&lt;=l-1;j++)g[l]-=(j+1)*g[j]*g[l-j];</span></span><br><span class="line"><span class="comment">//for(int j=2;j&lt;=l-1;j++)g[l]-=j*g[j]*g[l-j+1];</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>,n=(r-l)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  solve(l,m);</span><br><span class="line">  <span class="keyword">using</span> polynomial::full::lim;</span><br><span class="line">  <span class="keyword">if</span>(l==<span class="number">0</span>)&#123;</span><br><span class="line">    dft_init((n&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)b[i]=g[i]*i;</span><br><span class="line">    <span class="built_in">memset</span>(b+n,<span class="number">0</span>,(lim-n)&lt;&lt;<span class="number">2</span>),dft(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)c[i]=g[i];</span><br><span class="line">    <span class="built_in">memset</span>(c+n,<span class="number">0</span>,(lim-n)&lt;&lt;<span class="number">2</span>),dft(c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=b[i]+c[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]*=c[i],b[i]*=c[i];</span><br><span class="line">    idft(a);</span><br><span class="line">    idft(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)g[m+i]-=a[n+i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)g[m+i]-=b[n+i+<span class="number">1</span>];</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    dft_init(n*<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)b[i]=g[i+l]*(i+l);</span><br><span class="line">    <span class="built_in">memset</span>(b+n,<span class="number">0</span>,(lim-n)&lt;&lt;<span class="number">2</span>),dft(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)c[i]=g[i+l];</span><br><span class="line">    <span class="built_in">memset</span>(c+n,<span class="number">0</span>,(lim-n)&lt;&lt;<span class="number">2</span>),dft(c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=b[i]+c[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>);i++)e[i]=g[i]*i;</span><br><span class="line">    <span class="built_in">memset</span>(e+(n&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>,<span class="number">0</span>,(lim-(n&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>)&lt;&lt;<span class="number">2</span>),dft(e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>);i++)f[i]=g[i];</span><br><span class="line">    <span class="built_in">memset</span>(f+(n&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>,<span class="number">0</span>,(lim-(n&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>)&lt;&lt;<span class="number">2</span>),dft(f);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)d[i]=e[i]+f[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]*=f[i],b[i]*=f[i];</span><br><span class="line">    idft(a);</span><br><span class="line">    idft(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)d[i]*=c[i],e[i]*=c[i];</span><br><span class="line">    idft(d);</span><br><span class="line">    idft(e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)g[m+i]-=a[n+i]+d[n+i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)g[m+i]-=b[n+i+<span class="number">1</span>]+e[n+i+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>((n&lt;&lt;<span class="number">1</span>)==l)g[(l&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>]+=g[l]*g[l]*l;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//log(&quot;solve(%d,%d)=&gt;%d\n&quot;,l,r,g[5].x);</span></span><br><span class="line">  solve(m,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  read(type,n);</span><br><span class="line">  <span class="keyword">int</span> lim=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(lim&lt;=n)lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">  solve(<span class="number">0</span>,lim);</span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=n;i++)println(g[i]);</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)f[i]=(i&amp;<span class="number">1</span>?<span class="number">2</span>:mod<span class="number">-2</span>)-g[i];</span><br><span class="line">  f[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(type||i==n)println(f[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拉格朗日反演 </tag>
            
            <tag> 多项式复合逆 </tag>
            
            <tag> ODE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「校内模拟20200810B」分身</title>
      <link href="contest-20200810-b/"/>
      <url>contest-20200810-b/</url>
      
        <content type="html"><![CDATA[<p>有 $n$ 个人要从 $(0,a_i)$ 走到 $(i,0)$，你需要规划他们的路径使得两两不交。问方案数。</p><p>$a_i &lt; a_{i+1},\ n \leq 5 \times 10^5,\ a_i \leq 10^6$。</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>需要统计 DAG 上的不交路径问题，我们考虑 LGV 引理。由于这是网格图，所有路径起点和终点的位置关系是确定的，即我们可以直接确定右式的    系数。</p><blockquote><p>LGV 引理：</p><script type="math/tex; mode=display">M = \begin{bmatrix}e(A_1,B_1)&e(A_1,B_2)&\cdots&e(A_1,B_n)\\e(A_2,B_1)&e(A_2,B_2)&\cdots&e(A_2,B_n)\\\vdots&\vdots&\ddots&\vdots\\e(A_n,B_1)&e(A_n,B_2)&\cdots&e(A_n,B_n)\end{bmatrix}</script><script type="math/tex; mode=display">\det(M)=\sum\limits_{S:A\rightarrow B}(-1)^{N(\sigma(S))}\prod\limits_{i=1}^n \omega(S_i)</script></blockquote><p>对于这个问题 $M_{i,j}$ 可以表示为</p><script type="math/tex; mode=display">M_{i,j}=\binom{a_i+j}{j}=\frac{(a_i+1)^{\overline{j}}}{j!}</script><p>现在的问题在于求 $M$ 的行列式，把每一列里的 $\dfrac{1}{j!}$ 提出来。</p><p>考虑每一行都是同一个多项式（$(x+1)^{\overline{j}}$），不妨消成 $(x+1)^j$。</p><p>这样问题就变为了对于矩阵：</p><script type="math/tex; mode=display">M' = \begin{bmatrix}(a_1+1)&(a_1+1)^2&\cdots&(a_1+1)^n\\(a_2+1)&(a_2+1)^2&\cdots&(a_2+1)^n\\\vdots&\vdots&\ddots&\vdots\\(a_n+1)&(a_n+1)^n&\cdots&(a_n+1)^n\end{bmatrix}</script><p>这是范德蒙德矩阵，行列式为：</p><script type="math/tex; mode=display">\det(M') = \prod_{1\leq i< j\leq n}((a_j+1)-(a_i+1))         = \prod_{1\leq i< j\leq n}(a_j-a_i)</script><p>做一次 $2^{21}$ 长度的卷积即可计算。</p>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LGV 引理 </tag>
            
            <tag> 范德蒙德矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「校内模拟20201118C」张士超你到底把我家钥匙放在哪了？</title>
      <link href="contest-20201118-c/"/>
      <url>contest-20201118-c/</url>
      
        <content type="html"><![CDATA[<p>有 $m$ 个随机数生成器，每一个生成器会在 $[0,a_i] \cap \mathbb N^*$ 中均匀随机得到 $x_i$，再会有 $p_i$ 的概率令 $y_i=1$，否则 $y_i=0$ 。另外会有一个常数 $d$，保证 $d|(a_i+1)$。</p><p>考虑 $s_0=\sum_{i=1}^n x_iy_i,\ s_1 = \sum_{i=1}^n x_i$，对于一种局面，若 $s_1 =n$，则称其是合法的；对于一种合法的局面，若 $s_0 \geq l$，则称其是好的。求得到好的情况的概率。</p><p>对 $998244353$ 取模，且你只需要输出答案乘合法方案数的结果。</p><p>$1 \leq m \leq 100,\ 1 \leq l \leq n \leq \sum a_i,\ 1 \leq n ,a_i \leq 10^9,\ 1 \leq d \leq 10^7$，保证 $n \leq 100d$。</p><a id="more"></a><h2 id="题解（个人做法）"><a href="#题解（个人做法）" class="headerlink" title="题解（个人做法）"></a>题解（个人做法）</h2><p>考虑 $x_i = b_id + c_i$，我们通过 DP 统计 $db_i$ 的贡献，这样就把问题转换为了所有 $a_i = d-1$ 的情况，且我们已经知道其中 $k$ 个位置 $y_i=1$，其余 $m-k$ 个位置 $y_i=0$，且可以得到新的限制下的 $l$ 和 $n$。</p><p>考虑生成函数来统计合法但不好的方案数：</p><script type="math/tex; mode=display">\sum_{i=0}^{t} [x^iy^n] \left(\sum_{i=0}^\infty (xy)^i \right)^k \left( \sum_{i=0}^\infty y^i \right)^{m-k}</script><p>推导一下生成函数</p><script type="math/tex; mode=display">[x^ty^n] \frac {(1-y^d)^{m-k} (1-(xy)^d)^{k}} {(1-x) (1-y)^{m-k} (1-xy)^k}</script><p>将上半部分用二项式定理展开，并 $O(m^2)$ 的复杂度暴力枚举：</p><script type="math/tex; mode=display">\sum_{i=0}^{m-k}\binom{m-k}{i}(-1)^i\sum_{j=0}^k\binom{k}{j}(-1)^j[x^{t-dj}y^{n-di-dj}] \left({(1-x) (1-y)^{m-k} (1-xy)^k}\right)^{-1}</script><p>即我们需要快速计算形如</p><script type="math/tex; mode=display">[x^ay^b] \left({(1-x) (1-y)^{m-k} (1-xy)^k}\right)^{-1}</script><p>的表达式的值。</p><p>转换为格路问题，枚举 $(1-x)$ 的贡献，可以得到</p><script type="math/tex; mode=display">\sum_{i=0}^a \binom{a\!-\!i+k\!-\!1}{k\!-\!1} \binom{b\!-\!a\!+\!i+m\!-\!k\!-\!1}{m\!-\!k\!-\!1}</script><p>注意到这是一个关于 $a$ 的多项式，我们可以暴力插值解决。</p>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数 </tag>
            
            <tag> DP </tag>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新志</title>
      <link href="about-new-blog/"/>
      <url>about-new-blog/</url>
      
        <content type="html"><![CDATA[<blockquote><p> memset0’s Notebook β ver.</p></blockquote><a id="more"></a><p><br></p><p>经过了一段时间的打理，决定重新建一个博客啦。原来的博客移到 <a href="https://notebook.memset0.cn">notebook.memset0.cn</a>。</p><p>我只保留了原博文的很少一部分，并为他们分别挑选了一张封面图。</p><p>现在的博客已经更像是一个“博客”，而非一个笔记本，或者说是“垃圾桶”。</p><p>同时，新博客带来了很多实验性的设定：中文字体的 webfont、加载页面的 tips 等等很少会在常规博客里见到的东西…</p><!--很多人其实并不喜欢这样的博客：信息密度低、加载速度慢。仿佛把网站打点成一个“华而不实”的艺术品。但毕竟在这难得属于我的一亩三分地，最重要的还是让他成为自己喜欢的样子。我希望别人看到我心中的博客是什么样的，而非一个正常的 OI 向博客是什么样的。更希望这样的博客，你也能喜欢 ：）--><p><br></p><p>当初决定写博客貌似也是一时跟风，沉静下来发现能写的内容真的不多。</p><p>很多 OI 题目，往往有现成的优质题解，而我们写的，大部分无非是各处摘抄借鉴；这样的内容，至多是为了自己复习，并不大会引起别人的兴趣，也带不来什么帮助。</p><p>故这个博客的方向仍不确定，可能会继续更新 OI 内容，也可能随便写点杂谈，看之后的心情了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Userscript × Webpack</title>
      <link href="build-userscript-via-webpack/"/>
      <url>build-userscript-via-webpack/</url>
      
        <content type="html"><![CDATA[<p>大家好，这里是诈尸更博的 memset0。</p><p>之前好长一段时间没怎么出现了啦（感觉上有一年？），主要是不知道写点什么（省略若干废话）。</p><p>这次大胆的尝试一下别的主题，假装自己不是 OIer，而是一个萌萌哒的前端。写点看起来有点意思容易带来自我满足的东西，分享给大家。</p><a id="more"></a><h4 id="好，那我们就开始吧-XD"><a href="#好，那我们就开始吧-XD" class="headerlink" title="好，那我们就开始吧 XD"></a>好，那我们就开始吧 XD</h4><p>这次想写的内容是 Userscript 相关，这大概像是所谓「极客」 向状物。原理说起来很简单，是通过一个浏览器插件（通常是 Tamper Monkey），使你自定义的 Javascript 运行在指定网页上，从而通过简短的代码实现一些有趣或是实用的功能。</p><p>比如前段日子，我给集训队作业的 OJ <a href="https://ioihw20.duck-ac.cn">ioihw20.duck-ac.cn</a> 写了个脚本。</p><p>出于一些原因，这个 OJ 的用户名是顺序编码（形如 <code>ioi2021_08</code>、<code>ioi2021_11</code>）；大家还有一个指标，就是要完成里面的 150 道作业题。对着数字编码人工脑补出这人是谁就很费劲，想看看谁是卷王（点名批评 @gcz）更只能一个一个点，那怎么办？？<del>当然谁卷阿鲁巴谁</del>。</p><p>当然是写个 Userscript。他可以根据内嵌的数据表，建立出用户名（形如 <code>ioihw2021_11</code>）和真实姓名（xxx）的对应关系。OIer 们的大脑内一般对互相的真名和 id 建立过比较熟练的对应表， 所以看到真名基本就能很快认识到<del>啊这就是那个卷王 gcz 啊，怎么还没有被阿鲁巴</del>，从而达到所谓认人的需求。</p><p>至于排行榜的功能，注意到 UOJ 的前端实现中有用到 jQuery 库。这时候 Userscript 的好处就体现出来了，我们可以直接调用 UOJ 的 jQuery！通过 <code>Promise.all()</code> 和 <code>$.get()</code> 方法，我们可以很快的取得每个人的个人信息页面 <code>/user/profile/ioi2021_&lt;xx&gt;</code>。并用我们的 Javascript 脚本进行数据处理。然后汇总到页面上。</p><p><img src="https://static.memset0.cn/img/v2/20201026005507.png" alt=""></p><p>此外，出于一些或是恶趣味的东西，我还加了点小功能。比如会给排行版的 rk1 自带一个 <code>卷王</code> 的 tag。这样无论在提交记录页面或是哪里，都能明明白白的写着：这就是那个<del>卷王</del>毒瘤！！</p><h4 id="你讲了这么多，和-Webpack-有啥关系？"><a href="#你讲了这么多，和-Webpack-有啥关系？" class="headerlink" title="你讲了这么多，和 Webpack 有啥关系？"></a>你讲了这么多，和 Webpack 有啥关系？</h4><p>欸对啊，这篇博文的标题不是 Webpack 嘛，怎么成了进来听 mem0 扯淡<del>吹逼</del>啊。</p><p>注意到这么一个简简单单的脚本，我只进行了简单的函数封装，他已经有足足 10kb 了。如果我们想要完成更加复杂的脚本，这可怎么办呢？</p><p>那就请出我们的主角 webpack 吧<del>（喂喂，这股小学生作文画风是怎么回事啊）</del>。它是一个静态的 Javascript 打包工具。会根据你的配置和代码，生成 Javascript 代码的依赖关系，并打包成一个或多个 bundle。</p><p>这在 Vue.js 等开发工具中经常用到（他们也需要库和源代码全部打包到一个文件中），恰好和我们的需求也十分类似。</p><p>那么，或许我们就可以用类似 node.js 的方式开发我们的 Userscript，然后通过 Webpack 打包，并应用到 Tampermonkey 中？</p><h4 id="那怎么写代码啊？"><a href="#那怎么写代码啊？" class="headerlink" title="那怎么写代码啊？"></a>那怎么写代码啊？</h4><p>来考虑一下我们的目录结构：</p><ul><li><code>./src</code> 文件夹中，我们存放脚本的源代码。其中 <code>./src/app.js</code> 是我们的入口。</li><li><code>./dist</code> 文件夹中，我们存放自动打包生成的文件，如 <code>bundle.js</code>。</li><li><code>./node_modules</code> 文件夹，用来存放程序运行所需要的第三方库，无需关心。</li><li><code>./package.json</code> 文件，用来存放 npm 的配置（如包的版本）。</li><li><code>./webpack.config.js</code> 文件，用来存放 webpack 的配置。</li></ul><p>编辑 <code>package.json</code> 和 <code>webpack.config.js</code> 之前，我们先来冷静一下我们开发和调试的需求。</p><ul><li>开发环境（Development）：在 Tampermonkey 中 @require 一个本地脚本。在 Chrome 设置中允许 Tampermonkey 访问本地文件。这样我们更新到打包更新到 bundle 文件的内容，就能实时应用到浏览器中。</li><li>生成环境（Production）：通过 webpack 的工具进行打包和压缩。加上 Tampermonkey 所需的文件头，以作为独立的 TamperMonkey 脚本运行。进一步的，可以考虑使用 Github Action 等自动化工具部署。</li></ul><p>编辑 <code>package.json</code> 文件（请自行替换尖括号内的内容）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&lt;name&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&lt;version&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&lt;description&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&lt;author&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;&lt;license&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack --env production &amp;&amp; node packer.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack --env development --watch&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^4.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less&quot;</span>: <span class="string">&quot;^3.12.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^1.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^4.44.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-bundle-analyzer&quot;</span>: <span class="string">&quot;^3.9.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.3.12&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-merge&quot;</span>: <span class="string">&quot;^5.2.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑 <code>webpack.config.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  public: &#123; <span class="comment">// 公共的配置</span></span><br><span class="line">    entry: &#123;</span><br><span class="line">      app: <span class="string">&#x27;./src/app.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">          use: [</span><br><span class="line">            <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">            &#123; <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>, <span class="attr">options</span>: &#123; <span class="attr">importLoaders</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">            <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          use: [</span><br><span class="line">            <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  production: &#123; <span class="comment">// 生产环境的配置</span></span><br><span class="line">    mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  development: &#123; <span class="comment">// 开发环境的配置</span></span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    devtool: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env</span>) =&gt;</span> merge(</span><br><span class="line">  config.public,</span><br><span class="line">  env.includes(<span class="string">&#x27;production&#x27;</span>) ? config.production : config.development</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>运行 <code>npm install</code> 安装我们需要的库。</p><p>在当前目录新建 <code>header.js</code> ；新建 <code>packer.js</code>，写入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> header = fs.readFileSync(path.join(__dirname, <span class="string">&quot;header.js&quot;</span>)).toString();</span><br><span class="line"><span class="keyword">const</span> bundle = fs.readFileSync(path.join(__dirname, <span class="string">&quot;dist&quot;</span>, <span class="string">&quot;bundle.js&quot;</span>)).toString();</span><br><span class="line"></span><br><span class="line">fs.writeFileSync(path.join(__dirname, <span class="string">&quot;dist&quot;</span>, <span class="string">&quot;userscript.js&quot;</span>), header + <span class="string">&quot;\n&quot;</span> + bundle);</span><br></pre></td></tr></table></figure><p>创建 <code>src</code> 文件夹，新建 <code>app.js</code> 文件并写入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; css &#125; = <span class="built_in">require</span>(<span class="string">&quot;./style.less&quot;</span>);</span><br><span class="line">alert(<span class="string">&quot;Hello, World&quot;</span>);</span><br></pre></td></tr></table></figure><p>新建 <code>style.less</code> 文件并写入</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; <span class="attribute">color</span>: red <span class="meta">!important</span>; &#125;</span><br></pre></td></tr></table></figure><p>在浏览器插件（此处以 Tampermonkey 为例）中创建一个脚本，并写入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @namespace &lt;name&gt;</span></span><br><span class="line"><span class="comment">// @name &lt;name&gt;[dev]</span></span><br><span class="line"><span class="comment">// @match http://*</span></span><br><span class="line"><span class="comment">// @match https://*</span></span><br><span class="line"><span class="comment">// @require file://&lt;path-to-your-project&gt;/dist/bundle.js</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里啥都不用写。</span></span><br></pre></td></tr></table></figure><p>运行 <code>npm run build</code> 进行打包，会发现自动生成了 <code>./dist/bundle.js</code>。</p><p>我们在浏览器中随便打开一个网页，会发现弹出 Hello, World! 对话框，且所有字体颜色变为红色。 </p><p><img src="https://static.memset0.cn/img/v2/20201026104958.png" alt=""></p><p>嘛，这虽然很丑，但说明我们的脚本成功运行了。</p><p>需要开发的话，可以直接修改 <code>app.js</code> 和 <code>style.less</code> 的内容。</p><p>你可以在 <code>app.js</code> 中 <code>import</code> 一个别的 Javascript 文件，或者引入通过 NPM 安装的库，webpack 都会一并进行打包。</p><p>但这样做每次都要重新运行 <code>npm run build</code>。考虑使用 webpack 的 <code>watch</code> 模式监测源文件修改，并实时差量编译。</p><p>前文我们已经配置好了，运行 <code>npm run dev</code> 即可。</p><h4 id="我写好了我的脚本，可怎么发布呢？"><a href="#我写好了我的脚本，可怎么发布呢？" class="headerlink" title="我写好了我的脚本，可怎么发布呢？"></a>我写好了我的脚本，可怎么发布呢？</h4><p>TamperMonkey 的脚本需要一个固定格式的文件头，而直接用 webpack 打包出来的 <code>bundle.js</code> 显然是不自带这样一段。</p><p>新建 <code>header.js</code> 文件，写入你配置的文件头。前文我们配置的 <code>packer.js</code> 可以直接把 <code>header.js</code> 的内容插入到 <code>bundle.js</code> 前面，并写入到文件 <code>./dist/userscript.js</code> 中。（真是简单粗暴呢）</p><p>把 <code>userscript.js</code> 的内容复制到 Tampermonkey 中即可运行。</p><p>发布脚本的时候可以顺便薅一下资本主义羊毛 Github Action（@ouuan 哥哥教育我的），写入 <code>./.github/workflows/deploy.yml</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&quot;Deploy to Artifacts&quot;</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">dist</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.sha &#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">dist/userscript.js</span></span><br></pre></td></tr></table></figure><h4 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h4><p>嘛，感觉也不太适合写这种博客啊 = =</p><p>而且受众范围有点小，不知道有没有人看。</p><p>下次尝试更新一下 OI 内容？</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Userscript </tag>
            
            <tag> Javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「ICPC World Finals 2018」熊猫保护区</title>
      <link href="icpcwf2018-g/"/>
      <url>icpcwf2018-g/</url>
      
        <content type="html"><![CDATA[<p>给定一个 $n$ 个点的简单多边形（不保证是凸的），你需要确定一个半径 $r$，然后在每个端点画一个半径为 $r$ 的圆，要求能覆盖简单多边形的全部面积。</p><p><img src="https://static.memset0.cn/img/v2/20201018160521.png" alt="center"></p><p>你需要确定这个 $r$ 最小是多少，精度要求 $10^{-6}$。</p><p>$3 \leq n \leq 2000,\ -10^4 \leq x_i,y_i \leq 10^4$。</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑求出端点的 Voronoi 图，答案一定是 Voronoi 图的端点，或者是 Voronoi 图和多边形的交点贡献的。</p><p>由于这题数据范围较小，我们可以跑暴力半平面交。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>这题我计算点对答案的贡献的时候是暴力 $O(n)$ 的，其实这样的话理论复杂度高达 $O(n^3)$（然而照样卡不掉）。</p><p>因为 Voronoi 图本质就是按照最近关键点来划分平面，故我们可以直接 $O(1)$ 来计算。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">2e4</span>,eps=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">namespace</span> geometry&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">double</span> mathPI=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">abs</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123;<span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;&#125;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> point &amp;rhs)<span class="keyword">const</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">abs</span>(x-rhs.x)&lt;=eps)?(y-rhs.y&lt;-eps):(x-rhs.x&lt;-eps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> point &amp;rhs)<span class="keyword">const</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">abs</span>(x-rhs.x)&lt;=eps&amp;&amp;<span class="built_in">abs</span>(y-rhs.y)&lt;=eps;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">line</span>&#123;</span></span><br><span class="line">    point a,b;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> line &amp;rhs)<span class="keyword">const</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a==rhs.a?b&lt;rhs.b:a&lt;rhs.a;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">squaredDistance</span><span class="params">(<span class="keyword">const</span> point &amp;a,<span class="keyword">const</span> point &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">distance</span><span class="params">(<span class="keyword">const</span> point &amp;a,<span class="keyword">const</span> point &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(squaredDistance(a,b));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">cross</span><span class="params">(<span class="keyword">const</span> point &amp;u,<span class="keyword">const</span> point &amp;a,<span class="keyword">const</span> point &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x-u.x)*(b.y-u.y)-(b.x-u.x)*(a.y-u.y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> point <span class="title">intersect</span><span class="params">(<span class="keyword">const</span> line &amp;a,<span class="keyword">const</span> line &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> u=((a.a.y-b.a.y)*(b.a.x-b.b.x)-(a.a.x-b.a.x)*(b.a.y-b.b.y))/</span><br><span class="line">      ((a.a.x-a.b.x)*(b.a.y-b.b.y)-(a.a.y-a.b.y)*(b.a.x-b.b.x));</span><br><span class="line">    <span class="keyword">return</span> &#123;u*(a.a.x-a.b.x)+a.a.x,u*(a.a.y-a.b.y)+a.a.y&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">checkSegmentCrossed</span><span class="params">(<span class="keyword">const</span> line &amp;a,<span class="keyword">const</span> line &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((cross(a.a,a.b,b.a)&lt;eps)^(cross(a.a,a.b,b.b)&lt;eps))&amp;&amp;((cross(b.a,b.b,a.a)&lt;eps)^(cross(b.a,b.b,a.b)&lt;eps));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">insideConvex</span><span class="params">(<span class="keyword">const</span> point &amp;x,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;point&gt; &amp;a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> target=cross(a[<span class="number">0</span>],a[<span class="number">1</span>],x)&lt;eps;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.size();i++)</span><br><span class="line">      <span class="keyword">if</span>(target!=(cross(a[i],a[(i+<span class="number">1</span>)%a.size()],x)&lt;eps))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">insidePolygon</span><span class="params">(<span class="keyword">const</span> point &amp;x,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;point&gt; &amp;a)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">deg</span><span class="params">(a.size())</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">      deg[i]=<span class="built_in">atan2</span>(a[i].y-x.y,a[i].x-x.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">      <span class="keyword">double</span> cur=deg[i]-deg[(i+<span class="number">1</span>)%a.size()];</span><br><span class="line">      <span class="keyword">if</span>(cur&gt;=mathPI)cur-=mathPI;</span><br><span class="line">      <span class="keyword">if</span>(cur&lt;=-mathPI)cur+=mathPI;</span><br><span class="line">      sum+=cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(sum)&gt;<span class="number">.5</span>*mathPI;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="built_in">deque</span>&lt;point&gt; <span class="title">halfPlane</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;line&gt; &amp;source)</span></span>&#123;</span><br><span class="line">    vector&lt;pair&lt;line,double&gt;&gt; plane(source.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;plane.size();i++)&#123;</span><br><span class="line">      plane[i]=&#123;source[i],<span class="built_in">atan2</span>(source[i].b.y-source[i].a.y,source[i].b.x-source[i].a.x)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(plane.begin(),plane.end(),[&amp;](<span class="keyword">const</span> <span class="built_in">pair</span>&lt;line,<span class="keyword">double</span>&gt; &amp;a,<span class="keyword">const</span> <span class="built_in">pair</span>&lt;line,<span class="keyword">double</span>&gt; &amp;b)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">abs</span>(a.second-b.second)&gt;eps?a.second&lt;b.second:cross(a.first.a,b.first.a,b.first.b)&gt;eps;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">deque</span>&lt;point&gt; q;</span><br><span class="line">    <span class="built_in">deque</span>&lt;line&gt; ql;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;plane.size();i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i&amp;&amp;<span class="built_in">abs</span>(plane[i].second-plane[i<span class="number">-1</span>].second)&lt;=eps)<span class="keyword">continue</span>;</span><br><span class="line">      line cur=plane[i].first;</span><br><span class="line">      <span class="keyword">while</span>(q.size()&amp;&amp;cross(cur.a,cur.b,q.back())&lt;-eps)q.pop_back(),ql.pop_back();</span><br><span class="line">      <span class="keyword">while</span>(q.size()&amp;&amp;cross(cur.a,cur.b,q.front())&lt;-eps)q.pop_front(),ql.pop_front();</span><br><span class="line">      <span class="keyword">if</span>(ql.size())q.push_back(intersect(ql.back(),cur));</span><br><span class="line">      ql.push_back(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size()&gt;<span class="number">1</span>&amp;&amp;cross(ql.front().a,ql.front().b,q.back())&lt;-eps)q.pop_back(),ql.pop_back();</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> geometry;</span><br><span class="line"><span class="keyword">int</span> n,satisifyCounter;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; a;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="built_in">set</span>&lt;point&gt; voronoiNode;</span><br><span class="line"><span class="built_in">set</span>&lt;line&gt; voronoiEdge;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">satisifyNode</span><span class="params">(<span class="keyword">const</span> point &amp;x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isnan(x.x)||isnan(x.y))<span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">double</span> cur=numeric_limits&lt;<span class="keyword">double</span>&gt;::infinity();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    cur=min(cur,squaredDistance(x,a[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  ++satisifyCounter;</span><br><span class="line">  <span class="comment">// cerr&lt;&lt;&quot;check &quot;&lt;&lt;x.x&lt;&lt;&quot; &quot;&lt;&lt;x.y&lt;&lt;&quot; &quot;&lt;&lt;cur&lt;&lt;endl;</span></span><br><span class="line">  ans=max(ans,cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// cerr&lt;&lt;fixed&lt;&lt;setprecision(4);</span></span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">  a.resize(n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    satisifyNode(&#123;(a[i].x+a[(i+<span class="number">1</span>)%n].x)/<span class="number">2</span>,(a[i].y+a[(i+<span class="number">1</span>)%n].y)/<span class="number">2</span>&#125;);</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;&quot;Segment &quot;&lt;&lt;a[i].x&lt;&lt;&quot; &quot;&lt;&lt;a[i].y&lt;&lt;&quot; &quot;&lt;&lt;a[(i+1)%n].x&lt;&lt;&quot; &quot;&lt;&lt;a[(i+1)%n].y&lt;&lt;endl;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// cerr&lt;&lt;endl;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;line&gt; plane=&#123;</span><br><span class="line">      &#123;&#123;inf,inf&#125;,&#123;-inf,inf&#125;&#125;,</span><br><span class="line">      &#123;&#123;inf,-inf&#125;,&#123;inf,inf&#125;&#125;,</span><br><span class="line">      &#123;&#123;-inf,inf&#125;,&#123;-inf,-inf&#125;&#125;,</span><br><span class="line">      &#123;&#123;-inf,-inf&#125;,&#123;inf,-inf&#125;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;&quot;Circle &quot;&lt;&lt;a[i].x&lt;&lt;&quot; &quot;&lt;&lt;a[i].y&lt;&lt;&quot; 5&quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)<span class="keyword">if</span>(i!=j)&#123;</span><br><span class="line">      point mid&#123;(a[i].x+a[j].x)/<span class="number">2</span>,(a[i].y+a[j].y)/<span class="number">2</span>&#125;;</span><br><span class="line">      point delta&#123;a[i].x-mid.x,a[i].y-mid.y&#125;;</span><br><span class="line">      plane.push_back(&#123;&#123;mid.x-delta.y,mid.y+delta.x&#125;,&#123;mid.x+delta.y,mid.y-delta.x&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> convex=halfPlane(plane);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;convex.size();i++)&#123;</span><br><span class="line">      <span class="comment">// cerr&lt;&lt;convex[i].x&lt;&lt;&quot; &quot;&lt;&lt;convex[i].y&lt;&lt;endl;</span></span><br><span class="line">      voronoiNode.insert(convex[i]);</span><br><span class="line">      line e=&#123;convex[i],convex[(i+<span class="number">1</span>)%convex.size()]&#125;;</span><br><span class="line">      <span class="keyword">if</span>(e.a.x&lt;e.b.x)swap(e.a,e.b);</span><br><span class="line">      voronoiEdge.insert(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;endl;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> point &amp;x:voronoiNode)&#123;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;x.x&lt;&lt;&quot; &quot;&lt;&lt;x.y&lt;&lt;&quot; &quot;&lt;&lt;insidePolygon(x,a)&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(insidePolygon(x,a))&#123;</span><br><span class="line">      satisifyNode(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// cerr&lt;&lt;endl;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> line &amp;e:voronoiEdge)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">      line target&#123;a[i],a[(i+<span class="number">1</span>)%a.size()]&#125;;</span><br><span class="line">      <span class="keyword">if</span>(checkSegmentCrossed(e,target))&#123;</span><br><span class="line">        satisifyNode(intersect(e,target));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">12</span>)&lt;&lt;<span class="built_in">sqrt</span>(ans)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cerr</span>&lt;&lt;<span class="string">&quot;satisifyCounter: &quot;</span>&lt;&lt;satisifyCounter&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hack"><a href="#Hack" class="headerlink" title="Hack"></a>Hack</h2><blockquote><p>内容偏娱乐向，本来打算发布的，结果发现时限过大 + 精度要求低，卡都卡不掉。</p></blockquote><p>此题貌似是一个 Voronoi 图板题，我们需要找出由原多边形端点得到的 Voronoi 图，然后答案的贡献只可能从 Voronoi 图的端点，或者 Voronoi 图和线段的交点中产生</p><p>正常做法中，我们知道 Voronoi 图实际上是把二维平面按照距离最近的关键点划分为若干部分，所以贡献答案的计算是容易的。</p><p>此处我们点开一位幸运选手 memset0 的代码：<a href="https://loj.ac/submission/959701">959701</a>，注意到这个人好像不清楚  Voronoi 图的性质，而是大力猜想 Voronoi 图和原多边形的交点个数是 $O(n)$ 级别的，然后暴力跑贡献答案。看起来好像非常对，而且实际上跑的还很快。</p><p>但这个猜想嘛，肯定是假的，怎么卡呢？我们考虑交点个数计数：假设我们把简单多边形的边提出来染色，边上的一个区间和端点 $i$ 距离最近，就染成染色 $i$。那么总交点个数即等于每条边的颜色段数和。</p><h2 id="Hack-程序"><a href="#Hack-程序" class="headerlink" title="Hack 程序"></a>Hack 程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ios::sync_with_stdio(<span class="number">0</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> lx=<span class="number">-10000</span>,rx=<span class="number">-9000</span>,ly=<span class="number">-10000</span>,ry=<span class="number">10000</span>,m=<span class="number">250</span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; node;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    node.push_back(&#123;rx,i*<span class="number">2</span><span class="number">-1</span>&#125;);</span><br><span class="line">    node.push_back(&#123;lx,i*<span class="number">2</span><span class="number">-1</span>&#125;);</span><br><span class="line">    node.push_back(&#123;lx,i*<span class="number">2</span>&#125;);</span><br><span class="line">    node.push_back(&#123;rx,i*<span class="number">2</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    node.push_back(&#123;rx+i*<span class="number">2</span><span class="number">-1</span>,ry&#125;);</span><br><span class="line">    node.push_back(&#123;rx+i*<span class="number">2</span><span class="number">-1</span>,ly&#125;);</span><br><span class="line">    <span class="keyword">if</span>(i!=m)&#123;</span><br><span class="line">      node.push_back(&#123;rx+i*<span class="number">2</span>,ly&#125;);</span><br><span class="line">      node.push_back(&#123;rx+i*<span class="number">2</span>,ry&#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      node.push_back(&#123;rx+m*<span class="number">2</span>,ly<span class="number">-1</span>&#125;);</span><br><span class="line">      node.push_back(&#123;rx,ly<span class="number">-1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// test data mode</span></span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;node.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> x:node)<span class="built_in">cout</span>&lt;&lt;x.first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;x.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// geometry widget mode</span></span><br><span class="line">  <span class="comment">// for(int i=0;i&lt;node.size();i++)&#123;</span></span><br><span class="line">  <span class="comment">//   cout&lt;&lt;&quot;Segment &quot;&lt;&lt;node[i].first&lt;&lt;&quot; &quot;&lt;&lt;node[i].second;</span></span><br><span class="line">  <span class="comment">//   cout&lt;&lt;&quot; &quot;&lt;&lt;node[(i+1)%node.size()].first&lt;&lt;&quot; &quot;&lt;&lt;node[(i+1)%node.size()].second&lt;&lt;endl;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Voronoi图 </tag>
            
            <tag> 半平面交 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「CometOJ Round #7 F」最简单的题</title>
      <link href="cometoj-round7-f/"/>
      <url>cometoj-round7-f/</url>
      
        <content type="html"><![CDATA[<p>维护序列 $a_{1\ldots n}$，支持以下操作 $m$ 次：</p><ol><li>给 $x,y$，将 $x$ 位置的值修改为 $y$；</li><li>给 $l,r,x$，查询区间$[l,r]$中有多少子区间的最大值小于或等于 $x$。</li></ol><p>$n,m \leq 3 \times 10^5$。</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于询问 $\{l,r,x\}$，相当于转化为这样一个问题：</p><p>序列 $b$ 满足 $b_i = [a_i \leq x]$，然后询问 $b$ 的区间 $[l,r]$ 内，有多少子区间的均为 $1$。</p><p>考虑一个分块，维护块内外的信息是平凡的，瓶颈在于如何优化离散化的复杂度。</p><p>然后此处用到一个叫分散层叠的 trick，开一个每一个块作为叶子节点的线段树，叶子节点维护每个数的权值及排名，</p><p>考虑 <code>maintain</code> 操作，每次只保留下标是 $3$ 的倍数的位置。</p><ul><li>对于修改操作，暴力 <code>maintain</code> 上去，时间复杂度 $O(\sqrt n + \frac 2 3 \sqrt n + \frac 4 9 \sqrt n + \cdots) = O(\sqrt n)$。</li><li>对于查询操作，DFS 遍历整棵树，递归到下一层的时候指针只会右移至多 $2$ 次，是常数级别的，故时间复杂度为总节点数，即 $O(\sqrt n)$。</li></ul><h2 id="卡常"><a href="#卡常" class="headerlink" title="卡常"></a>卡常</h2><p>实现上由于分散层叠的常数有点大，还是需要一些卡常技巧的。</p><ol><li>内存连续，而且注意到直接开的话内存空余会很大，可以手动分配内存。</li><li>关于往后扫四次的这个操作，可以写成这样 <code>k+=arr[k+2]&lt;=x?2:0,k+=arr[k+1]&lt;=x</code>，然后在 <code>arr</code> 里多丢两个 $+\infty$。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>二分查找（$O(n \sqrt {n\log n})$）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mem&#123; <span class="comment">//v2.1.2 =&gt; size: 14.19KiB</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_IO</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_MATH</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_UTILS</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_MODINT</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_RANDOM</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_STDVAL</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_LOGGER</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_CONTAINER</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM_FASTIO</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> __SIZEOF_INT128__</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM_INT128</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __integer_mapper(func)       \</span></span><br><span class="line">        func(<span class="keyword">int</span>)                      \</span><br><span class="line">        func(<span class="keyword">unsigned</span> <span class="keyword">int</span>)             \</span><br><span class="line">        func(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)            \</span><br><span class="line">        func(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __float_mapper(func)         \</span></span><br><span class="line">        func(<span class="keyword">float</span>)                    \</span><br><span class="line">        func(<span class="keyword">double</span>)                   \</span><br><span class="line">        func(<span class="keyword">long</span> <span class="keyword">double</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> stdval&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_STDVAL</span></span><br><span class="line">      <span class="keyword">using</span> i32=<span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> i64=<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> u32=<span class="keyword">unsigned</span> <span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> u64=<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> f32=<span class="keyword">float</span>;</span><br><span class="line">      <span class="keyword">using</span> f64=<span class="keyword">double</span>;</span><br><span class="line">      <span class="keyword">using</span> f96=<span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">      <span class="keyword">using</span> i128=<span class="keyword">__int128_t</span>;</span><br><span class="line">      <span class="keyword">using</span> u128=<span class="keyword">__uint128_t</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> utils&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_UTILS</span></span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::tie;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::sort;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::unique;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::reverse;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::shuffle;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::function;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">make_pair</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::make_tuple;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::accumulate;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::lower_bound;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::upper_bound;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::max_element;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::min_element;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> random&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_RANDOM</span></span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> LuckyNumber=<span class="number">20040726</span>; <span class="comment">// Kanbe Kotori&#x27;s Birthday</span></span><br><span class="line">      <span class="function"><span class="built_in">std</span>::mt19937 <span class="title">rng</span><span class="params">(LuckyNumber^<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">      <span class="function"><span class="built_in">std</span>::mt19937_64 <span class="title">rng64</span><span class="params">(LuckyNumber^<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">rand</span><span class="params">(T l,T r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::uniform_int_distribution&lt;T&gt;(l,r)(rng);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">rand64</span><span class="params">(T l,T r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::uniform_int_distribution&lt;T&gt;(l,r)(rng);&#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> modint&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_MODINT</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="class"><span class="keyword">struct</span> <span class="title">Z</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">Z</span><span class="params">()</span></span>&#123;x=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">Z</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;x=t;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>-=(Z a)&#123;(x-=a.x)&lt;<span class="number">0</span>&amp;&amp;(x+=mod);&#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>+=(Z a)&#123;(x+=a.x)&gt;=mod&amp;&amp;(x-=mod);&#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>*=(Z a)&#123;x=(<span class="keyword">long</span> <span class="keyword">long</span>)x*a.x%mod;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>*(Z a,Z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>-(Z a,Z b)&#123;<span class="keyword">return</span> ((a.x-=b.x)&lt;<span class="number">0</span>&amp;&amp;(a.x+=mod)),a;&#125;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>+(Z a,Z b)&#123;<span class="keyword">return</span> ((a.x+=b.x)&gt;=mod&amp;&amp;(a.x-=mod)),a;&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> Z&lt;mod&gt; <span class="title">finv</span><span class="params">(Z&lt;mod&gt; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.x&lt;<span class="number">2</span>)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">return</span> (mod-mod/x.x)*finv(mod%x.x);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> Z&lt;mod&gt; <span class="title">fpow</span><span class="params">(Z&lt;mod&gt; a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        Z &lt;mod&gt; s=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)</span><br><span class="line">          <span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_inverse</span><span class="params">(<span class="keyword">int</span> n,Z&lt;mod&gt; *inv)</span></span>&#123;</span><br><span class="line">        inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)inv[i]=(mod-mod/i)*inv[mod%i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_factorial</span><span class="params">(<span class="keyword">int</span> n,Z&lt;mod&gt; *fac,Z&lt;mod&gt; *ifac)</span></span>&#123;</span><br><span class="line">        fac[<span class="number">0</span>]=<span class="number">1</span>,init_inverse(n,ifac);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)fac[i]=fac[i<span class="number">-1</span>]*i,ifac[i]=ifac[i<span class="number">-1</span>]*ifac[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> io&#123;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(modint::Z&lt;mod&gt; &amp;x)</span></span>&#123;read(x.x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(modint::Z&lt;mod&gt; x)</span></span>&#123;print(x.x);&#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> math&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_MATH</span></span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::max;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">abs</span><span class="params">(T x)</span></span>&#123;<span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">gcd</span><span class="params">(T n,T m)</span></span>&#123;<span class="keyword">return</span> m?gcd(m,n%m):n;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">lcm</span><span class="params">(T n,T m)</span></span>&#123;<span class="keyword">return</span> n/gcd(n,m)*m;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">const</span> stdval::u64 p&gt; <span class="class"><span class="keyword">struct</span> <span class="title">FastDiv</span>&#123;</span></span><br><span class="line">        stdval::u64 t,i;</span><br><span class="line">        inline FastDiv():t(stdval::u64(-1)/p),i(mul_inv(p))&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(stdval::u64 n)</span></span>&#123;<span class="keyword">return</span> n*i&lt;=t;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(stdval::i64 n)</span></span>&#123;<span class="keyword">return</span> stdval::u64(n&lt;<span class="number">0</span>?-n:n)*i&lt;=t;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> stdval::u64 <span class="title">mul_inv</span><span class="params">(stdval::u64 n)</span></span>&#123;</span><br><span class="line">          stdval::u64 x=n;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i)x*=<span class="number">2</span>-n*x;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">const</span> stdval::u64 b&gt; <span class="class"><span class="keyword">struct</span> <span class="title">FastMod</span>&#123;</span></span><br><span class="line">        stdval::u64 m;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">FastMod</span><span class="params">()</span>:<span class="title">m</span><span class="params">(stdval::u64((stdval::u128(<span class="number">1</span>)&lt;&lt;<span class="number">64</span>)/b))</span></span>&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> stdval::u64 <span class="title">reduce</span><span class="params">(stdval::u64 a)</span></span>&#123;</span><br><span class="line">          stdval::u64 q=(stdval::u64)((stdval::u128(m)*a)&gt;&gt;<span class="number">64</span>);</span><br><span class="line">          stdval::u64 r=a-q*b;</span><br><span class="line">          <span class="keyword">return</span> r&gt;=b?r-b:r;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> container&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_CONTAINER</span></span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::tuple;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">set</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_set</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">map</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::tie;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">make_pair</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::make_tuple;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">vector</span>:</span><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;::<span class="built_in">vector</span>;</span><br><span class="line">        <span class="built_in">vector</span>():<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;()&#123;&#125;</span><br><span class="line">        <span class="built_in">vector</span>(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; &amp;plain):<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;(plain)&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>&#123;<span class="built_in">std</span>::sort(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end());&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">concat</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span> &amp;rhs)</span></span>&#123;<span class="keyword">this</span>-&gt;insert(<span class="keyword">this</span>-&gt;end(),rhs.begin(),rhs.end());&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">includes</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::find(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x)!=<span class="keyword">this</span>-&gt;end();&#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class Function&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Function func)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:*<span class="keyword">this</span>)func(it);&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="built_in">vector</span> <span class="title">slice</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">          <span class="keyword">if</span>(r&lt;<span class="keyword">this</span>-&gt;size())<span class="keyword">return</span> <span class="built_in">vector</span>(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;begin()+r);</span><br><span class="line">          <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rsp=(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;end());</span><br><span class="line">          <span class="keyword">return</span> rsp.resize(r-l),rsp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">from</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">set</span>&lt;T&gt; &amp;src)</span></span>&#123;</span><br><span class="line">          <span class="keyword">this</span>-&gt;resize(src.size());</span><br><span class="line">          <span class="keyword">auto</span> it=<span class="keyword">this</span>-&gt;begin();</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">const</span> T e:src)*it++=e;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>,<span class="keyword">class</span> <span class="title">Function</span>&gt;</span> <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; _map(Function func) <span class="keyword">const</span>&#123;</span><br><span class="line">          <span class="built_in">vector</span> &lt;R&gt; res(<span class="keyword">this</span>-&gt;size());</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;size();i++)</span><br><span class="line">            res[i]=func(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i));</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class R&gt; <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; <span class="title">map</span><span class="params">(R func(T))</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_map&lt;R&gt;(func);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class R&gt; <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; <span class="title">map</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::function&lt;R(T)&gt; &amp;func)</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_map&lt;R&gt;(func);&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">string</span>:</span><span class="built_in">std</span>::<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>;</span><br><span class="line">        <span class="built_in">string</span>():<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;&quot;</span>)&#123;&#125;</span><br><span class="line">        <span class="built_in">string</span>(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;plain):<span class="built_in">std</span>::<span class="built_in">string</span>(plain)&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;vet)</span> <span class="keyword">const</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;dim)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;empty())<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">          <span class="keyword">char</span> *src=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;length()+<span class="number">1</span>];</span><br><span class="line">          <span class="built_in">strcpy</span>(src,<span class="keyword">this</span>-&gt;c_str());</span><br><span class="line">          <span class="keyword">char</span> *tar=<span class="keyword">new</span> <span class="keyword">char</span>[dim.length()+<span class="number">1</span>];</span><br><span class="line">          <span class="built_in">strcpy</span>(tar,dim.c_str());</span><br><span class="line">          <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; rsp;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">char</span> *pos=strtok(src,tar);pos;pos=strtok(<span class="literal">nullptr</span>,tar))</span><br><span class="line">            rsp.push_back(<span class="built_in">string</span>(pos));</span><br><span class="line">          <span class="keyword">delete</span>[] src;</span><br><span class="line">          <span class="keyword">delete</span>[] tar;</span><br><span class="line">          <span class="keyword">return</span> rsp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        template&lt;class... Args&gt; static inline string format(const char *fm,Args... args)&#123;</span><br><span class="line">          <span class="keyword">int</span> len=<span class="built_in">snprintf</span>(<span class="literal">nullptr</span>,<span class="number">0</span>,fm,args...);</span><br><span class="line">          <span class="keyword">char</span> *buf=<span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">          <span class="built_in">snprintf</span>(buf,len+<span class="number">1</span>,fm,args...);</span><br><span class="line">          <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(buf)</span></span>;</span><br><span class="line">          <span class="keyword">delete</span>[] buf;</span><br><span class="line">          <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        template&lt;class... Args&gt; static inline string format(const string &amp;fm,Args... args)&#123;</span><br><span class="line">          <span class="keyword">return</span> format(fm.c_str(),args...);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> __to_string(T)                 \</span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123; \</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::to_string(x);          \</span><br><span class="line">      &#125;</span><br><span class="line">      __float_mapper(__to_string)</span><br><span class="line">      __integer_mapper(__to_string)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> __to_string</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>&#123;<span class="keyword">return</span> s;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s);&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> mem::modint::Z&lt;mod&gt; &amp;v)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::to_string(v.x);&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;ctn)</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;[&quot;</span>+<span class="built_in">string</span>(<span class="string">&quot;,&quot;</span>).join(ctn)+<span class="string">&quot;]&quot;</span>;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">set</span>&lt;T&gt; &amp;ctn)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> result=<span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:ctn)&#123;</span><br><span class="line">          <span class="keyword">if</span>(flag)result+=<span class="string">&quot;,&quot;</span>;</span><br><span class="line">          flag=<span class="literal">true</span>;</span><br><span class="line">          result+=to_string(it);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class T1,class T2&gt; inline string to_string(const map&lt;T1,T2&gt; &amp;ctn)&#123;</span><br><span class="line">        <span class="built_in">string</span> result=<span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:ctn)&#123;</span><br><span class="line">          <span class="keyword">if</span>(flag)result+=<span class="string">&quot;,&quot;</span>;</span><br><span class="line">          flag=<span class="literal">true</span>;</span><br><span class="line">          result+=to_string(it.first)+<span class="string">&quot;:&quot;</span>+to_string(it.second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">string::join</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;vet)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vet.size())<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> res=to_string(vet[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">1</span>;i&lt;vet.size();i++)&#123;</span><br><span class="line">          res+=*<span class="keyword">this</span>;</span><br><span class="line">          res+=to_string(vet[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">const</span> <span class="keyword">char</span> *s)&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s);&#125;</span><br><span class="line">      <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">const</span> <span class="keyword">char</span> *s,<span class="keyword">size_t</span> len)&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s,len);&#125;</span><br><span class="line">      <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">long</span> <span class="keyword">double</span> x)&#123;<span class="keyword">return</span> to_string(x);&#125;</span><br><span class="line">      <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x)&#123;<span class="keyword">return</span> to_string(x);&#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> io&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_IO</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_FASTIO</span></span><br><span class="line">      <span class="keyword">namespace</span> fastio&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> BUFFER=<span class="number">1</span>&lt;&lt;<span class="number">18</span>;</span><br><span class="line">        <span class="keyword">char</span> ibuf[BUFFER],*iS,*iT;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(iS==iT)&#123;</span><br><span class="line">            iT=(iS=ibuf)+fread(ibuf,<span class="number">1</span>,BUFFER,<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="keyword">return</span> iS==iT?EOF:*iS++;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> *iS++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> obuf[BUFFER],*oS=obuf,*oT=oS+BUFFER<span class="number">-1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;</span><br><span class="line">          fwrite(obuf,<span class="number">1</span>,oS-obuf,<span class="built_in">stdout</span>);</span><br><span class="line">          oS=obuf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">          *oS++=x;</span><br><span class="line">          <span class="keyword">if</span>(oS==oT)flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Flusher</span>&#123;</span>~Flusher()&#123;flush();&#125;&#125;flusher;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">using</span> fastio::getc;</span><br><span class="line">      <span class="keyword">using</span> fastio::putc;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> getchar();&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readDigit</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">        x=getc();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x))x=getc();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">readDigit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        readDigit(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readAlpha</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">        x=getc();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(x))x=getc();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">readAlpha</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        readAlpha(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> __read(T)                             \</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;                  \</span><br><span class="line">          x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> c=getc();           \</span><br><span class="line">          <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getc();   \</span><br><span class="line">          <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getc(); \</span><br><span class="line">          <span class="keyword">if</span>(f)x=-x;                              \</span><br><span class="line">        &#125;</span><br><span class="line">      __integer_mapper(__read)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> __read</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> &amp;x)</span></span>&#123;x=getc();&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c=getc();</span><br><span class="line">        <span class="keyword">while</span>(~c&amp;&amp;!<span class="built_in">isspace</span>(c))*s++=c,c=getc();</span><br><span class="line">        *s++=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(container::<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c=getc();</span><br><span class="line">        s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(~c&amp;&amp;!<span class="built_in">isspace</span>(c))s+=c,c=getc();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T</span>=<span class="keyword">int</span>&gt; <span class="function"><span class="keyword">inline</span> T <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        T x;</span><br><span class="line">        read(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class T,class... Args&gt; inline void read(T &amp;x,Args &amp;... args)&#123;</span><br><span class="line">        read(x),read(args...);</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> __print(T)           \</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;  \</span><br><span class="line">          <span class="keyword">if</span>(x&lt;<span class="number">0</span>)putc(<span class="string">&#x27;-&#x27;</span>),x=-x; \</span><br><span class="line">          <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);    \</span><br><span class="line">          putc(<span class="string">&#x27;0&#x27;</span>+x%<span class="number">10</span>);        \</span><br><span class="line">        &#125;</span><br><span class="line">      __integer_mapper(__print)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> __print</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;putc(x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)putc(s[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> container::<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)putc(s[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      template&lt;class T,class... Args&gt; inline void print(const T &amp;x,Args... args)&#123;</span><br><span class="line">        print(x),print(args...);</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class... Args&gt; inline void println(Args... args)&#123;</span><br><span class="line">        print(args...),putc(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      template&lt;class... Args&gt; inline void printfm(const char *formatter,Args... arguments)&#123;</span><br><span class="line">        print(container::<span class="built_in">string</span>().format(formatter,arguments...));</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class... Args&gt; inline void printfm(const container::string &amp;formatter,Args... arguments)&#123;</span><br><span class="line">        print(container::<span class="built_in">string</span>().format(formatter,arguments...));</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> logger&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_LOGGER</span></span><br><span class="line">      <span class="class"><span class="keyword">enum</span> <span class="title">ConsoleColor</span>&#123;</span></span><br><span class="line">        NOPE=<span class="number">-1</span>,BLACK,RED,GREEN,YELLOW,BLUE,PURPLE,DEEPBLUE</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> ConsoleColor color</span>=NOPE,class... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *formatter,Args... args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(~color)&#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[%dm&quot;</span>,<span class="number">30</span>+color);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> ConsoleColor color</span>=NOPE,class... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">logln</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *formatter,Args... args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(~color)&#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[%dm&quot;</span>,<span class="number">30</span>+color);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[0m\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">logs</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,container::to_string(x).c_str());</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class T,class... Args&gt; inline void logs(const T &amp;x,Args... args)&#123;</span><br><span class="line">        logs(x),logs(args...);</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class... Args&gt; inline void logsln(Args... args)&#123;</span><br><span class="line">        logs(args...);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __integer_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __float_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __string_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __string_join_mapper</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> io;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> math;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> utils;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> modint;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> random;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> stdval;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> logger;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> container;</span><br><span class="line">&#125; <span class="comment">// namespace mem</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem::io;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem::math;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem::utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">10</span>,sqn=<span class="number">502</span>,S=sqn+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],bln[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">atom</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> l,r,c;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> atom <span class="keyword">operator</span>+(<span class="keyword">const</span> atom &amp;a,<span class="keyword">const</span> atom &amp;b)&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.l==a.c&amp;&amp;b.l==b.c)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.l+b.l,a.r+b.r,a.c+b.c,a.s+b.s+a.c*b.c&#125;;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a.l==a.c)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.l+b.l,b.r,a.c+b.c,a.s+b.s+a.c*b.l&#125;;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b.l==b.c)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.l,a.r+b.r,a.c+b.c,a.s+b.s+a.r*b.c&#125;;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.l,b.r,a.c+b.c,a.s+b.s+a.r*b.l&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> atom <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">  atom res&#123;<span class="number">0</span>,<span class="number">0</span>,r-l+<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">while</span>(res.l&lt;res.c&amp;&amp;a[l+res.l]&lt;=x)res.l++;</span><br><span class="line">  <span class="keyword">while</span>(res.r&lt;res.c&amp;&amp;a[r-res.r]&lt;=x)res.r++;</span><br><span class="line">  <span class="keyword">int</span> pre=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)<span class="keyword">if</span>(a[i]&lt;=x)res.s+=++pre; <span class="keyword">else</span> pre=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> atom c[<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> anc[S],siz[S],tag[S];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> anc[x]==x?x:anc[x]=find(anc[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">long</span> <span class="keyword">long</span> &amp;s)</span></span>&#123;</span><br><span class="line">  a=find(a),b=find(b),s+=siz[a]*siz[b];</span><br><span class="line">  <span class="keyword">if</span>(siz[a]&gt;siz[b])swap(a,b);</span><br><span class="line">  anc[a]=b,siz[b]+=siz[a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> l,r,n,val[S],pos[S];</span><br><span class="line">  atom pre[S];</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">loc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> upper_bound(val+<span class="number">1</span>,val+n+<span class="number">1</span>,x)-val<span class="number">-1</span>;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=r-l+<span class="number">1</span>;</span><br><span class="line">    pre[<span class="number">0</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,n,<span class="number">0</span>&#125;;</span><br><span class="line">    pre[n]=&#123;n,n,n,(<span class="keyword">long</span> <span class="keyword">long</span>)n*(n<span class="number">-1</span>)/<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)pre[i].c=n;</span><br><span class="line">    std::vector&lt;std::pair&lt;int,int&gt;&gt; t(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)t[i]=&#123;a[i+l],i&#125;;</span><br><span class="line">    sort(t.begin(),t.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)val[i]=t[i<span class="number">-1</span>].first,pos[i]=t[i<span class="number">-1</span>].second;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(pos[i]==k)&#123;</span><br><span class="line">      val[i]=a[k+l];</span><br><span class="line">      <span class="keyword">while</span>(i&gt;<span class="number">1</span>&amp;&amp;val[i]&lt;val[i<span class="number">-1</span>])swap(val[i],val[i<span class="number">-1</span>]),swap(pos[i],pos[i<span class="number">-1</span>]),i--;</span><br><span class="line">      <span class="keyword">while</span>(i&lt;n&amp;&amp;val[i]&gt;val[i+<span class="number">1</span>])swap(val[i],val[i+<span class="number">1</span>]),swap(pos[i],pos[i+<span class="number">1</span>]),i++;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">      pre[i].l=min(pre[i+<span class="number">1</span>].l,pos[i+<span class="number">1</span>]);</span><br><span class="line">      pre[i].r=min(pre[i+<span class="number">1</span>].r,n-pos[i+<span class="number">1</span>]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)anc[i]=i,siz[i]=<span class="number">1</span>,tag[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      pre[i].s=i?pre[i<span class="number">-1</span>].s+<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">      tag[pos[i]]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(pos[i]&amp;&amp;tag[pos[i]<span class="number">-1</span>])merge(pos[i]<span class="number">-1</span>,pos[i],pre[i].s);</span><br><span class="line">      <span class="keyword">if</span>(pos[i]&lt;n<span class="number">-1</span>&amp;&amp;tag[pos[i]+<span class="number">1</span>])merge(pos[i]+<span class="number">1</span>,pos[i],pre[i].s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;s[N/sqn+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0 </span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">&quot;1.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  read(n,m);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)read(a[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)bln[i]=(i<span class="number">-1</span>)/sqn+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s[bln[i]].r=i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)s[bln[i]].l=i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bln[n];i++)s[i].init(),s[i].build();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> o,l,r,x,y,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    read(o);</span><br><span class="line">    <span class="keyword">if</span>(o==<span class="number">1</span>)&#123;</span><br><span class="line">      read(x,y);</span><br><span class="line">      a[x]=y;</span><br><span class="line">      s[bln[x]].modify(x-s[bln[x]].l);</span><br><span class="line">      s[bln[x]].build();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      read(l,r,x);</span><br><span class="line">      atom ans;</span><br><span class="line">      <span class="keyword">if</span>(bln[l]==bln[r])&#123;</span><br><span class="line">        ans=calc(l,r,x);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ans=calc(l,s[bln[l]].r,x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=bln[l]+<span class="number">1</span>;i&lt;=bln[r]<span class="number">-1</span>;i++)ans=ans+s[i].pre[s[i].loc(x)];</span><br><span class="line">        ans=ans+calc(s[bln[r]].l,r,x);</span><br><span class="line">      &#125;</span><br><span class="line">      print(ans.s,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;clocks: %.4lf\n&quot;</span>,clock()/(<span class="keyword">double</span>)CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分散层叠（$O(n \sqrt n)$）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">&quot;sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,fma,tune=native&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mem&#123; <span class="comment">//v2.1.2 =&gt; size: 14.19KiB</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_IO</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_MATH</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_UTILS</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_MODINT</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_RANDOM</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_STDVAL</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_LOGGER</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_CONTAINER</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM_FASTIO</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> __SIZEOF_INT128__</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM_INT128</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __integer_mapper(func)       \</span></span><br><span class="line">        func(<span class="keyword">int</span>)                      \</span><br><span class="line">        func(<span class="keyword">unsigned</span> <span class="keyword">int</span>)             \</span><br><span class="line">        func(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)            \</span><br><span class="line">        func(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __float_mapper(func)         \</span></span><br><span class="line">        func(<span class="keyword">float</span>)                    \</span><br><span class="line">        func(<span class="keyword">double</span>)                   \</span><br><span class="line">        func(<span class="keyword">long</span> <span class="keyword">double</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> stdval&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_STDVAL</span></span><br><span class="line">      <span class="keyword">using</span> i32=<span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> i64=<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> u32=<span class="keyword">unsigned</span> <span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> u64=<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> f32=<span class="keyword">float</span>;</span><br><span class="line">      <span class="keyword">using</span> f64=<span class="keyword">double</span>;</span><br><span class="line">      <span class="keyword">using</span> f96=<span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">      <span class="keyword">using</span> i128=<span class="keyword">__int128_t</span>;</span><br><span class="line">      <span class="keyword">using</span> u128=<span class="keyword">__uint128_t</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> utils&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_UTILS</span></span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::tie;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::sort;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::unique;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::reverse;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::shuffle;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::function;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">make_pair</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::make_tuple;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::accumulate;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::lower_bound;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::upper_bound;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::max_element;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::min_element;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> random&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_RANDOM</span></span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> LuckyNumber=<span class="number">20040726</span>; <span class="comment">// Kanbe Kotori&#x27;s Birthday</span></span><br><span class="line">      <span class="function"><span class="built_in">std</span>::mt19937 <span class="title">rng</span><span class="params">(LuckyNumber^<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">      <span class="function"><span class="built_in">std</span>::mt19937_64 <span class="title">rng64</span><span class="params">(LuckyNumber^<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">rand</span><span class="params">(T l,T r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::uniform_int_distribution&lt;T&gt;(l,r)(rng);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">rand64</span><span class="params">(T l,T r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::uniform_int_distribution&lt;T&gt;(l,r)(rng);&#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> modint&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_MODINT</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="class"><span class="keyword">struct</span> <span class="title">Z</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">Z</span><span class="params">()</span></span>&#123;x=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">Z</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;x=t;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>-=(Z a)&#123;(x-=a.x)&lt;<span class="number">0</span>&amp;&amp;(x+=mod);&#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>+=(Z a)&#123;(x+=a.x)&gt;=mod&amp;&amp;(x-=mod);&#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>*=(Z a)&#123;x=(<span class="keyword">long</span> <span class="keyword">long</span>)x*a.x%mod;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>*(Z a,Z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>-(Z a,Z b)&#123;<span class="keyword">return</span> ((a.x-=b.x)&lt;<span class="number">0</span>&amp;&amp;(a.x+=mod)),a;&#125;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>+(Z a,Z b)&#123;<span class="keyword">return</span> ((a.x+=b.x)&gt;=mod&amp;&amp;(a.x-=mod)),a;&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> Z&lt;mod&gt; <span class="title">finv</span><span class="params">(Z&lt;mod&gt; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.x&lt;<span class="number">2</span>)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">return</span> (mod-mod/x.x)*finv(mod%x.x);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> Z&lt;mod&gt; <span class="title">fpow</span><span class="params">(Z&lt;mod&gt; a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        Z &lt;mod&gt; s=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)</span><br><span class="line">          <span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_inverse</span><span class="params">(<span class="keyword">int</span> n,Z&lt;mod&gt; *inv)</span></span>&#123;</span><br><span class="line">        inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)inv[i]=(mod-mod/i)*inv[mod%i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_factorial</span><span class="params">(<span class="keyword">int</span> n,Z&lt;mod&gt; *fac,Z&lt;mod&gt; *ifac)</span></span>&#123;</span><br><span class="line">        fac[<span class="number">0</span>]=<span class="number">1</span>,init_inverse(n,ifac);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)fac[i]=fac[i<span class="number">-1</span>]*i,ifac[i]=ifac[i<span class="number">-1</span>]*ifac[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> io&#123;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(modint::Z&lt;mod&gt; &amp;x)</span></span>&#123;read(x.x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(modint::Z&lt;mod&gt; x)</span></span>&#123;print(x.x);&#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> math&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_MATH</span></span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::max;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">abs</span><span class="params">(T x)</span></span>&#123;<span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">gcd</span><span class="params">(T n,T m)</span></span>&#123;<span class="keyword">return</span> m?gcd(m,n%m):n;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">lcm</span><span class="params">(T n,T m)</span></span>&#123;<span class="keyword">return</span> n/gcd(n,m)*m;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">const</span> stdval::u64 p&gt; <span class="class"><span class="keyword">struct</span> <span class="title">FastDiv</span>&#123;</span></span><br><span class="line">        stdval::u64 t,i;</span><br><span class="line">        inline FastDiv():t(stdval::u64(-1)/p),i(mul_inv(p))&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(stdval::u64 n)</span></span>&#123;<span class="keyword">return</span> n*i&lt;=t;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(stdval::i64 n)</span></span>&#123;<span class="keyword">return</span> stdval::u64(n&lt;<span class="number">0</span>?-n:n)*i&lt;=t;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> stdval::u64 <span class="title">mul_inv</span><span class="params">(stdval::u64 n)</span></span>&#123;</span><br><span class="line">          stdval::u64 x=n;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i)x*=<span class="number">2</span>-n*x;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">const</span> stdval::u64 b&gt; <span class="class"><span class="keyword">struct</span> <span class="title">FastMod</span>&#123;</span></span><br><span class="line">        stdval::u64 m;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">FastMod</span><span class="params">()</span>:<span class="title">m</span><span class="params">(stdval::u64((stdval::u128(<span class="number">1</span>)&lt;&lt;<span class="number">64</span>)/b))</span></span>&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> stdval::u64 <span class="title">reduce</span><span class="params">(stdval::u64 a)</span></span>&#123;</span><br><span class="line">          stdval::u64 q=(stdval::u64)((stdval::u128(m)*a)&gt;&gt;<span class="number">64</span>);</span><br><span class="line">          stdval::u64 r=a-q*b;</span><br><span class="line">          <span class="keyword">return</span> r&gt;=b?r-b:r;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> container&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_CONTAINER</span></span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::tuple;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">set</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_set</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">map</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::tie;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">make_pair</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::make_tuple;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">vector</span>:</span><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;::<span class="built_in">vector</span>;</span><br><span class="line">        <span class="built_in">vector</span>():<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;()&#123;&#125;</span><br><span class="line">        <span class="built_in">vector</span>(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; &amp;plain):<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;(plain)&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>&#123;<span class="built_in">std</span>::sort(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end());&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">concat</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span> &amp;rhs)</span></span>&#123;<span class="keyword">this</span>-&gt;insert(<span class="keyword">this</span>-&gt;end(),rhs.begin(),rhs.end());&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">includes</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::find(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x)!=<span class="keyword">this</span>-&gt;end();&#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class Function&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Function func)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:*<span class="keyword">this</span>)func(it);&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="built_in">vector</span> <span class="title">slice</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">          <span class="keyword">if</span>(r&lt;<span class="keyword">this</span>-&gt;size())<span class="keyword">return</span> <span class="built_in">vector</span>(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;begin()+r);</span><br><span class="line">          <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rsp=(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;end());</span><br><span class="line">          <span class="keyword">return</span> rsp.resize(r-l),rsp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">from</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">set</span>&lt;T&gt; &amp;src)</span></span>&#123;</span><br><span class="line">          <span class="keyword">this</span>-&gt;resize(src.size());</span><br><span class="line">          <span class="keyword">auto</span> it=<span class="keyword">this</span>-&gt;begin();</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">const</span> T e:src)*it++=e;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>,<span class="keyword">class</span> <span class="title">Function</span>&gt;</span> <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; _map(Function func) <span class="keyword">const</span>&#123;</span><br><span class="line">          <span class="built_in">vector</span> &lt;R&gt; res(<span class="keyword">this</span>-&gt;size());</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;size();i++)</span><br><span class="line">            res[i]=func(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i));</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class R&gt; <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; <span class="title">map</span><span class="params">(R func(T))</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_map&lt;R&gt;(func);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class R&gt; <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; <span class="title">map</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::function&lt;R(T)&gt; &amp;func)</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_map&lt;R&gt;(func);&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">string</span>:</span><span class="built_in">std</span>::<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>;</span><br><span class="line">        <span class="built_in">string</span>():<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;&quot;</span>)&#123;&#125;</span><br><span class="line">        <span class="built_in">string</span>(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;plain):<span class="built_in">std</span>::<span class="built_in">string</span>(plain)&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;vet)</span> <span class="keyword">const</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;dim)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;empty())<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">          <span class="keyword">char</span> *src=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;length()+<span class="number">1</span>];</span><br><span class="line">          <span class="built_in">strcpy</span>(src,<span class="keyword">this</span>-&gt;c_str());</span><br><span class="line">          <span class="keyword">char</span> *tar=<span class="keyword">new</span> <span class="keyword">char</span>[dim.length()+<span class="number">1</span>];</span><br><span class="line">          <span class="built_in">strcpy</span>(tar,dim.c_str());</span><br><span class="line">          <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; rsp;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">char</span> *pos=strtok(src,tar);pos;pos=strtok(<span class="literal">nullptr</span>,tar))</span><br><span class="line">            rsp.push_back(<span class="built_in">string</span>(pos));</span><br><span class="line">          <span class="keyword">delete</span>[] src;</span><br><span class="line">          <span class="keyword">delete</span>[] tar;</span><br><span class="line">          <span class="keyword">return</span> rsp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        template&lt;class... Args&gt; static inline string format(const char *fm,Args... args)&#123;</span><br><span class="line">          <span class="keyword">int</span> len=<span class="built_in">snprintf</span>(<span class="literal">nullptr</span>,<span class="number">0</span>,fm,args...);</span><br><span class="line">          <span class="keyword">char</span> *buf=<span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">          <span class="built_in">snprintf</span>(buf,len+<span class="number">1</span>,fm,args...);</span><br><span class="line">          <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(buf)</span></span>;</span><br><span class="line">          <span class="keyword">delete</span>[] buf;</span><br><span class="line">          <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        template&lt;class... Args&gt; static inline string format(const string &amp;fm,Args... args)&#123;</span><br><span class="line">          <span class="keyword">return</span> format(fm.c_str(),args...);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> __to_string(T)                 \</span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123; \</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::to_string(x);          \</span><br><span class="line">      &#125;</span><br><span class="line">      __float_mapper(__to_string)</span><br><span class="line">      __integer_mapper(__to_string)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> __to_string</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>&#123;<span class="keyword">return</span> s;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s);&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> mem::modint::Z&lt;mod&gt; &amp;v)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::to_string(v.x);&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;ctn)</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;[&quot;</span>+<span class="built_in">string</span>(<span class="string">&quot;,&quot;</span>).join(ctn)+<span class="string">&quot;]&quot;</span>;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">set</span>&lt;T&gt; &amp;ctn)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> result=<span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:ctn)&#123;</span><br><span class="line">          <span class="keyword">if</span>(flag)result+=<span class="string">&quot;,&quot;</span>;</span><br><span class="line">          flag=<span class="literal">true</span>;</span><br><span class="line">          result+=to_string(it);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class T1,class T2&gt; inline string to_string(const map&lt;T1,T2&gt; &amp;ctn)&#123;</span><br><span class="line">        <span class="built_in">string</span> result=<span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:ctn)&#123;</span><br><span class="line">          <span class="keyword">if</span>(flag)result+=<span class="string">&quot;,&quot;</span>;</span><br><span class="line">          flag=<span class="literal">true</span>;</span><br><span class="line">          result+=to_string(it.first)+<span class="string">&quot;:&quot;</span>+to_string(it.second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">string::join</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;vet)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vet.size())<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> res=to_string(vet[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">1</span>;i&lt;vet.size();i++)&#123;</span><br><span class="line">          res+=*<span class="keyword">this</span>;</span><br><span class="line">          res+=to_string(vet[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">const</span> <span class="keyword">char</span> *s)&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s);&#125;</span><br><span class="line">      <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">const</span> <span class="keyword">char</span> *s,<span class="keyword">size_t</span> len)&#123;<span class="keyword">return</span> <span class="built_in">string</span>(s,len);&#125;</span><br><span class="line">      <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">long</span> <span class="keyword">double</span> x)&#123;<span class="keyword">return</span> to_string(x);&#125;</span><br><span class="line">      <span class="keyword">inline</span> <span class="built_in">string</span> <span class="keyword">operator</span> <span class="string">&quot;&quot;</span> _s(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x)&#123;<span class="keyword">return</span> to_string(x);&#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> io&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_IO</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_FASTIO</span></span><br><span class="line">      <span class="keyword">namespace</span> fastio&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> BUFFER=<span class="number">1</span>&lt;&lt;<span class="number">18</span>;</span><br><span class="line">        <span class="keyword">char</span> ibuf[BUFFER],*iS,*iT;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(iS==iT)&#123;</span><br><span class="line">            iT=(iS=ibuf)+fread(ibuf,<span class="number">1</span>,BUFFER,<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="keyword">return</span> iS==iT?EOF:*iS++;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> *iS++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> obuf[BUFFER],*oS=obuf,*oT=oS+BUFFER<span class="number">-1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;</span><br><span class="line">          fwrite(obuf,<span class="number">1</span>,oS-obuf,<span class="built_in">stdout</span>);</span><br><span class="line">          oS=obuf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">          *oS++=x;</span><br><span class="line">          <span class="keyword">if</span>(oS==oT)flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Flusher</span>&#123;</span>~Flusher()&#123;flush();&#125;&#125;flusher;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">using</span> fastio::getc;</span><br><span class="line">      <span class="keyword">using</span> fastio::putc;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> getchar();&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readDigit</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">        x=getc();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x))x=getc();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">readDigit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        readDigit(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readAlpha</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">        x=getc();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(x))x=getc();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">readAlpha</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        readAlpha(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> __read(T)                             \</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;                  \</span><br><span class="line">          x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> c=getc();           \</span><br><span class="line">          <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getc();   \</span><br><span class="line">          <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getc(); \</span><br><span class="line">          <span class="keyword">if</span>(f)x=-x;                              \</span><br><span class="line">        &#125;</span><br><span class="line">      __integer_mapper(__read)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> __read</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> &amp;x)</span></span>&#123;x=getc();&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c=getc();</span><br><span class="line">        <span class="keyword">while</span>(~c&amp;&amp;!<span class="built_in">isspace</span>(c))*s++=c,c=getc();</span><br><span class="line">        *s++=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(container::<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c=getc();</span><br><span class="line">        s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(~c&amp;&amp;!<span class="built_in">isspace</span>(c))s+=c,c=getc();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T</span>=<span class="keyword">int</span>&gt; <span class="function"><span class="keyword">inline</span> T <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        T x;</span><br><span class="line">        read(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class T,class... Args&gt; inline void read(T &amp;x,Args &amp;... args)&#123;</span><br><span class="line">        read(x),read(args...);</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> __print(T)           \</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;  \</span><br><span class="line">          <span class="keyword">if</span>(x&lt;<span class="number">0</span>)putc(<span class="string">&#x27;-&#x27;</span>),x=-x; \</span><br><span class="line">          <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);    \</span><br><span class="line">          putc(<span class="string">&#x27;0&#x27;</span>+x%<span class="number">10</span>);        \</span><br><span class="line">        &#125;</span><br><span class="line">      __integer_mapper(__print)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> __print</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;putc(x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)putc(s[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> container::<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)putc(s[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      template&lt;class T,class... Args&gt; inline void print(const T &amp;x,Args... args)&#123;</span><br><span class="line">        print(x),print(args...);</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class... Args&gt; inline void println(Args... args)&#123;</span><br><span class="line">        print(args...),putc(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      template&lt;class... Args&gt; inline void printfm(const char *formatter,Args... arguments)&#123;</span><br><span class="line">        print(container::<span class="built_in">string</span>().format(formatter,arguments...));</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class... Args&gt; inline void printfm(const container::string &amp;formatter,Args... arguments)&#123;</span><br><span class="line">        print(container::<span class="built_in">string</span>().format(formatter,arguments...));</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">namespace</span> logger&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_LOGGER</span></span><br><span class="line">      <span class="class"><span class="keyword">enum</span> <span class="title">ConsoleColor</span>&#123;</span></span><br><span class="line">        NOPE=<span class="number">-1</span>,BLACK,RED,GREEN,YELLOW,BLUE,PURPLE,DEEPBLUE</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> ConsoleColor color</span>=NOPE,class... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *formatter,Args... args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(~color)&#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[%dm&quot;</span>,<span class="number">30</span>+color);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> ConsoleColor color</span>=NOPE,class... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">logln</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *formatter,Args... args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(~color)&#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[%dm&quot;</span>,<span class="number">30</span>+color);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\033[0m\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,formatter,args...);</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">logs</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,container::to_string(x).c_str());</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class T,class... Args&gt; inline void logs(const T &amp;x,Args... args)&#123;</span><br><span class="line">        logs(x),logs(args...);</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class... Args&gt; inline void logsln(Args... args)&#123;</span><br><span class="line">        logs(args...);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __integer_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __float_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __string_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __string_join_mapper</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> io;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> math;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> utils;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> modint;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> random;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> stdval;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> logger;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> container;</span><br><span class="line">&#125; <span class="comment">// namespace mem</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem::io;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem::math;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem::utils;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem::logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">10</span>,sqn=<span class="number">600</span>,S=sqn+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,bn,a[N],bln[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">atom</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> l,r,c;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> atom <span class="keyword">operator</span>+(<span class="keyword">const</span> atom &amp;a,<span class="keyword">const</span> atom &amp;b)&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.l==a.c&amp;&amp;b.l==b.c)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.l+b.l,a.r+b.r,a.c+b.c,a.s+b.s+a.c*b.c&#125;;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a.l==a.c)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.l+b.l,b.r,a.c+b.c,a.s+b.s+a.c*b.l&#125;;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b.l==b.c)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.l,a.r+b.r,a.c+b.c,a.s+b.s+a.r*b.c&#125;;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.l,b.r,a.c+b.c,a.s+b.s+a.r*b.l&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> atom <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">  atom res&#123;<span class="number">0</span>,<span class="number">0</span>,r-l+<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">while</span>(res.l&lt;res.c&amp;&amp;a[l+res.l]&lt;=x)res.l++;</span><br><span class="line">  <span class="keyword">while</span>(res.r&lt;res.c&amp;&amp;a[r-res.r]&lt;=x)res.r++;</span><br><span class="line">  <span class="keyword">int</span> pre=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)<span class="keyword">if</span>(a[i]&lt;=x)res.s+=++pre; <span class="keyword">else</span> pre=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> atom c[<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> anc[S],siz[S],tag[S];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> anc[x]==x?x:anc[x]=find(anc[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">long</span> <span class="keyword">long</span> &amp;s)</span></span>&#123;</span><br><span class="line">  a=find(a),b=find(b),s+=siz[a]*siz[b];</span><br><span class="line">  <span class="keyword">if</span>(siz[a]&gt;siz[b])swap(a,b);</span><br><span class="line">  anc[a]=b,siz[b]+=siz[a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> l,r,n,val[S],pos[S];</span><br><span class="line">  atom pre[S];</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">loc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> upper_bound(val+<span class="number">1</span>,val+n+<span class="number">1</span>,x)-val<span class="number">-1</span>;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=r-l+<span class="number">1</span>;</span><br><span class="line">    pre[<span class="number">0</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,n,<span class="number">0</span>&#125;;</span><br><span class="line">    pre[n]=&#123;n,n,n,(<span class="keyword">long</span> <span class="keyword">long</span>)n*(n<span class="number">-1</span>)/<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)pre[i].c=n;</span><br><span class="line">    std::vector&lt;std::pair&lt;int,int&gt;&gt; t(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)t[i]=&#123;a[i+l],i&#125;;</span><br><span class="line">    sort(t.begin(),t.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)val[i]=t[i<span class="number">-1</span>].first,pos[i]=t[i<span class="number">-1</span>].second;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(pos[i]==k)&#123;</span><br><span class="line">      val[i]=a[k+l];</span><br><span class="line">      <span class="keyword">while</span>(i&gt;<span class="number">1</span>&amp;&amp;val[i]&lt;val[i<span class="number">-1</span>])swap(val[i],val[i<span class="number">-1</span>]),swap(pos[i],pos[i<span class="number">-1</span>]),i--;</span><br><span class="line">      <span class="keyword">while</span>(i&lt;n&amp;&amp;val[i]&gt;val[i+<span class="number">1</span>])swap(val[i],val[i+<span class="number">1</span>]),swap(pos[i],pos[i+<span class="number">1</span>]),i++;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">      pre[i].l=min(pre[i+<span class="number">1</span>].l,pos[i+<span class="number">1</span>]);</span><br><span class="line">      pre[i].r=min(pre[i+<span class="number">1</span>].r,n-pos[i+<span class="number">1</span>]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)anc[i]=i,siz[i]=<span class="number">1</span>,tag[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      pre[i].s=i?pre[i<span class="number">-1</span>].s+<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">      tag[pos[i]]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(pos[i]&amp;&amp;tag[pos[i]<span class="number">-1</span>])merge(pos[i]<span class="number">-1</span>,pos[i],pre[i].s);</span><br><span class="line">      <span class="keyword">if</span>(pos[i]&lt;n<span class="number">-1</span>&amp;&amp;tag[pos[i]+<span class="number">1</span>])merge(pos[i]+<span class="number">1</span>,pos[i],pre[i].s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;s[N/sqn+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bas,_mem[N*<span class="number">12</span>],*_p=_mem;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FC</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> n,*arr,*l,*r;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">source</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="built_in">memcpy</span>(arr+<span class="number">1</span>,s[i].val+<span class="number">1</span>,n&lt;&lt;<span class="number">2</span>);&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">land</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="keyword">if</span>(n)<span class="keyword">this</span>-&gt;n=n,arr=_p,_p+=n+<span class="number">3</span>,l=_p,_p+=n+<span class="number">1</span>,r=_p,_p+=n+<span class="number">1</span>,arr[n+<span class="number">1</span>]=arr[n+<span class="number">2</span>]=<span class="number">1e9</span>;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">const</span> FC &amp;a,<span class="keyword">const</span> FC &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> PushI &#123;<span class="meta-keyword">if</span>(!c)arr[++n]=a.arr[i++],l[n]=i-1,r[n]=j-1; <span class="meta-keyword">else</span> ++i; c=(c+1)&amp;3;&#125;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> PushJ &#123;<span class="meta-keyword">if</span>(!c)arr[++n]=b.arr[j++],l[n]=i-1,r[n]=j-1; <span class="meta-keyword">else</span> ++j; c=(c+1)&amp;3;&#125;</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>,c=<span class="number">0</span>;n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=a.n&amp;&amp;j&lt;=b.n)<span class="keyword">if</span>(a.arr[i]&lt;b.arr[j])PushI <span class="keyword">else</span> PushJ;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=a.n)PushI;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=b.n)PushJ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;n=%d\n&quot;</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">log</span>&lt;RED&gt;(<span class="string">&quot;%d%c&quot;</span>,arr[i],<span class="string">&quot; \n&quot;</span>[i==n]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">log</span>&lt;BLUE&gt;(<span class="string">&quot;%d%c&quot;</span>,l[i],<span class="string">&quot; \n&quot;</span>[i==n]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">log</span>&lt;GREEN&gt;(<span class="string">&quot;%d%c&quot;</span>,r[i],<span class="string">&quot; \n&quot;</span>[i==n]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;tr[S&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> res[S&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> use[S&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">locate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> Loc res[i]+=tr[i].arr[res[i]+2]&lt;=x?2:0,res[i]+=tr[i].arr[res[i]+1]&lt;=x</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bn;i++)use[bas+i]=l&lt;=i&amp;&amp;i&lt;=r;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=bas;i&gt;=<span class="number">1</span>;i--)use[i]=use[i&lt;&lt;<span class="number">1</span>]||use[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">  res[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bas;i++)<span class="keyword">if</span>(use[i])&#123;</span><br><span class="line">    Loc;</span><br><span class="line">    res[i&lt;&lt;<span class="number">1</span>]=tr[i].l[res[i]];</span><br><span class="line">    res[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=tr[i].r[res[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=l+bas;i&lt;=r+bas;i++)Loc;</span><br><span class="line">  <span class="comment">// for(int i=l;i&lt;=r;i++)log(&quot;%d%c&quot;,tr[i+bas].k,&quot; \n&quot;[i==r]);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0 </span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">&quot;1.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  read(n,m);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)read(a[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)bln[i]=(i<span class="number">-1</span>)/sqn+<span class="number">1</span>;</span><br><span class="line">  bn=bln[n];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s[bln[i]].r=i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)s[bln[i]].l=i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bn;i++)s[i].init(),s[i].build();</span><br><span class="line">  <span class="built_in">log</span>&lt;RED&gt;(<span class="string">&quot;block=%d\n&quot;</span>,bn);</span><br><span class="line">  <span class="keyword">for</span>(bas=<span class="number">1</span>;bas&lt;=bn;bas&lt;&lt;=<span class="number">1</span>);--bas;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bn;i++)tr[bas+i].land(s[i].n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=bas;i&gt;=<span class="number">1</span>;i--)tr[i].land((tr[i&lt;&lt;<span class="number">1</span>].n+tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].n+<span class="number">3</span>)&gt;&gt;<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bn;i++)tr[bas+i].source(i);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=bas;i&gt;=<span class="number">1</span>;i--)tr[i].merge(tr[i&lt;&lt;<span class="number">1</span>],tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">  <span class="comment">// for(int i=1;i&lt;=bas+n;i++)tr[i].out();</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> o,l,r,x,y,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    read(o);</span><br><span class="line">    <span class="keyword">if</span>(o==<span class="number">1</span>)&#123;</span><br><span class="line">      read(x,y);</span><br><span class="line">      a[x]=y;</span><br><span class="line">      s[bln[x]].modify(x-s[bln[x]].l);</span><br><span class="line">      s[bln[x]].build();</span><br><span class="line">      tr[bas+bln[x]].source(bln[x]);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=(bas+bln[x])&gt;&gt;<span class="number">1</span>;i&gt;=<span class="number">1</span>;i&gt;&gt;=<span class="number">1</span>)tr[i].merge(tr[i&lt;&lt;<span class="number">1</span>],tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      read(l,r,x);</span><br><span class="line">      atom ans;</span><br><span class="line">      <span class="keyword">if</span>(bln[l]==bln[r])&#123;</span><br><span class="line">        ans=calc(l,r,x);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ans=calc(l,s[bln[l]].r,x);</span><br><span class="line">        <span class="keyword">if</span>(bln[l]+<span class="number">1</span>&lt;=bln[r]<span class="number">-1</span>)locate(x,bln[l]+<span class="number">1</span>,bln[r]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=bln[l]+<span class="number">1</span>;i&lt;=bln[r]<span class="number">-1</span>;i++)ans=ans+s[i].pre[res[i+bas]];</span><br><span class="line">        ans=ans+calc(s[bln[r]].l,r,x);</span><br><span class="line">      &#125;</span><br><span class="line">      print(ans.s,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if(i%10000==0)fprintf(stderr,&quot;clocks: %.4lf\n&quot;,clock()/(double)CLOCKS_PER_SEC);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;clocks: %.4lf\n&quot;</span>,clock()/(<span class="keyword">double</span>)CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 分散层叠 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「UR #8」宿命多项式</title>
      <link href="uoj120/"/>
      <url>uoj120/</url>
      
        <content type="html"><![CDATA[<p>给定 $n$ 和 $c_{0\ldots n}$，表示限制形如对于 $0 \leq i \leq n$ 都满足 $1 \leq f(i) \leq c_i$。</p><p>其中 $f(x) = \sum_{i=0}^{n} a_i x^i$，其中 $a_{0 \ldots n}$ 都是整数，即 $f(x)$ 是一个不超过 $n$ 次的整系数多项式。</p><p>问满足限制的 $f(x)$ 有多少个，答案对 $998244353$ 取模。</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑把 $1 \leq f(i) \leq c_i$ 的限制转换为 $0 \leq f(i) &lt; c_i$，且将 $f(x)$ 转化为下降幂多项式。注意到这些转化不会影响到答案。</p><p>我们令 $a_i = x_i (n-i)! + y_i$，考虑枚举 $y_i$ 后怎么计算答案。</p><p>我们提出其中一项式子：</p><script type="math/tex; mode=display">0 \leq a_0 + k a_1 + k^{\underline 2}a_2 + k^{\underline 3} a_3 + \cdots + k! a_k < c_k</script><p>把前半部分设为 $d_k$，则有：</p><script type="math/tex; mode=display">0 \leq d_k + k!a_k < c_k</script><p>代入 $a_k = x_k (n-k)! + y_k$ 得：</p><script type="math/tex; mode=display">0 \leq d_k + k!(x_k (n-k)! + y_k) < c_k</script><p>其中 $y_k$ 是我们已经枚举的整数，故只需要考虑对 $x_k$ 计数即可。</p><script type="math/tex; mode=display">-d_k - k! y_k \leq k!(n-k)! x_k < c_k - d_k - k! y_k</script><p>答案显然是在 $\frac {c_k} {k!(n-k)!}$ 的级别，但是会有 $\pm 1$ 的偏差，取决于不等式两边在模意义下的大小，具体地（令 $C=d_k+ k!y_k ,\ M = k!(n-k)!$）：</p><script type="math/tex; mode=display">\operatorname{count}(x_k)= \begin{cases}    \lfloor \frac {c_k} {M} \rfloor & (C \bmod M \leq c_k + C \bmod M) \\    \lfloor \frac {c_k} {M} \rfloor +1 & (C \bmod M > c_k + C \bmod M) \\\end{cases}</script><p>我们现在考察 $C\bmod M$ 的关系，$k!y_k$ 的贡献是已知常数，考虑：</p><script type="math/tex; mode=display">d_k= \sum_{i=0}^{k-1} a_i k^{\underline i} = \sum_{i=0}^{k-1} (x_i(n-i)! + y_i) k^{\underline i}</script><p>注意到 $(n-i)!k^{\underline i}$ 是 $M$ 的倍数，故 $C \bmod M$ 只和 $y_{0 \ldots k}$ 有关。</p><p>可以通过枚举 $y_{0 \ldots n}$ 后计算，时间复杂度 $O(n \times n! \times (n-1)! \times \cdots \times 1!)$。</p><p>虽然理论上来说是不能过的但是可以通过巨大多常数优化草过去，实际表现还是跑的挺快的。（竟然比以小常数著名的 zx2003 学长快！）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;Ofast,no-stack-protector,unroll-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">&quot;sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,fma,tune=native&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mem&#123; <span class="comment">//v1.8.5 =&gt; size: 13.21KiB</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_IO</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_STR</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_MATH</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_UTILS</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_MODINT</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_RANDOM</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_STDVAL</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> MEM_CONTAINER</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM_FASTIO</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> __SIZEOF_INT128__</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM_INT128</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __integer_mapper(func)     \</span></span><br><span class="line">      func(<span class="keyword">int</span>)                      \</span><br><span class="line">      func(<span class="keyword">unsigned</span> <span class="keyword">int</span>)             \</span><br><span class="line">      func(<span class="keyword">long</span> <span class="keyword">long</span>)                \</span><br><span class="line">      func(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __float_mapper(func)       \</span></span><br><span class="line">      func(<span class="keyword">float</span>)                    \</span><br><span class="line">      func(<span class="keyword">double</span>)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __string_mapper(func) \</span></span><br><span class="line">      func(<span class="keyword">char</span> *)              \</span><br><span class="line">      func(<span class="built_in">string</span> &amp;)            \</span><br><span class="line">      func(<span class="built_in">std</span>::<span class="built_in">string</span> &amp;)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __string_join_mapper(func)                                              \</span></span><br><span class="line">      func(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;,<span class="built_in">string</span>)                                                 \</span><br><span class="line">      func(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;,<span class="built_in">string</span>)                                            \</span><br><span class="line">      template&lt;class T&gt; func(vector&lt;T&gt;,to_string)                                 \</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="title">func</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;,to_string)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_STDVAL</span></span></span><br><span class="line"><span class="function">    <span class="keyword">namespace</span> stdval</span>&#123;</span><br><span class="line">      <span class="keyword">using</span> i32=<span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> i64=<span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">      <span class="keyword">using</span> u32=<span class="keyword">unsigned</span> <span class="keyword">int</span>;</span><br><span class="line">      <span class="keyword">using</span> u64=<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">      <span class="keyword">using</span> f32=<span class="keyword">float</span>;</span><br><span class="line">      <span class="keyword">using</span> f64=<span class="keyword">double</span>;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">      <span class="keyword">using</span> i128=<span class="keyword">__int128_t</span>;</span><br><span class="line">      <span class="keyword">using</span> u128=<span class="keyword">__uint128_t</span>;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_UTILS</span></span><br><span class="line">    <span class="keyword">namespace</span> utils&#123;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::tie;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::sort;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::unique;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::reverse;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::shuffle;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::function;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">make_pair</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::make_tuple;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::lower_bound;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::upper_bound;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::max_element;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::min_element;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_IO</span></span><br><span class="line">    <span class="keyword">namespace</span> io&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_FASTIO</span></span><br><span class="line">      <span class="keyword">namespace</span> fastio&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> BUFFER=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line">        <span class="keyword">char</span> ibuf[BUFFER],*iS,*iT;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(iS==iT)&#123;</span><br><span class="line">            iT=(iS=ibuf)+fread(ibuf,<span class="number">1</span>,BUFFER,<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="keyword">return</span> iS==iT?EOF:*iS++;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> *iS++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> obuf[BUFFER],*oS=obuf,*oT=oS+BUFFER<span class="number">-1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;</span><br><span class="line">          fwrite(obuf,<span class="number">1</span>,oS-obuf,<span class="built_in">stdout</span>);</span><br><span class="line">          oS=obuf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">          *oS++=x;</span><br><span class="line">          <span class="keyword">if</span>(oS==oT)flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Flusher</span>&#123;</span>~Flusher()&#123;flush();&#125;&#125;flusher;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">using</span> fastio::getc;</span><br><span class="line">      <span class="keyword">using</span> fastio::putc;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> getchar();&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readDigit</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">        x=getc();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x))x=getc();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">readDigit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        readDigit(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readAlpha</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">        x=getc();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(x))x=getc();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">readAlpha</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        readAlpha(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readInt</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> c=getc();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getc();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getc();</span><br><span class="line">        <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __read(T)                             \</span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;                  \</span><br><span class="line">        x=<span class="number">0</span>; <span class="keyword">bool</span> f=<span class="number">0</span>; <span class="keyword">char</span> c=getc();           \</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getc();   \</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getc(); \</span><br><span class="line">        <span class="keyword">if</span>(f)x=-x;                              \</span><br><span class="line">      &#125;</span><br><span class="line">      __integer_mapper(__read)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __read</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> &amp;x)</span></span>&#123;x=getc();&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T</span>=<span class="keyword">int</span>&gt; <span class="function"><span class="keyword">inline</span> T <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        T x;</span><br><span class="line">        read(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class T,class... Args&gt; inline void read(T &amp;x,Args &amp;... args)&#123;</span><br><span class="line">        read(x),read(args...);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __print(T)           \</span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;  \</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)putc(<span class="string">&#x27;-&#x27;</span>),x=-x; \</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);    \</span><br><span class="line">        putc(<span class="string">&#x27;0&#x27;</span>+x%<span class="number">10</span>);        \</span><br><span class="line">      &#125;</span><br><span class="line">      __integer_mapper(__print)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __print</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;putc(x);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)putc(s[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)putc(s[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      template&lt;class T,class... Args&gt; inline void print(const T &amp;x,Args... args)&#123;</span><br><span class="line">        print(x),print(args...);</span><br><span class="line">      &#125;</span><br><span class="line">      template&lt;class... Args&gt; inline void println(Args... args)&#123;</span><br><span class="line">        print(args...),putc(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_RANDOM</span></span><br><span class="line">    <span class="keyword">namespace</span> random&#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> LuckyNumber=<span class="number">20040725</span>;</span><br><span class="line">      <span class="function"><span class="built_in">std</span>::mt19937 <span class="title">rng</span><span class="params">(LuckyNumber^<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">      <span class="function"><span class="built_in">std</span>::mt19937_64 <span class="title">rng64</span><span class="params">(LuckyNumber^<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">rand</span><span class="params">(T l,T r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::uniform_int_distribution&lt;T&gt;(l,r)(rng);&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">rand64</span><span class="params">(T l,T r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::uniform_int_distribution&lt;T&gt;(l,r)(rng);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_MODINT</span></span><br><span class="line">    <span class="keyword">namespace</span> modint&#123;</span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="class"><span class="keyword">struct</span> <span class="title">Z</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">Z</span><span class="params">()</span></span>&#123;x=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">Z</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;x=t;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>-=(Z a)&#123;(x-=a.x)&lt;<span class="number">0</span>&amp;&amp;(x+=mod);&#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>+=(Z a)&#123;(x+=a.x)&gt;=mod&amp;&amp;(x-=mod);&#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>*=(Z a)&#123;x=(<span class="keyword">long</span> <span class="keyword">long</span>)x*a.x%mod;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>*(Z a,Z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>-(Z a,Z b)&#123;<span class="keyword">return</span> ((a.x-=b.x)&lt;<span class="number">0</span>&amp;&amp;(a.x+=mod)),a;&#125;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">inline</span> Z <span class="keyword">operator</span>+(Z a,Z b)&#123;<span class="keyword">return</span> ((a.x+=b.x)&gt;=mod&amp;&amp;(a.x-=mod)),a;&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> Z&lt;mod&gt; <span class="title">finv</span><span class="params">(Z&lt;mod&gt; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.x&lt;<span class="number">2</span>)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">return</span> (mod-mod/x.x)*finv(mod%x.x);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> Z&lt;mod&gt; <span class="title">fpow</span><span class="params">(Z&lt;mod&gt; a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        Z &lt;mod&gt; s=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)</span><br><span class="line">          <span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_inverse</span><span class="params">(<span class="keyword">int</span> n,Z&lt;mod&gt; *inv)</span></span>&#123;</span><br><span class="line">        inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)inv[i]=(mod-mod/i)*inv[mod%i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_factorial</span><span class="params">(<span class="keyword">int</span> n,Z&lt;mod&gt; *fac,Z&lt;mod&gt; *ifac)</span></span>&#123;</span><br><span class="line">        fac[<span class="number">0</span>]=<span class="number">1</span>,init_inverse(n,ifac);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)fac[i]=fac[i<span class="number">-1</span>]*i,ifac[i]=ifac[i<span class="number">-1</span>]*ifac[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_MATH</span></span><br><span class="line">    <span class="keyword">namespace</span> math&#123;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::max;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">abs</span><span class="params">(T x)</span></span>&#123;<span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">gcd</span><span class="params">(T n,T m)</span></span>&#123;<span class="keyword">return</span> m?gcd(m,n%m):n;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">lcm</span><span class="params">(T n,T m)</span></span>&#123;<span class="keyword">return</span> n/gcd(n,m)*m;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">const</span> stdval::u64 p&gt; <span class="class"><span class="keyword">struct</span> <span class="title">FastDiv</span>&#123;</span></span><br><span class="line">        stdval::u64 t,i;</span><br><span class="line">        inline FastDiv():t(stdval::u64(-1)/p),i(mul_inv(p))&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(stdval::u64 n)</span></span>&#123;<span class="keyword">return</span> n*i&lt;=t;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(stdval::i64 n)</span></span>&#123;<span class="keyword">return</span> stdval::u64(n&lt;<span class="number">0</span>?-n:n)*i&lt;=t;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> stdval::u64 <span class="title">mul_inv</span><span class="params">(stdval::u64 n)</span></span>&#123;</span><br><span class="line">          stdval::u64 x=n;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i)x*=<span class="number">2</span>-n*x;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_INT128</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">const</span> stdval::u64 b&gt; <span class="class"><span class="keyword">struct</span> <span class="title">FastMod</span>&#123;</span></span><br><span class="line">        stdval::u64 m;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="title">FastMod</span><span class="params">()</span>:<span class="title">m</span><span class="params">(stdval::u64((stdval::u128(<span class="number">1</span>)&lt;&lt;<span class="number">64</span>)/b))</span></span>&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> stdval::u64 <span class="title">reduce</span><span class="params">(stdval::u64 a)</span></span>&#123;</span><br><span class="line">          stdval::u64 q=(stdval::u64)((stdval::u128(m)*a)&gt;&gt;<span class="number">64</span>);</span><br><span class="line">          stdval::u64 r=a-q*b;</span><br><span class="line">          <span class="keyword">return</span> r&gt;=b?r-b:r;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_CONTAINER</span></span><br><span class="line">    <span class="keyword">namespace</span> container&#123;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">pair</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::tuple;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">set</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_set</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">map</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::tie;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">make_pair</span>;</span><br><span class="line">      <span class="keyword">using</span> <span class="built_in">std</span>::make_tuple;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">vector</span>:</span><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;::<span class="built_in">vector</span>;</span><br><span class="line">        <span class="built_in">vector</span>():<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;()&#123;&#125;</span><br><span class="line">        <span class="built_in">vector</span>(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; &amp;plain):<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;(plain)&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> s=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(~s)<span class="keyword">this</span>-&gt;resize(s);</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;size();i++)&#123;</span><br><span class="line">            io::read(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> pt0=<span class="string">&#x27; &#x27;</span>,<span class="keyword">char</span> pt1=<span class="string">&#x27;\n&#x27;</span>)</span></span>&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;size();i++)&#123;</span><br><span class="line">            io::print(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i));</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;<span class="keyword">this</span>-&gt;size())io::putc(pt0);</span><br><span class="line">          &#125;</span><br><span class="line">          io::putc(pt1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>&#123;<span class="built_in">std</span>::sort(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end());&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">concat</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span> &amp;rhs)</span></span>&#123;<span class="keyword">this</span>-&gt;insert(<span class="keyword">this</span>-&gt;end(),rhs.begin(),rhs.end());&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">includes</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::find(<span class="keyword">this</span>-&gt;begin(),<span class="keyword">this</span>-&gt;end(),x)!=<span class="keyword">this</span>-&gt;end();&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="built_in">vector</span> <span class="title">slice</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">          <span class="keyword">if</span>(r&lt;<span class="keyword">this</span>-&gt;size())<span class="keyword">return</span> <span class="built_in">vector</span>(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;begin()+r);</span><br><span class="line">          <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rsp=(<span class="keyword">this</span>-&gt;begin()+l,<span class="keyword">this</span>-&gt;end());</span><br><span class="line">          <span class="keyword">return</span> rsp.resize(r-l),rsp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">from</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">set</span>&lt;T&gt; &amp;src)</span></span>&#123;</span><br><span class="line">          <span class="keyword">this</span>-&gt;resize(src.size());</span><br><span class="line">          <span class="keyword">auto</span> it=<span class="keyword">this</span>-&gt;begin();</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">const</span> T e:src)*it++=e;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class Function&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Function func)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:*<span class="keyword">this</span>)func(it);&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>,<span class="keyword">class</span> <span class="title">Function</span>&gt;</span> <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; _map(Function func) <span class="keyword">const</span>&#123;</span><br><span class="line">          <span class="built_in">vector</span> &lt;R&gt; res(<span class="keyword">this</span>-&gt;size());</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;size();i++)</span><br><span class="line">            res[i]=func(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i));</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class R&gt; <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; <span class="title">map</span><span class="params">(R func(T))</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_map&lt;R&gt;(func);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">template</span>&lt;class R&gt; <span class="keyword">inline</span> <span class="built_in">vector</span>&lt;R&gt; <span class="title">map</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::function&lt;R(T)&gt; &amp;func)</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_map&lt;R&gt;(func);&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_STR</span></span><br><span class="line">    <span class="keyword">namespace</span> str &#123;</span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">namespace</span> mem::container;</span><br><span class="line"></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">string</span>:</span><span class="built_in">std</span>::<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>;</span><br><span class="line">        <span class="built_in">string</span>():<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;&quot;</span>)&#123;&#125;</span><br><span class="line">        <span class="built_in">string</span>(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;plain):<span class="built_in">std</span>::<span class="built_in">string</span>(plain)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __join_declaration(Vector,_)            \</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> Vector &amp;)</span> <span class="keyword">const</span></span>;</span><br><span class="line">        __string_join_mapper(__join_declaration)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __join_declaration</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;delim)</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;empty())<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">          <span class="keyword">char</span> *src=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;length()+<span class="number">1</span>];</span><br><span class="line">          <span class="built_in">strcpy</span>(src,<span class="keyword">this</span>-&gt;c_str());</span><br><span class="line">          <span class="keyword">char</span> *tar=<span class="keyword">new</span> <span class="keyword">char</span>[delim.length()+<span class="number">1</span>];</span><br><span class="line">          <span class="built_in">strcpy</span>(tar,delim.c_str());</span><br><span class="line">          <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; rsp;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">char</span> *pos=strtok(src,tar);pos;pos=strtok(<span class="literal">nullptr</span>,tar))</span><br><span class="line">            rsp.push_back(<span class="built_in">string</span>(pos));</span><br><span class="line">          <span class="keyword">delete</span>[] src;</span><br><span class="line">          <span class="keyword">delete</span>[] tar;</span><br><span class="line">          <span class="keyword">return</span> rsp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        template&lt;class... Args&gt; static inline string format(const char *fm,Args... args)&#123;</span><br><span class="line">          <span class="keyword">int</span> len=<span class="built_in">snprintf</span>(<span class="literal">nullptr</span>,<span class="number">0</span>,fm,args...);</span><br><span class="line">          <span class="keyword">char</span> *buf=<span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">          <span class="built_in">snprintf</span>(buf,len+<span class="number">1</span>,fm,args...);</span><br><span class="line">          <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(buf)</span></span>;</span><br><span class="line">          <span class="keyword">delete</span>[] buf;</span><br><span class="line">          <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        template&lt;class... Args&gt; static inline string format(const string &amp;fm,Args... args)&#123;</span><br><span class="line">          <span class="keyword">return</span> format(fm.c_str(),args...);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __to_string(T)                   \</span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>&#123; \</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::to_string(x);          \</span><br><span class="line">      &#125;</span><br><span class="line">      __float_mapper(__to_string)</span><br><span class="line">      __integer_mapper(__to_string)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __to_string</span></span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;vet)</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span>+<span class="built_in">string</span>(<span class="string">&quot;,&quot;</span>).join(vet)+<span class="string">&quot;&#125;&quot;</span>;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; &amp;vet)</span></span>&#123;<span class="keyword">return</span> to_string(<span class="built_in">vector</span>&lt;T&gt;(vet.begin(),vet.end()));&#125;</span><br><span class="line">      <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span> mod&gt; <span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> mem::modint::Z&lt;mod&gt; &amp;zval)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::to_string(zval.x);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __join_instantiation(Vector,to_string)          \</span></span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">string::join</span><span class="params">(<span class="keyword">const</span> Vector &amp;vet)</span><span class="keyword">const</span></span>&#123; \</span><br><span class="line">        <span class="keyword">if</span>(!vet.size())<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;                         \</span><br><span class="line">        <span class="built_in">string</span> res=to_string(vet[<span class="number">0</span>]);                     \</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">1</span>;i&lt;vet.size();i++)&#123;                 \</span><br><span class="line">          res+=*<span class="keyword">this</span>;                                     \</span><br><span class="line">          res+=to_string(vet[i]);                         \</span><br><span class="line">        &#125;                                                 \</span><br><span class="line">        <span class="keyword">return</span> res;                                       \</span><br><span class="line">      &#125;</span><br><span class="line">      __string_join_mapper(__join_instantiation)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __join_instantiation</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> str::<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;s.length();i++)mem::io::putc(s[i]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> __printfm(T)                                                      \</span></span><br><span class="line">      template&lt;class... Args&gt; inline void printfm(const T fm,Args... args)&#123; \</span><br><span class="line">        print(str::<span class="built_in">string</span>().format(fm,args...));                            \</span><br><span class="line">      &#125;</span><br><span class="line">      __string_mapper(__printfm)</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __printfm</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __integer_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __float_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __string_mapper</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">undef</span> __string_join_mapper</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_IO</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> io;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_STR</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> str;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_MATH</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> math;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_UTILS</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> utils;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_MODINT</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> modint;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_RANDOM</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> random;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_STDVAL</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> stdval;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> MEM_CONTAINER</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> container;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; <span class="comment">// namespace mem</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10</span>,F=<span class="number">10000</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> fac[N]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">120</span>,<span class="number">720</span>,<span class="number">5040</span>,<span class="number">40320</span>,<span class="number">362880</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ifac[N]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">499122177</span>,<span class="number">166374059</span>,<span class="number">291154603</span>,<span class="number">856826403</span>,<span class="number">641926577</span>,<span class="number">376916469</span>,<span class="number">421456191</span>,<span class="number">712324701</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> down[N][N]=&#123;</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">120</span>,<span class="number">120</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">30</span>,<span class="number">120</span>,<span class="number">360</span>,<span class="number">720</span>,<span class="number">720</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">42</span>,<span class="number">210</span>,<span class="number">840</span>,<span class="number">2520</span>,<span class="number">5040</span>,<span class="number">5040</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">56</span>,<span class="number">336</span>,<span class="number">1680</span>,<span class="number">6720</span>,<span class="number">20160</span>,<span class="number">40320</span>,<span class="number">40320</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">9</span>,<span class="number">72</span>,<span class="number">504</span>,<span class="number">3024</span>,<span class="number">15120</span>,<span class="number">60480</span>,<span class="number">181440</span>,<span class="number">362880</span>,<span class="number">362880</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> z=mem::Z&lt;mod&gt;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem::io;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mem::modint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q,c[N],d[N],y[N],fit[N][F];</span><br><span class="line">z ans,cur[<span class="number">1</span>&lt;&lt;<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(u&gt;n)&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      x|=fit[i][d[i]]&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=cur[x];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fac[n-u];i++)&#123;</span><br><span class="line">    y[u]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=u;i&lt;=n;i++)d[i]+=y[u]*down[i][u];</span><br><span class="line">    dfs(u+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=u;i&lt;=n;i++)d[i]-=y[u]*down[i][u];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainVI</span><span class="params">()</span></span>&#123;</span><br><span class="line">  y[<span class="number">5</span>]=y[<span class="number">6</span>]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(y[<span class="number">0</span>]=<span class="number">0</span>;y[<span class="number">0</span>]&lt;fac[<span class="number">6</span>];y[<span class="number">0</span>]++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">6</span>;i++)d[i]+=y[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(y[<span class="number">1</span>]=<span class="number">0</span>;y[<span class="number">1</span>]&lt;fac[<span class="number">5</span>];y[<span class="number">1</span>]++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)d[i]+=y[<span class="number">1</span>]*down[i][<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span>(y[<span class="number">2</span>]=<span class="number">0</span>;y[<span class="number">2</span>]&lt;fac[<span class="number">4</span>];y[<span class="number">2</span>]++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">6</span>;i++)d[i]+=y[<span class="number">2</span>]*down[i][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(y[<span class="number">3</span>]=<span class="number">0</span>;y[<span class="number">3</span>]&lt;fac[<span class="number">3</span>];y[<span class="number">3</span>]++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">6</span>;i++)d[i]+=y[<span class="number">3</span>]*down[i][<span class="number">3</span>];</span><br><span class="line">          <span class="keyword">for</span>(y[<span class="number">4</span>]=<span class="number">0</span>;y[<span class="number">4</span>]&lt;fac[<span class="number">2</span>];y[<span class="number">4</span>]++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=<span class="number">6</span>;i++)d[i]+=y[<span class="number">4</span>]*down[i][<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">6</span>;i++)x|=fit[i][d[i]]&lt;&lt;i;</span><br><span class="line">            ans+=cur[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=<span class="number">6</span>;i++)d[i]-=y[<span class="number">4</span>]*down[i][<span class="number">4</span>];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">6</span>;i++)d[i]-=y[<span class="number">3</span>]*down[i][<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">6</span>;i++)d[i]-=y[<span class="number">2</span>]*down[i][<span class="number">2</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)d[i]-=y[<span class="number">1</span>]*down[i][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">6</span>;i++)d[i]-=y[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">for</span>(read(q);q--&gt;<span class="number">0</span>;ans=<span class="number">0</span>)&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)read(c[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;F;d++)&#123;</span><br><span class="line">        fit[i][d]=(c[i]+d)%(fac[i]*fac[n-i])&lt;d%(fac[i]*fac[n-i]);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;(<span class="number">1</span>&lt;&lt;(n+<span class="number">1</span>));x++)&#123;</span><br><span class="line">      cur[x]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">          cur[x]*=c[i]/(fac[i]*fac[n-i])+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          cur[x]*=c[i]/(fac[i]*fac[n-i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">6</span>)mainVI();</span><br><span class="line">    <span class="keyword">else</span> dfs(<span class="number">0</span>);</span><br><span class="line">    print((<span class="keyword">int</span>&amp;)ans,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造 </tag>
            
            <tag> 下降幂多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「CF1292F」Nora&#39;s Toy Boxes</title>
      <link href="cf1292f/"/>
      <url>cf1292f/</url>
      
        <content type="html"><![CDATA[<p>一个大小为 $n$ 的集合 $\{a_i\}_{i=1}^n$，每次可以选择 $(i,j,k)$，若 $a_i \mid a_j$ 且 $a_i \mid a_k$，可以将 $a_k$ 删去。</p><p>求能删除最多数的删除序列数，删除序列定义为对于一个三元组 $(i,j,k)$，每次删数把 $a_k$ 加入到删除序列中。</p><p>$1 \leq a_i, n \leq 60$，保证 $a_i$ 两两不同。</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑如果 $a_i \mid a_j$，就从 $i$ 到 $j$ 连一条边，这样形成的图是一个偏序集。不妨只考虑第一层的点，称为 $A$ 类点，其余的点称为 $B$ 类点。每次删除操作可以转化为，找到一个 $A$ 类点，存在 $\geq 2$ 的出度，就可以删掉其中任意一条出边指向的点。</p><p>对于任意一个由 $A$、$B$ 类点组成的非平凡弱联通块，一定存在一种删除方式使得是剩下其中的 $A$ 类点和某一个 $B$ 类点。这就是删除最多数的方案。</p><p>那么怎么统计方案数呢，我们枚举最后剩下的点，然后把删除操作倒过来做，变成加入操作。那么我们可以状压一个状态，是一个 $A$ 类点的集合，此时这些 $A$ 类点有至少 $1$ 的出度。那么每次被反向「删除」回来的点一定和状态中的某一个 $A$ 类点有边，且会产生两种影响，即：要么增加后状态不变，要么增加后使得更多的 $A$ 类点变成「可用」。</p><p>我们不妨在每次导致第二种影响的时候统计方案，就不会统计重复，这样的话可以得到一个 $O(2^{r} n^2)$ 的暴力 DP，其中 $r$ 是 $A$ 类点的个数。</p><p>如果我们删除没有出度的点，容易证明 $r \leq 15$（$[16,30] \cup [46,60]$），可以通过本题。实际上如果特判出度为 $1$，能让 $r$ 做到更小。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><!--more--><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">65</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tot,sum,ans,in[N],out[N],anc[N],val[N],tag[N],fac[N],ifac[N],S[<span class="number">1</span>&lt;&lt;<span class="number">15</span>],dp[N][<span class="number">1</span>&lt;&lt;<span class="number">15</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T[<span class="number">1</span>&lt;&lt;<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> anc[x]==x?x:anc[x]=find(anc[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;<span class="keyword">return</span> n&lt;m?<span class="number">0</span>:(<span class="keyword">long</span> <span class="keyword">long</span>)fac[n]*ifac[m]%mod*ifac[n-m]%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=ifac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)ifac[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)(mod-mod/i)*ifac[mod%i]%mod;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)fac[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)fac[i<span class="number">-1</span>]*i%mod,ifac[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)ifac[i<span class="number">-1</span>]*ifac[i]%mod;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;val[i],tag[val[i]]=<span class="literal">true</span>;</span><br><span class="line">  m=*<span class="built_in">std</span>::max_element(val+<span class="number">1</span>,val+n+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="keyword">if</span>(tag[i])anc[i]=i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="keyword">if</span>(tag[i])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=(i&lt;&lt;<span class="number">1</span>);j&lt;=m;j+=i)<span class="keyword">if</span>(tag[j])&#123;</span><br><span class="line">      out[i]++,in[j]++;</span><br><span class="line">      anc[find(i)]=find(j);</span><br><span class="line">    &#125;</span><br><span class="line">  ans=<span class="number">1</span>;</span><br><span class="line">  <span class="comment">// for(int i=1;i&lt;=m;i++)printf(&quot;%d%c&quot;,tag[i]?find(i):-1,&quot; \n&quot;[i==m]);</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">1</span>;c&lt;=m;c++)<span class="keyword">if</span>(tag[c]&amp;&amp;find(c)==c)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; A,B;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="keyword">if</span>(tag[i]&amp;&amp;find(i)==c)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!in[i])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!out[i])<span class="keyword">continue</span>;</span><br><span class="line">        a.push_back(i);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        b.push_back(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!b.size())<span class="keyword">continue</span>;</span><br><span class="line">    A.resize(a.size());</span><br><span class="line">    B.resize(b.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.size();j++)</span><br><span class="line">        <span class="keyword">if</span>(b[j]%a[i]==<span class="number">0</span>)&#123;</span><br><span class="line">          A[i]|=<span class="number">1l</span>l&lt;&lt;j;</span><br><span class="line">          B[j]|=<span class="number">1l</span>l&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;(<span class="number">1</span>&lt;&lt;a.size());x++)&#123;</span><br><span class="line">      <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)<span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)t|=A[i];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.size();j++)<span class="keyword">if</span>(((t&gt;&gt;j)&amp;<span class="number">1</span>)&amp;&amp;(x&amp;B[j])==B[j])s|=<span class="number">1l</span>l&lt;&lt;j;</span><br><span class="line">      S[x]=__builtin_popcountll(s),T[x]=t;</span><br><span class="line">    &#125;</span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=b.size();i++)<span class="built_in">memset</span>(dp[i],<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;a.size())&lt;&lt;<span class="number">2</span>);</span><br><span class="line">      dp[<span class="number">1</span>][B[i]]=fac[S[B[i]]<span class="number">-1</span>];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x=B[i],y;x&lt;(<span class="number">1</span>&lt;&lt;a.size());x++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;b.size();t++)<span class="keyword">if</span>(((T[x]&gt;&gt;t)&amp;<span class="number">1</span>)&amp;&amp;(y=x|B[t])!=x)</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;b.size();i++)<span class="keyword">if</span>(dp[i][x])</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=b.size();j++)&#123;</span><br><span class="line">              <span class="comment">// printf(&quot;%d %d %d[%d] : %d(%d) -&gt; %d(%d)\n&quot;,i,j,t,b[t],x,S[x],y,S[y]);</span></span><br><span class="line">              dp[j][y]=(dp[j][y]+(<span class="keyword">long</span> <span class="keyword">long</span>)dp[i][x]*C(S[y]-j,S[y]-S[x]<span class="number">-1</span>)%mod*fac[S[y]-S[x]<span class="number">-1</span>])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=b.size();i++)sum=(sum+dp[i][(<span class="number">1</span>&lt;&lt;a.size())<span class="number">-1</span>])%mod;</span><br><span class="line">      <span class="comment">// printf(&quot;%d[%d] %d\n&quot;,i,b[i],sum);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;a.size();i++)printf(&quot;%d,%lld%c&quot;,a[i],A[i],&quot; \n&quot;[i+1==a.size()]);</span></span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;b.size();i++)printf(&quot;%d,%lld%c&quot;,b[i],B[i],&quot; \n&quot;[i+1==b.size()]);</span></span><br><span class="line">    tot+=b.size()<span class="number">-1</span>;</span><br><span class="line">    ans=(<span class="keyword">long</span> <span class="keyword">long</span>)ans*sum%mod*C(tot,b.size()<span class="number">-1</span>)%mod;</span><br><span class="line">    <span class="comment">// printf(&quot;&gt;&gt; %d %d\n&quot;,(int)b.size(),sum);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造 </tag>
            
            <tag> 二分图 </tag>
            
            <tag> 状压 </tag>
            
            <tag> 偏序集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「HDU6810」Imperative Meeting</title>
      <link href="hdu6810/"/>
      <url>hdu6810/</url>
      
        <content type="html"><![CDATA[<p>给定 $n$ 个点的树，定义 $m$ 个人的约会点 $x$ 为使得 $m$ 个人所在的点到 $x$ 的距离之和最小的点。</p><p>$m$ 个人所在位置在 $n$ 个点中随机选择（即总方案数 $\binom nm$），问所有方案到约会点距离之和的和。</p><p>$n \leq 10^6$，答案对 $10^9 + 7$ 取模。</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑确定 $m$ 个点后，所有人到某个点的距离和是单调的，也就是说可能称为约会点的点一定是一个联通块。</p><p>我们预处理出所有点到某个点的距离和，因为稍后我们选点时，（某一选点范围内）每个点被选中的概率是均等的。</p><p>「Part1」一个点能够成为约会点当且仅当每棵子树内选的点个数都 $\leq \frac m 2$，我们枚举点 $u$ 和其一个子树 $v$，使得 $v$ 内选的点的个数 $&gt; \frac m 2$（对于一种方案和固定的 $u$，这样的 $v$ 至多只有一个）。贡献形如</p><script type="math/tex; mode=display">\sum_{\frac m 2 < i \leq m} \binom {siz_v} {i} \binom {n - siz_v} {m - i} \left( \frac {i} {siz_v} \cdot (sumsub_v + siz_v) + \frac {m - i} {n - siz_v} \cdot (sumall_u - sumsub_v - siz_v)\right)</script><p>这个分数可以合到组合数里，也就是瓶颈为</p><script type="math/tex; mode=display">\sum_{\frac m2 < i \leq m} \binom si \binom {n-s} {m-i}</script><p>这个东西我们考虑组合意义，容易从 $f_s$ 递推到 $f_{s-1}$。</p><p>「Part2」一条边上的两个点能同时成为约会点当且仅当两侧被选中的点的个数都恰为 $\frac m 2$，这一部分容易直接计算。</p><p>于是点减边就做完了，时间复杂度 $O(n)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">1</span>&lt;&lt;<span class="number">21</span>; <span class="keyword">char</span> ibuf[S],*iS,*iT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (iS==iT?(iT=(iS=ibuf)+fread(ibuf,1,S,stdin),(iS==iT?EOF:*iS++)):*iS++)</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">  x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar();</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))c=getchar();</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>); <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x,<span class="keyword">char</span> c)</span></span>&#123;print(x),<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,fa[N],siz[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  z(<span class="keyword">int</span> x=<span class="number">0</span>):x(x)&#123;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;F0[N],F1[N],fac[N],inv[N],ifac[N],sumall[N],sumsub[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">fpow</span><span class="params">(z a,<span class="keyword">int</span> b)</span></span>&#123;z s=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;<span class="keyword">return</span> s;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">finv</span><span class="params">(z a)</span></span>&#123;<span class="keyword">return</span> fpow(a,mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;<span class="keyword">return</span> n&lt;m?<span class="number">0</span>:fac[n]*ifac[m]*ifac[n-m];&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">atom</span>&#123;</span><span class="keyword">int</span> siz; z sum;&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;atom&gt; A[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">  siz[u]=<span class="number">1</span>;</span><br><span class="line">  sumsub[u]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line">    fa[v]=u,dfs(v),siz[u]+=siz[v];</span><br><span class="line">    sumsub[u]=sumsub[u]+sumsub[v]+siz[v];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,z fr)</span></span>&#123;</span><br><span class="line">  sumall[u]=fr+sumsub[u],fr=fr+n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line">    fr=fr+sumsub[v]+siz[v];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line">    dfs2(v,fr-sumsub[v]-siz[v]-siz[v]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sol0</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> l,<span class="keyword">int</span> r,z *F)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l&gt;m||l&gt;r)&#123;</span><br><span class="line">    <span class="built_in">memset</span>(F,<span class="number">0</span>,(n+<span class="number">1</span>)&lt;&lt;<span class="number">2</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    F[n]=C(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)F[i]=F[i+<span class="number">1</span>]-C(i,l<span class="number">-1</span>)*C(n-i<span class="number">-1</span>,m-l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=m+<span class="number">1</span>;j&lt;=r;j++)<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)F[i]=F[i]+C(i,j)*C(n-i,m-j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">z <span class="title">sol1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  z res=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">    res=res+C(n<span class="number">-1</span>,m<span class="number">-1</span>)*sumall[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:A[u])&#123;</span><br><span class="line">      res=res-F0[x.siz<span class="number">-1</span>]*(x.sum+x.siz)-F1[x.siz]*(sumall[u]-x.sum-x.siz);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">z <span class="title">sol2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(m&amp;<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  z res=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:A[u])&#123;</span><br><span class="line">      res=res+C(x.siz,m&gt;&gt;<span class="number">1</span>)*C(n-x.siz,m&gt;&gt;<span class="number">1</span>)*(inv[x.siz]*(x.sum+x.siz)+inv[n-x.siz]*(sumall[u]-x.sum-x.siz));</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> res*(m&gt;&gt;<span class="number">1</span>)*finv(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  freopen(<span class="string">&quot;2.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)inv[i]=(mod-mod/i)*inv[mod%i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)ifac[i]=ifac[i<span class="number">-1</span>]*inv[i];</span><br><span class="line">  <span class="keyword">for</span>(read(T);T--;)&#123;</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)G[i].clear(),A[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fa,i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      read(fa);</span><br><span class="line">      G[fa].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])A[u].push_back(&#123;siz[v],sumsub[v]&#125;);</span><br><span class="line">      A[u].push_back(&#123;n-siz[u],sumall[fa[u]]-sumsub[u]-siz[u]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l=(m&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    sol0(n<span class="number">-1</span>,m<span class="number">-1</span>,l<span class="number">-1</span>,m<span class="number">-1</span>,F0);</span><br><span class="line">    sol0(n<span class="number">-1</span>,m<span class="number">-1</span>,l,m,F1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(sol1()-sol2()).x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点减边 </tag>
            
            <tag> 组合意义 </tag>
            
            <tag> 单调性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「ZJOI2020」抽卡</title>
      <link href="luogu6633/"/>
      <url>luogu6633/</url>
      
        <content type="html"><![CDATA[<p>有 $m$ 张带编号卡牌，每次你可以随机抽取一张。抽中每张的概率均为 $\frac 1 m$。当编号连续的 $k$ 张牌都被抽取过时，游戏结束。</p><p>问游戏结束的期望步数。</p><p>$1 \leq k \leq m \leq 2 \times 10^5$。</p><a id="more"></a><h3 id="题解-Part1"><a href="#题解-Part1" class="headerlink" title="题解 Part1"></a>题解 Part1</h3><p>我们可以直接对每张牌第一次被抽中的操作序列计数。</p><p>把牌的每一段编号连续区间分开考虑，每一段处理出选中连续区间长度不超过 $k$ 的方案数（同时容易得到超过的方案数），然后分治 + NTT 合并，这是平凡的。</p><p>这个做法的时间复杂度是 $O(n^2＋n \log^2 n)$ 的，瓶颈在于前半部分即处理出分成把 $n$ 个 $m=1…n$ 段满足每一段长度都不超过 $k$ 的方案数，更进一步的可以表示为：</p><script type="math/tex; mode=display">B(u) = [x^{n+1}] \frac 1 {1 - u \frac {x - x^{k+1}} {1 - x}}</script><p>我们需要求出多项式 $B$。</p><h3 id="题解-Part2"><a href="#题解-Part2" class="headerlink" title="题解 Part2"></a>题解 Part2</h3><p>注意到这是一个拓展拉格朗日反演的形式，我们需要求出 $F(x) = \frac{x - x^{k+1}} {1 - x}$ 的复合逆。<br>相当于我们要求 $G(x)$ 满足 $F(G(x)) = x$，根据多项式牛顿迭代，有</p><script type="math/tex; mode=display">T(G(x))= F(G(x)) - x= \frac {G(x) - G^{k+1}(x)}{1 - G(x)} - x \\\begin{aligned}T'(G(x))&= \frac {(1 - (k+1)G^k(x))(1 - G(x)) + (G(x) - G^{k+1}(x))}{(1 - G(x))^2} \\&= \frac {1 - (k+1)G^k(x) + kG^{k+1}(x)} {1 - 2G(x) + G^2(x)} \\\end{aligned}</script><p>由多项式牛顿迭代，我们可以倍增得到 $G(x)$。</p><h3 id="题解-Part3"><a href="#题解-Part3" class="headerlink" title="题解 Part3"></a>题解 Part3</h3><p>代入拓展拉格朗日反演的式子，令 $H(x) = \frac 1 {1 - ux}$ 我们可以得到</p><script type="math/tex; mode=display">S= [x^{n+1}] H(F(x))= \frac 1 {n+1} [x^n] H'(x) \left(\frac x {G(x)}\right)^{n+1}</script><p>设 $T(x) = \frac 1{n+1} \left(\frac x {G(x)}\right)^{n+1}$，则有</p><script type="math/tex; mode=display">\begin{aligned}S&= [x^n] H'(x) T(x) = [x^n] T(x) \frac {u} {(1-ux)^2} \\&= [x^n] T(x) u \sum_{i=0}^\infty (i+1) (ux)^i\end{aligned}</script><p>即可直接得到 $S(u)$。</p><p>问题解决，总时间复杂度 $O(n\log^2 n)$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>); <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x,<span class="keyword">char</span> c)</span></span>&#123;print(x),<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],b[N],rev[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">z</span><span class="params">()</span>:<span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">z</span><span class="params">(<span class="keyword">int</span> x)</span>:<span class="title">x</span><span class="params">(x)</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;ans,len[N],fac[N],ifac[N],w[N&lt;&lt;<span class="number">2</span>],S[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;<span class="keyword">return</span> n&lt;m?<span class="number">0</span>:fac[n]*ifac[m]*ifac[n-m];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">fpow</span><span class="params">(z a,<span class="keyword">int</span> b)</span></span>&#123;z s=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;<span class="keyword">return</span> s;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vec</span>:</span><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt;&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt;::<span class="built_in">vector</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size();i++)::print(at(i).x,<span class="string">&#x27; &#x27;</span>);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> vec <span class="title">resize</span><span class="params">(vec a,<span class="keyword">int</span> n)</span></span>&#123;a.resize(n); <span class="keyword">return</span> a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initfac</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>]=fac[<span class="number">1</span>]=ifac[<span class="number">0</span>]=ifac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)ifac[i]=(mod-mod/i)*ifac[mod%i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)ifac[i]=ifac[i<span class="number">-1</span>]*ifac[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lim=<span class="number">1</span>,k=<span class="number">0</span>; <span class="keyword">while</span>(lim&lt;n)lim&lt;&lt;=<span class="number">1</span>,++k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> len=<span class="number">1</span>;<span class="keyword">for</span>(;len&lt;lim;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">z wn=fpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>)); w[len]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)w[i+len]=w[i+len<span class="number">-1</span>]*wn;</span><br><span class="line">&#125;<span class="keyword">return</span> lim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(vec &amp;a,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line">a.resize(lim);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)<span class="keyword">if</span>(i&lt;rev[i])<span class="built_in">std</span>::swap(a[i],a[rev[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;lim;len&lt;&lt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i+=(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">z x=a[i+j],y=a[i+j+len]*w[j+len];</span><br><span class="line">a[i+j]=x+y,a[i+j+len]=x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">idft</span><span class="params">(vec &amp;a,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line">dft(a,lim),<span class="built_in">std</span>::reverse(&amp;a[<span class="number">1</span>],&amp;a[lim]); z inv=fpow(lim,mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*inv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> vec <span class="title">mul</span><span class="params">(vec a,vec b,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.size()&lt;<span class="number">10</span>||b.size()&lt;<span class="number">10</span>)&#123;</span><br><span class="line"><span class="function">vec <span class="title">c</span><span class="params">(a.size()+b.size()<span class="number">-1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.size();j++)</span><br><span class="line">c[i+j]=c[i+j]+a[i]*b[j];</span><br><span class="line"><span class="keyword">return</span> c.resize(l),c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len=a.size()+b.size()<span class="number">-1</span>,lim=init(len);</span><br><span class="line">dft(a,lim),dft(b,lim);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*b[i];</span><br><span class="line"><span class="keyword">return</span> idft(a,lim),a.resize(l),a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> vec <span class="keyword">operator</span>*(<span class="keyword">const</span> vec &amp;a,<span class="keyword">const</span> vec &amp;b)&#123;<span class="keyword">return</span> mul(a,b,a.size()+b.size()<span class="number">-1</span>);&#125;</span><br><span class="line"><span class="keyword">inline</span> vec <span class="keyword">operator</span>+(vec a,<span class="keyword">const</span> vec &amp;b)&#123;</span><br><span class="line">a.resize(<span class="built_in">std</span>::max(a.size(),b.size()));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]=a[i]+b[i]; <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> vec <span class="keyword">operator</span>-(vec a,<span class="keyword">const</span> vec &amp;b)&#123;</span><br><span class="line">a.resize(<span class="built_in">std</span>::max(a.size(),b.size()));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]=a[i]-b[i]; <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vec <span class="title">inv</span><span class="params">(<span class="keyword">const</span> vec &amp;f,<span class="keyword">int</span> len=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((len=~len?len:f.size())==<span class="number">1</span>)<span class="keyword">return</span> &#123;fpow(f[<span class="number">0</span>],mod<span class="number">-2</span>)&#125;;</span><br><span class="line">vec a(&amp;f[0],&amp;f[len]),b=inv(f,(len+1)&gt;&gt;1);</span><br><span class="line"><span class="keyword">int</span> lim=init((len&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">dft(a,lim),dft(b,lim);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=b[i]*(<span class="number">2</span>-a[i]*b[i]);</span><br><span class="line"><span class="keyword">return</span> idft(a,lim),a.resize(len),a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vec <span class="title">deri</span><span class="params">(vec f)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=(<span class="keyword">int</span>)f.size()<span class="number">-2</span>;i++)f[i]=f[i+<span class="number">1</span>]*(i+<span class="number">1</span>); <span class="keyword">return</span> f.back()=<span class="number">0</span>,f;&#125;</span><br><span class="line"><span class="function">vec <span class="title">inte</span><span class="params">(vec f)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)f.size()<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)f[i]=f[i<span class="number">-1</span>]*fpow(i,mod<span class="number">-2</span>); <span class="keyword">return</span> f.front()=<span class="number">0</span>,f;&#125;</span><br><span class="line"><span class="function">vec <span class="title">ln</span><span class="params">(<span class="keyword">const</span> vec &amp;f)</span></span>&#123;<span class="keyword">return</span> inte(mul(inv(f),deri(f),f.size()));&#125;</span><br><span class="line"><span class="function">vec <span class="title">exp</span><span class="params">(<span class="keyword">const</span> vec &amp;f,<span class="keyword">int</span> len=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((len=~len?len:f.size())==<span class="number">1</span>)<span class="keyword">return</span> &#123;<span class="number">1</span>&#125;;</span><br><span class="line">vec a(&amp;f[0],&amp;f[len]),b=exp(f,(len+1)&gt;&gt;1);</span><br><span class="line"><span class="keyword">return</span> b.resize(len),mul(b,a+vec&#123;<span class="number">1</span>&#125;-ln(b),len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vec <span class="title">fpow</span><span class="params">(vec a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=a.size(); vec s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;n;c++)<span class="keyword">if</span>(a[c].x)&#123;</span><br><span class="line"><span class="keyword">int</span> l=n-c*b;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=<span class="number">0</span>)<span class="keyword">return</span> s.resize(n),s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)a[i]=a[i+c];</span><br><span class="line">a.resize(l);</span><br><span class="line">a=ln(a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)a[i]=a[i]*b;</span><br><span class="line">a=<span class="built_in">exp</span>(a),s.resize(c*b);</span><br><span class="line">s.insert(s.end(),a.begin(),a.end());</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vec <span class="title">complex</span><span class="params">(<span class="keyword">const</span> vec &amp;g)</span></span>&#123; <span class="comment">//F(G(x))</span></span><br><span class="line">vec s,c=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)c=mul(c,g,g.size()),s=s+c;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vec <span class="title">complex_inv</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123; <span class="comment">//G^&#123;-1&#125;(F(x))</span></span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">1</span>)<span class="keyword">return</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">vec g=resize(complex_inv((len+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>),len),gk=fpow(g,k),gk1=mul(gk,g,len);</span><br><span class="line">vec res=g-mul(mul(g-gk1-vec&#123;<span class="number">0</span>,<span class="number">1</span>&#125;*(vec&#123;<span class="number">1</span>&#125;-g),vec&#123;<span class="number">1</span>&#125;-g,len),inv(vec&#123;<span class="number">1</span>&#125;-vec&#123;k+<span class="number">1</span>&#125;*gk+vec&#123;k&#125;*gk1),len);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> vec <span class="title">sol</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">//n+1个球，分m组，每组1~k个。</span></span><br><span class="line">vec g=complex_inv(n+<span class="number">1</span>),res(n+<span class="number">1</span>);</span><br><span class="line">g.erase(g.begin());</span><br><span class="line">g=fpow(inv(g),n+<span class="number">1</span>)*vec&#123;fpow(n+<span class="number">1</span>,mod<span class="number">-2</span>)&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)res[i<span class="number">-1</span>]=(i+<span class="number">1</span>)*g[n-i];</span><br><span class="line"><span class="built_in">std</span>::reverse(&amp;res[<span class="number">0</span>],&amp;res[n]),res[n]=n+<span class="number">1</span>&lt;=k;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">std::pair&lt;vec,vec&gt; solve(int l,int r)&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">int</span> n=b[l];</span><br><span class="line">vec F(n+1),G=sol(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">F[i]=fac[n]*ifac[n-i]-G[i]*fac[i]-(i?S[i<span class="number">-1</span>]:<span class="number">0</span>)*ifac[n-i];</span><br><span class="line">S[i]=(i?S[i<span class="number">-1</span>]:<span class="number">0</span>)+F[i]*fac[n-i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)F[i]=F[i+<span class="number">1</span>]*ifac[i];</span><br><span class="line"><span class="keyword">return</span> F.pop_back(),<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;vec,vec&gt;&#123;F,G&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> L=solve(l,(l+r)&gt;&gt;<span class="number">1</span>),R=solve(((l+r)&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> &#123;L.first*R.second+L.second*R.first,L.second*R.second&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n),read(k),initfac(n+<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)read(a[i]);</span><br><span class="line"><span class="built_in">std</span>::sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;n&amp;&amp;a[j+<span class="number">1</span>]==a[i]+j-i+<span class="number">1</span>;j++);</span><br><span class="line">b[++m]=j-i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> res=solve(<span class="number">1</span>,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">len[i]=len[i<span class="number">-1</span>]+n*fpow(n-i+<span class="number">1</span>,mod<span class="number">-2</span>);</span><br><span class="line">ans=ans+res.first[i<span class="number">-1</span>]*fac[i<span class="number">-1</span>]*fac[n-i]*len[i];</span><br><span class="line">&#125;</span><br><span class="line">print((ans*ifac[n]).x,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;clock = %.2lf\n&quot;</span>,clock()/<span class="keyword">double</span>(CLOCKS_PER_SEC));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拉格朗日反演 </tag>
            
            <tag> 多项式牛顿迭代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Ynoi2019」美好的每一天~ 不连续的存在</title>
      <link href="luogu6579/"/>
      <url>luogu6579/</url>
      
        <content type="html"><![CDATA[<p>给数组 $A$ 和 $n$ 个节点的树，每个点有一个 $1$ 到 $x$ 颜色。</p><p>$m$ 次查询，每次查询树上只保留 $[l,r]$ 内的所有节点，设一个极大连通块中出现奇数次数的颜色个数为 $t$，则其对答案的贡献为 $A_t$ ，即答案是所有连通块贡献的和，询问相互独立。</p><p>$1\leq n,m\leq 10^5$，$1\leq x,A_i \leq 10^4$。</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><del>退役选手被lxl抓过来写题解</del></p><p>考虑用单增莫队维护，想了想容易发现复杂度不对。</p><p>莫队的端点移动需要启发式合并维护信息，而启发式合并的复杂度基于我们可以把势能均摊，如果我们在分块时基于势能呢？</p><p>单增莫队的复杂度主要产生于以下两个部分（假设把询问分为 $S$ 块）：</p><ul><li>左端点左移：对于每个端点都会贡献 $O(S)$，故这一部分的总势能是 $O(S n \sqrt n)$ 的</li><li>右端点右移：每个块内的询问会对每个块内的端点贡献 $O(1)$ 次，可以通过构造询问分布，卡满这部分的势能和。</li><li>回滚后缀的右端点右移操作：回滚操作于增加操作复杂度相同。</li></ul><p><del>有没有救呢？当然是有的。</del>注意左端点的移动势能是只和块数相关的。瓶颈在于右端点的移动：对于一个区间 $[l,r]$，端点 $i$ 在右端点移动时贡献的势能为 $A_i$，则一次经过该区间的询问产生的势能至多为 $\sum_{i=l+1}^r A_i$。</p><p>理清思路后题解就很显然了，我们先处理出每个端点的势能 $B_i$（在 $1 \ldots (i-1)$ 后插入 $i$ 贡献的势能，上文提到的势能 $A_i$ 是一定有 $A_i \leq B_i$ 的）。然后从右到左对势能分块。</p><p>如果加入当前端点后当前栈内端点的势能和大于 $\sqrt {n} \log n$ 就将栈内元素分为一块。由于所有被分配到这个块的询问都是经过块的不会贡献势能的左端点，而其余端点贡献的势能和是一定小于 $\sqrt n \log n$ 的。</p><p>总时间复杂度 $O((n+Q)\sqrt n \log n)$。</p><h2 id="卡常技巧"><a href="#卡常技巧" class="headerlink" title="卡常技巧"></a>卡常技巧</h2><p>本题卡常的一比，毒瘤 lxl（（</p><ol><li>手动调整块大小</li><li>作栈/队列功能的 <code>std::vector&lt;T&gt;</code> 换成手写（不知道为什么我做到这这步就过了）</li><li>手写 bitset（我鸽了）</li><li>手写可合并的 vector（然而我手写了一个还打不过 <code>std::vector&lt;T&gt;</code>，我已经报警了）</li></ol><h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">&quot;avx&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">&quot;popcnt&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;unroll-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;inline-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;no-stack-protector&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;inline-functions-called-once&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log(...) (void(0))</span></span><br><span class="line"><span class="comment">// #define log(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug log(<span class="meta-string">&quot;\33[2mPassing [%s] in LINE %d\33[0m\n&quot;</span>,__FUNCTION__,__LINE__);</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">1</span>&lt;&lt;<span class="number">21</span>; <span class="keyword">char</span> ibuf[S],*iS,*iT,obuf[S],*oS=obuf,*oT=oS+S<span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> flush() (fwrite(obuf,1,oS-obuf,stdout),oS=obuf,void())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (iS==iT?(iT=(iS=ibuf)+fread(ibuf,1,S,stdin),(iS==iT?EOF:*iS++)):*iS++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putchar(x) (*oS++=(x),oS==oT?flush():void())</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flusher_</span>&#123;</span>~Flusher_()&#123;flush();&#125;&#125;flusher_;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">  x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>); <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x,<span class="keyword">char</span> c)</span></span>&#123;print(x),<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">1e4</span>+<span class="number">10</span>,S1=<span class="number">256</span>,S2=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> clockSum;</span><br><span class="line"><span class="keyword">int</span> n,m,x,blocks,a[N],c[N],bln[N],anc[N],pre[N],siz[N],ans[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,<span class="title">int</span> <span class="title">N</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">static_vector</span>&#123;</span></span><br><span class="line">  T a[N];</span><br><span class="line">  <span class="keyword">size_t</span> top;</span><br><span class="line">  <span class="keyword">inline</span> T&amp; <span class="keyword">operator</span>[](<span class="keyword">size_t</span> k)&#123;<span class="keyword">return</span> a[k];&#125;</span><br><span class="line">  <span class="keyword">inline</span> T <span class="keyword">operator</span>[](<span class="keyword">size_t</span> k)<span class="keyword">const</span>&#123;<span class="keyword">return</span> a[k];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">back</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> a[top<span class="number">-1</span>];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> T <span class="title">back</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> a[top<span class="number">-1</span>];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;top=<span class="number">0</span>;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;top--;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> T &amp;e)</span></span>&#123;a[top++]=e;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> top;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;query&gt; q;</span><br><span class="line"><span class="keyword">namespace</span> tree&#123;</span><br><span class="line">  <span class="keyword">int</span> ans,delta,anc[N];</span><br><span class="line">  <span class="keyword">bool</span> roll,mrk[N];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;M&gt; mem[N/S2+<span class="number">5</span>];</span><br><span class="line">  static_vector&lt;<span class="keyword">size_t</span>,(N/S2+<span class="number">5</span>)&gt; rub;</span><br><span class="line">  static_vector&lt;<span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,(N&lt;&lt;<span class="number">1</span>)&gt; history;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">unicom_block</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,cnt,<span class="built_in">bitset</span>,key[S2];</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">unicom_block</span><span class="params">()</span></span>&#123;<span class="built_in">bitset</span>=<span class="number">-1</span>,<span class="built_in">memset</span>(key,<span class="number">-1</span>,<span class="keyword">sizeof</span>(key));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(~<span class="built_in">bitset</span>)mem[<span class="built_in">bitset</span>].reset(),rub.push_back(<span class="built_in">bitset</span>),<span class="built_in">bitset</span>=<span class="number">-1</span>;</span><br><span class="line">      cnt=<span class="number">0</span>,vec.clear(),<span class="built_in">memset</span>(key,<span class="number">-1</span>,<span class="keyword">sizeof</span>(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">      ans-=a[cnt];</span><br><span class="line">      <span class="keyword">if</span>(~<span class="built_in">bitset</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mem[<span class="built_in">bitset</span>][k])&#123;</span><br><span class="line">          mem[<span class="built_in">bitset</span>][k]=<span class="number">0</span>,--cnt;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          mem[<span class="built_in">bitset</span>][k]=<span class="number">1</span>,++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S2;i++)<span class="keyword">if</span>(key[i]==k)&#123;key[i]=<span class="number">-1</span>,--cnt; <span class="keyword">goto</span> out;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S2;i++)<span class="keyword">if</span>(key[i]==<span class="number">-1</span>)&#123;key[i]=k,++cnt; <span class="keyword">goto</span> out;&#125;</span><br><span class="line">        <span class="built_in">bitset</span>=rub.back(),rub.pop_back();</span><br><span class="line">        mem[<span class="built_in">bitset</span>][k]=<span class="number">1</span>,++cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S2;i++)mem[<span class="built_in">bitset</span>][key[i]]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      out:ans+=a[cnt];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;uni[N];</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(unicom_block &amp;u,unicom_block &amp;v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:u.vec)v.pushup(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==anc[x]?x:find(anc[x]);&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;\e[2mreset\e[0m\n&quot;</span>);</span><br><span class="line">    ans=roll=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      anc[i]=i;</span><br><span class="line">      <span class="keyword">if</span>(mrk[i])uni[i].clear(),mrk[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;\e[2madd %d\e[0m\n&quot;</span>,x);</span><br><span class="line">    ans+=a[<span class="number">0</span>]; <span class="keyword">if</span>(roll)delta+=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(roll)history.push_back(&#123;<span class="number">0</span>,x,<span class="number">0</span>&#125;);</span><br><span class="line">    mrk[x]=<span class="number">1</span>;</span><br><span class="line">    uni[x].vec.push_back(c[x]),uni[x].pushup(c[x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[x].size();i++)<span class="keyword">if</span>(mrk[G[x][i]])&#123;</span><br><span class="line">      <span class="keyword">int</span> y=G[x][i],u=find(x),v=find(y);</span><br><span class="line">      <span class="keyword">if</span>(uni[u].vec.size()&gt;uni[v].vec.size())<span class="built_in">std</span>::swap(u,v);</span><br><span class="line">      <span class="comment">// log(&quot;merge %d[%d %lu] %d[%d %lu]\n&quot;,x,u,uni[u].vec.size(),y,v,uni[v].vec.size());</span></span><br><span class="line">      <span class="keyword">if</span>(roll)history.push_back(&#123;u,v,anc[u]&#125;);</span><br><span class="line">      merge(uni[u],uni[v]);</span><br><span class="line">      uni[v].vec.insert(uni[v].vec.end(),uni[u].vec.begin(),uni[u].vec.end()),anc[u]=v;</span><br><span class="line">      ans-=a[uni[u].cnt]; <span class="keyword">if</span>(roll)delta-=a[uni[u].cnt];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;\e[2mrollback\e[0m\n&quot;</span>);</span><br><span class="line">    ans-=delta,delta=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u,v,t,i=(<span class="keyword">int</span>)history.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">      <span class="built_in">std</span>::tie(u,v,t)=history[i];</span><br><span class="line">      <span class="keyword">if</span>(u)&#123;</span><br><span class="line">        anc[u]=t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:uni[u].vec)uni[v].vec.pop_back();</span><br><span class="line">        merge(uni[u],uni[v]);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        mrk[v]=<span class="number">0</span>,uni[v].pushup(c[v]),uni[v].clear();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    history.clear();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> id,l,r;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;query&gt; q;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)bln[i]=id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::sort(q.begin(),q.end(),[](<span class="keyword">const</span> query &amp;a,<span class="keyword">const</span> query &amp;b)&#123;<span class="keyword">return</span> a.l&gt;b.l;&#125;);</span><br><span class="line">    tree::reset();</span><br><span class="line">    <span class="keyword">int</span> cur=l,i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:q)&#123;</span><br><span class="line">      <span class="comment">// log(&quot;\e[34mquery &#123;%d %d&#125;\e[0m block[%d]=&#123;%d %d&#125;\n&quot;,it.l,it.r,id,l,r);</span></span><br><span class="line">      <span class="keyword">while</span>(it.l&lt;=cur)tree::add(cur--);</span><br><span class="line">      <span class="keyword">for</span>(tree::roll^=<span class="number">1</span>,i=l+<span class="number">1</span>;i&lt;=it.r;i++)tree::add(i);</span><br><span class="line">      ans[it.id]=tree::query();</span><br><span class="line">      tree::roll^=<span class="number">1</span>,tree::rollback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;block[S1&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; find=[&amp;](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> anc[x]==x?x:anc[x]=find(anc[x]);&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)anc[i]=i,siz[i]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])<span class="keyword">if</span>(v&lt;u)&#123;</span><br><span class="line">      <span class="keyword">int</span> fu=find(u),fv=find(v); <span class="keyword">if</span>(fu==fv)<span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span>(siz[fu]&gt;siz[fv])<span class="built_in">std</span>::swap(fu,fv);</span><br><span class="line">      pre[u]+=siz[fu],anc[fu]=fv,siz[fv]+=siz[fu];</span><br><span class="line">    &#125;</span><br><span class="line">    pre[u]+=G[u].size();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> S=<span class="built_in">std</span>::accumulate(pre+<span class="number">1</span>,pre+n+<span class="number">1</span>,<span class="number">0</span>)/S1+<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;&gt; block limit = %d\n&quot;</span>,S);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; seq=&#123;&#123;n+<span class="number">1</span>,n,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">    <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(seq.back())--,<span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(seq.back())+=pre[i];</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>||<span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(seq.back())+pre[i]&gt;S)seq.push_back(&#123;i,i<span class="number">-1</span>,<span class="number">0</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  seq.pop_back(),<span class="built_in">std</span>::reverse(seq.begin(),seq.end()),blocks=seq.size();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> _,i=<span class="number">0</span>;i&lt;blocks;i++)&#123;</span><br><span class="line">    <span class="built_in">std</span>::tie(block[i].l,block[i].r,_)=seq[i];</span><br><span class="line">    <span class="comment">// log(&quot;%d [%d %d] %d\n&quot;,i,block[i].l,block[i].r,std::accumulate(pre+block[i].l,pre+block[i].r+1,0));</span></span><br><span class="line">    block[i].id=i,block[i].init();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)tree::uni[i].id=i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:q)<span class="keyword">if</span>(bln[it.l]==bln[it.r])&#123;</span><br><span class="line">    <span class="comment">// log(&quot;\e[34mquery &#123;%d %d&#125;\e[0m all belong to %d\n&quot;,it.l,it.r,bln[it.l]);</span></span><br><span class="line">    tree::reset();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=it.l;i&lt;=it.r;i++)tree::add(i);</span><br><span class="line">    ans[it.id]=tree::query();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    block[bln[it.r]].q.push_back(it);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;blocks;i++)block[i].solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N/S2+<span class="number">5</span>;i++)tree::rub.push_back(i);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  freopen(<span class="string">&quot;2.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">&quot;2.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  read(n),read(m),read(x);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)read(c[i]),--c[i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u,v,i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    read(u),read(v);</span><br><span class="line">    G[u].push_back(v),G[v].push_back(u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x;i++)read(a[i]);</span><br><span class="line">  build();</span><br><span class="line">  <span class="comment">// log(&quot;\e[31mpre\e[0m = &quot;); for(int i=1;i&lt;=n;i++)log(&quot;%d%c&quot;,pre[i],&quot; \n&quot;[i==n]);</span></span><br><span class="line">  <span class="comment">// log(&quot;\e[31mbln\e[0m = &quot;); for(int i=1;i&lt;=n;i++)log(&quot;%d%c&quot;,bln[i],&quot; \n&quot;[i==n]);</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> l,r,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    read(l),read(r);</span><br><span class="line">    q.push_back(&#123;l,r,i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  solve();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)print(ans[i],<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;clocks: %.4lf\n&quot;</span>,clockSum/(<span class="keyword">double</span>)CLOCKS_PER_SEC);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;clocks: %.4lf\n&quot;</span>,clock()/(<span class="keyword">double</span>)CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写-vector-且没通过的代码"><a href="#手写-vector-且没通过的代码" class="headerlink" title="手写 vector 且没通过的代码"></a>手写 vector 且没通过的代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">&quot;avx&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">&quot;popcnt,tune=native&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;unroll-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;inline-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;no-stack-protector&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;inline-functions-called-once&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log(...) (void(0))</span></span><br><span class="line"><span class="comment">// #define log(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">1</span>&lt;&lt;<span class="number">21</span>; <span class="keyword">char</span> ibuf[S],*iS,*iT,obuf[S],*oS=obuf,*oT=oS+S<span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> flush() (fwrite(obuf,1,oS-obuf,stdout),oS=obuf,void())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (iS==iT?(iT=(iS=ibuf)+fread(ibuf,1,S,stdin),(iS==iT?EOF:*iS++)):*iS++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putchar(x) (*oS++=(x),oS==oT?flush():void())</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flusher_</span>&#123;</span>~Flusher_()&#123;flush();&#125;&#125;flusher_;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">  x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>); <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x,<span class="keyword">char</span> c)</span></span>&#123;print(x),<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">1e4</span>+<span class="number">10</span>,S1=<span class="number">256</span>,S2=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,blocks,a[N],c[N],bln[N],anc[N],pre[N],siz[N],ans[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;query&gt; q;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,<span class="title">int</span> <span class="title">N</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">static_vector</span>&#123;</span></span><br><span class="line">  T a[N];</span><br><span class="line">  <span class="keyword">size_t</span> top;</span><br><span class="line">  <span class="keyword">inline</span> T&amp; <span class="keyword">operator</span>[](<span class="keyword">size_t</span> k)&#123;<span class="keyword">return</span> a[k];&#125;</span><br><span class="line">  <span class="keyword">inline</span> T <span class="keyword">operator</span>[](<span class="keyword">size_t</span> k)<span class="keyword">const</span>&#123;<span class="keyword">return</span> a[k];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">back</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> a[top<span class="number">-1</span>];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> T <span class="title">back</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> a[top<span class="number">-1</span>];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;top=<span class="number">0</span>;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;top--;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> T &amp;e)</span></span>&#123;a[top++]=e;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> top;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> mempool[N&lt;&lt;<span class="number">5</span>],*mempointer=mempool;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">memselect</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *res=mempointer;</span><br><span class="line">  <span class="built_in">log</span>(<span class="string">&quot;\e[32mmem select [%d] =&gt; %d\e[0m\n&quot;</span>,n,res);</span><br><span class="line">  mempointer+=n;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">combinable_vector</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> lim;</span><br><span class="line">  <span class="keyword">int</span> *l,*r;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> r-l;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;r=l;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">()</span></span>&#123;l=r=memselect(lim=<span class="number">8</span>);&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">re_assign</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *tl=l,*tr=r;</span><br><span class="line">    lim&lt;&lt;=<span class="number">3</span>,l=memselect(lim),r=l+(tr-tl);</span><br><span class="line">    <span class="built_in">memcpy</span>(l,tl,size()&lt;&lt;<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(size()==lim)re_assign(); *(r++)=x;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;r--;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">concat</span><span class="params">(<span class="keyword">const</span> combinable_vector &amp;rhs)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size()+rhs.size()&gt;lim)re_assign();</span><br><span class="line">    <span class="built_in">memcpy</span>(r,rhs.l,rhs.size()&lt;&lt;<span class="number">2</span>),r+=rhs.size();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">concat_reverse</span><span class="params">(<span class="keyword">const</span> combinable_vector &amp;rhs)</span></span>&#123;r-=rhs.size();&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> tree&#123;</span><br><span class="line">  <span class="keyword">int</span> ans,delta,anc[N];</span><br><span class="line">  <span class="keyword">bool</span> roll,mrk[N];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;M&gt; mem[N/S2+<span class="number">5</span>];</span><br><span class="line">  static_vector&lt;<span class="keyword">size_t</span>,(N/S2+<span class="number">5</span>)&gt; rub;</span><br><span class="line">  static_vector&lt;<span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,(N&lt;&lt;<span class="number">1</span>)&gt; history;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">unicom_block</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,cnt,<span class="built_in">bitset</span>,key[S2];</span><br><span class="line">    combinable_vector vec;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">unicom_block</span><span class="params">()</span></span>&#123;<span class="built_in">bitset</span>=<span class="number">-1</span>,<span class="built_in">memset</span>(key,<span class="number">-1</span>,<span class="keyword">sizeof</span>(key)),vec.assign();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(~<span class="built_in">bitset</span>)mem[<span class="built_in">bitset</span>].reset(),rub.push_back(<span class="built_in">bitset</span>),<span class="built_in">bitset</span>=<span class="number">-1</span>;</span><br><span class="line">      cnt=<span class="number">0</span>,vec.clear(),<span class="built_in">memset</span>(key,<span class="number">-1</span>,<span class="keyword">sizeof</span>(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">      ans-=a[cnt];</span><br><span class="line">      <span class="keyword">if</span>(~<span class="built_in">bitset</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mem[<span class="built_in">bitset</span>][k])&#123;</span><br><span class="line">          mem[<span class="built_in">bitset</span>][k]=<span class="number">0</span>,--cnt;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          mem[<span class="built_in">bitset</span>][k]=<span class="number">1</span>,++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S2;i++)<span class="keyword">if</span>(key[i]==k)&#123;key[i]=<span class="number">-1</span>,--cnt; <span class="keyword">goto</span> out;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S2;i++)<span class="keyword">if</span>(key[i]==<span class="number">-1</span>)&#123;key[i]=k,++cnt; <span class="keyword">goto</span> out;&#125;</span><br><span class="line">        <span class="built_in">bitset</span>=rub.back(),rub.pop_back();</span><br><span class="line">        mem[<span class="built_in">bitset</span>][k]=<span class="number">1</span>,++cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S2;i++)mem[<span class="built_in">bitset</span>][key[i]]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      out:ans+=a[cnt];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;uni[N];</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(unicom_block &amp;u,unicom_block &amp;v)</span></span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;\e[31mmerge %d %d\e[0m\n&quot;</span>,(<span class="keyword">int</span>)u.vec.size(),(<span class="keyword">int</span>)v.vec.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> *it=u.vec.l;it!=u.vec.r;it++)v.pushup(*it);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==anc[x]?x:find(anc[x]);&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;\e[2mreset\e[0m\n&quot;</span>);</span><br><span class="line">    ans=roll=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      anc[i]=i;</span><br><span class="line">      <span class="keyword">if</span>(mrk[i])uni[i].clear(),mrk[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mempointer=mempool;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)uni[i].vec.assign();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;\e[2madd %d\e[0m\n&quot;</span>,x);</span><br><span class="line">    ans+=a[<span class="number">0</span>]; <span class="keyword">if</span>(roll)delta+=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(roll)history.push_back(&#123;<span class="number">0</span>,x,<span class="number">0</span>&#125;);</span><br><span class="line">    mrk[x]=<span class="number">1</span>,uni[x].pushup(c[x]);</span><br><span class="line">    uni[x].vec.push_back(c[x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[x].size();i++)<span class="keyword">if</span>(mrk[G[x][i]])&#123;</span><br><span class="line">      <span class="keyword">int</span> y=G[x][i],u=find(x),v=find(y);</span><br><span class="line">      <span class="keyword">if</span>(uni[u].vec.size()&gt;uni[v].vec.size())<span class="built_in">std</span>::swap(u,v);</span><br><span class="line">      <span class="built_in">log</span>(<span class="string">&quot;merge %d[%d] %d[%d]\n&quot;</span>,x,u,y,v);</span><br><span class="line">      <span class="keyword">if</span>(roll)history.push_back(&#123;u,v,anc[u]&#125;);</span><br><span class="line">      merge(uni[u],uni[v]);</span><br><span class="line">      anc[u]=v;</span><br><span class="line">      uni[v].vec.concat(uni[u].vec);</span><br><span class="line">      ans-=a[uni[u].cnt]; <span class="keyword">if</span>(roll)delta-=a[uni[u].cnt];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;\e[2mrollback\e[0m\n&quot;</span>);</span><br><span class="line">    ans-=delta,delta=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u,v,t,i=(<span class="keyword">int</span>)history.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">      <span class="built_in">std</span>::tie(u,v,t)=history[i];</span><br><span class="line">      <span class="keyword">if</span>(u)&#123;</span><br><span class="line">        anc[u]=t;</span><br><span class="line">        merge(uni[u],uni[v]);</span><br><span class="line">        uni[v].vec.concat_reverse(uni[u].vec);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        mrk[v]=<span class="number">0</span>,uni[v].pushup(c[v]),uni[v].clear();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    history.clear();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> id,l,r;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;query&gt; q;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)bln[i]=id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::sort(q.begin(),q.end(),[](<span class="keyword">const</span> query &amp;a,<span class="keyword">const</span> query &amp;b)&#123;<span class="keyword">return</span> a.l&gt;b.l;&#125;);</span><br><span class="line">    tree::reset();</span><br><span class="line">    <span class="keyword">int</span> cur=l,i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:q)&#123;</span><br><span class="line">      <span class="keyword">while</span>(it.l&lt;=cur)tree::add(cur--);</span><br><span class="line">      <span class="keyword">for</span>(tree::roll^=<span class="number">1</span>,i=l+<span class="number">1</span>;i&lt;=it.r;i++)tree::add(i);</span><br><span class="line">      ans[it.id]=tree::query();</span><br><span class="line">      tree::roll^=<span class="number">1</span>,tree::rollback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;block[S1&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; find=[&amp;](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> anc[x]==x?x:anc[x]=find(anc[x]);&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)anc[i]=i,siz[i]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])<span class="keyword">if</span>(v&lt;u)&#123;</span><br><span class="line">      <span class="keyword">int</span> fu=find(u),fv=find(v); <span class="keyword">if</span>(fu==fv)<span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span>(siz[fu]&gt;siz[fv])<span class="built_in">std</span>::swap(fu,fv);</span><br><span class="line">      pre[u]+=siz[fu],anc[fu]=fv,siz[fv]+=siz[fu];</span><br><span class="line">    &#125;</span><br><span class="line">    pre[u]+=G[u].size();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> S=<span class="built_in">std</span>::accumulate(pre+<span class="number">1</span>,pre+n+<span class="number">1</span>,<span class="number">0</span>)/S1+<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;&gt; block limit = %d\n&quot;</span>,S);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; seq=&#123;&#123;n+<span class="number">1</span>,n,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">    <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(seq.back())--,<span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(seq.back())+=pre[i];</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>||<span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(seq.back())+pre[i]&gt;S)seq.push_back(&#123;i,i<span class="number">-1</span>,<span class="number">0</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  seq.pop_back(),<span class="built_in">std</span>::reverse(seq.begin(),seq.end()),blocks=seq.size();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> _,i=<span class="number">0</span>;i&lt;blocks;i++)&#123;</span><br><span class="line">    <span class="built_in">std</span>::tie(block[i].l,block[i].r,_)=seq[i];</span><br><span class="line">    block[i].id=i,block[i].init();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)tree::uni[i].id=i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it:q)<span class="keyword">if</span>(bln[it.l]==bln[it.r])&#123;</span><br><span class="line">    tree::reset();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=it.l;i&lt;=it.r;i++)tree::add(i);</span><br><span class="line">    ans[it.id]=tree::query();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    block[bln[it.r]].q.push_back(it);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;blocks;i++)block[i].solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N/S2+<span class="number">5</span>;i++)tree::rub.push_back(i);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">&quot;1.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  read(n),read(m),read(x);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)read(c[i]),--c[i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u,v,i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    read(u),read(v);</span><br><span class="line">    G[u].push_back(v),G[v].push_back(u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x;i++)read(a[i]);</span><br><span class="line">  build();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> l,r,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    read(l),read(r);</span><br><span class="line">    q.push_back(&#123;l,r,i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  solve();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)print(ans[i],<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;clocks: %.4lf\n&quot;</span>,clock()/(<span class="keyword">double</span>)CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫队 </tag>
            
            <tag> 可回退数据结构 </tag>
            
            <tag> 势能莫队 </tag>
            
            <tag> 手写STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「是男人就过8题——Pony.ai」IntervalTree</title>
      <link href="loj6380/"/>
      <url>loj6380/</url>
      
        <content type="html"><![CDATA[<blockquote><p>定义区间树为线段树的拓展，即每次断开的位置可以不是线段的中心。</p><p>给定一个 $[1, n]$ 的区间树和 $q$ 次询问，每次询问包含一个正整数 $k$, 你需要求出有多少区间的时间复杂度恰好等于 $k$。</p><p>$n, q\le 10^5,\ k\le 10^9$。</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>在线回答询问无意义，考虑利用生成函数处理出所有询问的答案。</p><p>询问 $[l;r]$ 选中的线段（$ql=l \land qr=r$ 的线段，而非经过的线段），LCA 往两侧深度单调减（且中间平的一段的长度至多为 $2$）。</p><p>求出往两侧单调的生成函数合并，类似：</p><script type="math/tex; mode=display">L_u(x) = x (1 + L_l(x) + x (L_r(x) - x)) = x L_l(x) + x^2 L_r(x) + x - x^3 \\R_u(x) = x (1 + R_r(x) + x (R_l(x) - x)) = x R_r(x) + x^2 R_l(x) + x - x^3 \\</script><p>其中 $L,R$ 分别表示左/右端点和当前线段的左/右端点相同的线段（不包括完全相同的情况）的生成函数，$u$ 是当前节点，$l$ 是左儿子，$r$ 是右儿子。</p><p>处理一些平凡情况，在断点计算贡献：</p><script type="math/tex; mode=display">S_u(x) = x^{dep_u} (R_l(x) L_r(x) - x^2 + 1)</script><p>就能做到 $\text{polylog} \times \sum \small{\text{线段长度}}$ 复杂度。</p><p>进一步优化复杂度，考虑边分治：假设当前处理子树 $u$，边分的子树 $v$。递归处理出 $u \leftrightarrow v$ 的路径上的 $S,L,R$。下面考虑 $L_v,R_v$ 对路径上点的 $S$ 和 $u$ 的 $L,R$ 的贡献。</p><p>前者可以分别考虑 $L_v,R_v$ 的贡献，通过两次卷积得到。后者则是路径上的 $L,R$ 通过一定位移得到。</p><p>至于处理可以分别在两侧继续边分。复杂度 $O(n \log^2 n)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">  x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>); <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x,<span class="keyword">char</span> c)</span></span>&#123;print(x),<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> _,n,m,cnt,siz[N],vis[N],mid[N],ch[N][<span class="number">2</span>],fa[N],l[N],r[N],dep[N],rev[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  z(<span class="keyword">int</span> x=<span class="number">0</span>):x(x)&#123;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;w[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">fpow</span><span class="params">(z a,<span class="keyword">int</span> b)</span></span>&#123;z s=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;<span class="keyword">return</span> s;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;a)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i].x); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;a,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line">  a.resize(lim);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)<span class="keyword">if</span>(i&lt;rev[i])<span class="built_in">std</span>::swap(a[i],a[rev[i]]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;lim;len&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i+=(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">        z x=a[i+j],y=a[i+j+len]*w[j+len];</span><br><span class="line">        a[i+j]=x+y,a[i+j+len]=x-y;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="keyword">operator</span>+(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;b)&#123;</span><br><span class="line">  a.resize(<span class="built_in">std</span>::max(a.size(),b.size()));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]=a[i]+b[i]; <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="keyword">operator</span>-(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;b)&#123;</span><br><span class="line">  a.resize(<span class="built_in">std</span>::max(a.size(),b.size()));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]=a[i]-b[i]; <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="keyword">operator</span>*(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; b)&#123;</span><br><span class="line">  <span class="keyword">int</span> len=a.size()+b.size()<span class="number">-1</span>,lim=<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(lim&lt;len)lim&lt;&lt;=<span class="number">1</span>,++k;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)rev[i]=rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">  dft(a,lim),dft(b,lim);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*b[i];</span><br><span class="line">  dft(a,lim),<span class="built_in">std</span>::reverse(&amp;a[<span class="number">1</span>],&amp;a[lim]);</span><br><span class="line">  z inv=fpow(lim,mod<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*inv;</span><br><span class="line">  <span class="keyword">return</span> a.resize(len),a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift</span><span class="params">(z x,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;dst,<span class="keyword">size_t</span> dta)</span></span>&#123;</span><br><span class="line">  dst.resize(<span class="built_in">std</span>::max(dst.size(),dta+<span class="number">1</span>));</span><br><span class="line">  dst[dta]=dst[dta]+x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;src,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;dst,<span class="keyword">size_t</span> dta)</span></span>&#123;</span><br><span class="line">  dst.resize(<span class="built_in">std</span>::max(dst.size(),src.size()+dta));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;src.size();i++)dst[i+dta]=dst[i+dta]+src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfsInit</span><span class="params">(<span class="keyword">int</span> &amp;u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">    u=n<span class="number">-1</span>+l;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    u=++cnt;</span><br><span class="line">    dfsInit(ch[u][<span class="number">0</span>],l,mid[u],dep+<span class="number">1</span>),fa[ch[u][<span class="number">0</span>]]=u;</span><br><span class="line">    dfsInit(ch[u][<span class="number">1</span>],mid[u]+<span class="number">1</span>,r,dep+<span class="number">1</span>),fa[ch[u][<span class="number">1</span>]]=u;</span><br><span class="line">  &#125;</span><br><span class="line">  ::l[u]=l,::r[u]=r,::dep[u]=dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calcSize</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!u||vis[u])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> siz[u]=<span class="number">1</span>+calcSize(ch[u][<span class="number">0</span>])+calcSize(ch[u][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">std::pair&lt;int,int&gt; findSubTree(int u,int lim)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!u||vis[u])<span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span>(siz[u]&lt;lim)<span class="keyword">return</span> &#123;u,siz[u]&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x=ch[u][<span class="number">0</span>]?findSubTree(ch[u][<span class="number">0</span>],lim):<span class="built_in">std</span>::<span class="built_in">make_pair</span>(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; y=ch[u][<span class="number">1</span>]?findSubTree(ch[u][<span class="number">1</span>],lim):<span class="built_in">std</span>::<span class="built_in">make_pair</span>(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> x.second&gt;y.second?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">bool</span> fl,<span class="keyword">int</span> u,<span class="keyword">int</span> mov,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;f)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(vis[u]||l[u]==r[u])<span class="keyword">return</span> shift(<span class="number">1</span>,f,mov+<span class="number">1</span>);</span><br><span class="line">  shift(<span class="number">1</span>,f,mov+<span class="number">1</span>);</span><br><span class="line">  shift(mod<span class="number">-1</span>,f,mov+<span class="number">3</span>);</span><br><span class="line">  calc(fl,ch[u][<span class="number">0</span>],mov+(fl?<span class="number">2</span>:<span class="number">1</span>),f);</span><br><span class="line">  calc(fl,ch[u][<span class="number">1</span>],mov+(fl?<span class="number">1</span>:<span class="number">2</span>),f);</span><br><span class="line">&#125;</span><br><span class="line">std::pair&lt;std::vector&lt;z&gt;,std::vector&lt;z&gt;&gt; fuck(int u)&#123;</span><br><span class="line">  <span class="keyword">if</span>(vis[u]||l[u]==r[u])<span class="keyword">return</span> &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; Ll,Lr,Rl,Rr,Lu,Ru;</span><br><span class="line">  Lu=Ru=<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,mod<span class="number">-1</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::tie(Ll,Rl)=fuck(ch[u][<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::tie(Lr,Rr)=fuck(ch[u][<span class="number">1</span>]);</span><br><span class="line">  shift(Ll,Lu,<span class="number">1</span>),shift(Lr,Lu,<span class="number">2</span>);</span><br><span class="line">  shift(Rr,Ru,<span class="number">1</span>),shift(Rl,Ru,<span class="number">2</span>);</span><br><span class="line">  shift(Rl*Lr,ans,dep[u]);</span><br><span class="line">  <span class="keyword">return</span> &#123;Lu,Ru&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::pair&lt;std::vector&lt;z&gt;,std::vector&lt;z&gt;&gt; solve(int u)&#123;</span><br><span class="line">  <span class="keyword">if</span>(vis[u]||l[u]==r[u])<span class="keyword">return</span> &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">  <span class="keyword">int</span> siz=calcSize(u);</span><br><span class="line">  <span class="keyword">int</span> v=findSubTree(u,(siz*<span class="number">2</span>)/<span class="number">4</span>).first;</span><br><span class="line">  <span class="keyword">if</span>(v==<span class="number">-1</span>)<span class="keyword">return</span> fuck(u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; Lu,Ru,Lv,Rv,Lt,Rt,T;</span><br><span class="line">  <span class="built_in">std</span>::tie(Lv,Rv)=solve(v);</span><br><span class="line">  vis[v]=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">std</span>::tie(Lu,Ru)=solve(u);</span><br><span class="line">  vis[v]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> lmov=<span class="number">0</span>,rmov=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> p=v;p!=u;lmov+=ch[fa[p]][<span class="number">0</span>]==p?<span class="number">1</span>:<span class="number">2</span>,rmov+=ch[fa[p]][<span class="number">0</span>]==p?<span class="number">2</span>:<span class="number">1</span>,p=fa[p])&#123;</span><br><span class="line">    <span class="keyword">int</span> f=fa[p],q=ch[f][<span class="number">0</span>]==p?ch[f][<span class="number">1</span>]:ch[f][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(ch[f][<span class="number">0</span>]==p)&#123;</span><br><span class="line">      T.clear(),calc(<span class="number">0</span>,q,<span class="number">0</span>,T),shift(T,Lt,rmov+dep[f]-dep[u]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      T.clear(),calc(<span class="number">1</span>,q,<span class="number">0</span>,T),shift(T,Rt,lmov+dep[f]-dep[u]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  shift(mod<span class="number">-1</span>,Lv,<span class="number">1</span>);</span><br><span class="line">  shift(mod<span class="number">-1</span>,Rv,<span class="number">1</span>);</span><br><span class="line">  shift(Lv*Rt,ans,dep[u]);</span><br><span class="line">  shift(Rv*Lt,ans,dep[u]);</span><br><span class="line">  shift(Lv,Lu,lmov);</span><br><span class="line">  shift(Rv,Ru,rmov);</span><br><span class="line">  <span class="keyword">return</span> &#123;Lu,Ru&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)read(mid[i]);</span><br><span class="line">  dfsInit(_,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">  solve(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(n&lt;&lt;<span class="number">1</span>);i++)shift(<span class="number">1</span>,ans,dep[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)shift(mod<span class="number">-1</span>,ans,dep[i]+<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,q;i&lt;=m;i++)&#123;</span><br><span class="line">    read(q);</span><br><span class="line">    print(q&lt;ans.size()?ans[q].x:<span class="number">0</span>,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cnt=<span class="number">0</span>;</span><br><span class="line">  ans.clear();</span><br><span class="line">  <span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="keyword">sizeof</span>(ch));</span><br><span class="line">  <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;(N&lt;&lt;<span class="number">1</span>);len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    z wn=fpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>)); w[len]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)w[i+len]=w[i+len<span class="number">-1</span>]*wn;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))solution(),recycle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树分治 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「CometOJ Round #2 F」真实无妄她们的人生之路</title>
      <link href="cometoj-round2-f/"/>
      <url>cometoj-round2-f/</url>
      
        <content type="html"><![CDATA[<p>有 $n$ 种操作，第 $i$ 种操作使用后有 $p_i$ 的概率升级，$(1-p_i)$ 的概率不升级。</p><p>进行若干次操作后，如果主人公的等级为 $i$，就能产生 $a_i$ 的贡献。</p><p>对于每个 $i \in [1;n]$ 求出，使用 $j \neq i$ 的所有操作 $j$，主人公产生等级贡献的期望。</p><p>$n \leq 10^5$。</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>设 $C_i(x) = (1 - p_i + p_i x)$，$C(x) = \prod_{i=0}^{n-1} C_i(x)$</p><script type="math/tex; mode=display">ans_m = \sum_{i=0}^{n-1} a_i [x^i] \prod_{j \neq m} C_j(x)</script><p>这是一个线性算法，其转移矩阵为 $D_{m,i} = [x^i] \prod_{j \neq m} C_j(x)$</p><p>考虑其转置 $D^T_{m,i} = [x^m] \prod_{j \neq i} C_j(x)$</p><p>我们有做法</p><script type="math/tex; mode=display">ans_m = \prod_{i=0}^{n-1} a_i [x^m] \prod_{j \neq i} C_j(x)</script><script type="math/tex; mode=display">ANS(x) = \prod_{i=0}^n a_i \prod_{j \neq i} C_j(x)</script><p>有类似 $k$ 次幂和的 $O(n \log^2 n)$ 做法，可以改写成其转置。</p><p>具体的，我们令 $A(x) = \sum_{i \ge 0} a_i x^i$，为线段树根节点，$\operatorname{mul}^T$ 到叶子节点即可。</p><p>一般做法可以参见 zsy 博客：<a href="https://www.cnblogs.com/zhoushuyu/p/10777808.html">https://www.cnblogs.com/zhoushuyu/p/10777808.html</a></p><p>大概是利用多项式点乘的性质把贡献拆开然后多点求值（</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">  x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>); <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x,<span class="keyword">char</span> c)</span></span>&#123;print(x),<span class="built_in">putchar</span>(c);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  z(<span class="keyword">int</span> x=<span class="number">0</span>):x(x)&#123;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;a[N],p[N],ans[N],fac[N],ifac[N],inv[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">fpow</span><span class="params">(z a,<span class="keyword">int</span> b)</span></span>&#123;z s=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;<span class="keyword">return</span> s;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  n+=<span class="number">5</span>,inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)inv[i]=(mod-mod/i)*inv[mod%i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)fac[i]=fac[i<span class="number">-1</span>]*i,ifac[i]=ifac[i<span class="number">-1</span>]*inv[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> poly&#123;<span class="comment">//polynomial</span></span><br><span class="line">  <span class="keyword">int</span> len=<span class="number">1</span>,rev[N&lt;&lt;<span class="number">2</span>]; z w[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">vec</span>:</span><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt;&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt;::<span class="built_in">vector</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;resize(n);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)read(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i).x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size();i++)print(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](i).x,<span class="string">&quot; \n&quot;</span>[i+<span class="number">1</span>==size()]);&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lim=<span class="number">1</span>,k=<span class="number">0</span>; <span class="keyword">while</span>(lim&lt;n)lim&lt;&lt;=<span class="number">1</span>,++k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(;len&lt;lim;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">      z wn=fpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>)); w[len]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)w[i+len]=w[i+len<span class="number">-1</span>]*wn;</span><br><span class="line">    &#125;<span class="keyword">return</span> lim;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(vec &amp;a,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line">    a.resize(lim);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)<span class="keyword">if</span>(i&lt;rev[i])<span class="built_in">std</span>::swap(a[i],a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;lim;len&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i+=(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">          z x=a[i+j],y=a[i+j+len]*w[j+len];</span><br><span class="line">          a[i+j]=x+y,a[i+j+len]=x-y;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">idft</span><span class="params">(vec &amp;a,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line">    dft(a,lim),<span class="built_in">std</span>::reverse(&amp;a[<span class="number">1</span>],&amp;a[lim]); z inv=fpow(lim,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*inv;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> vec <span class="title">mul</span><span class="params">(vec a,vec b,<span class="keyword">int</span> l=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=~l?l:a.size()+b.size()<span class="number">-1</span>,lim=init(a.size()+b.size()<span class="number">-1</span>);</span><br><span class="line">    dft(a,lim),dft(b,lim);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*b[i];</span><br><span class="line">    <span class="keyword">return</span> idft(a,lim),a.resize(len),a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">namespace</span> extra&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> poly;</span><br><span class="line">    <span class="function">vec <span class="title">mulT</span><span class="params">(vec a,vec b)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> al=a.size(),bl=b.size(),lim=init(al);</span><br><span class="line">      dft(a,lim),<span class="built_in">std</span>::reverse(b.begin(),b.end()),dft(b,lim);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*b[i];</span><br><span class="line">      <span class="keyword">return</span> idft(a,lim),vec(&amp;a[bl<span class="number">-1</span>],&amp;a[al]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">poly::vec F[N&lt;&lt;<span class="number">2</span>],G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)&#123;F[u]=&#123;<span class="number">1</span>-p[l],p[l]&#125;; <span class="keyword">return</span>;&#125;</span><br><span class="line">  dfs1(u&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>),dfs1(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,((l+r)&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>,r);</span><br><span class="line">  F[u]=poly::mul(F[u&lt;&lt;<span class="number">1</span>],F[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)&#123;ans[l]=G[u][<span class="number">0</span>]; <span class="keyword">return</span>;&#125;</span><br><span class="line">  G[u&lt;&lt;<span class="number">1</span>]=poly::extra::mulT(G[u],F[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">  G[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=poly::extra::mulT(G[u],F[u&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">  dfs2(u&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>),dfs2(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,((l+r)&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  read(n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)read((<span class="keyword">int</span>&amp;)a[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x,y;i&lt;n;i++)read(x),read(y),p[i]=x*fpow(y,mod<span class="number">-2</span>);</span><br><span class="line">  dfs1(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>),G[<span class="number">1</span>]=poly::vec(a,a+n),dfs2(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)print(ans[i].x,<span class="string">&quot; \n&quot;</span>[i==n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转置原理 </tag>
            
            <tag> 多项式多点求值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「UR #17」滑稽树前做游戏</title>
      <link href="uoj372/"/>
      <url>uoj372/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个 $n$ 个点 $m$ 条边的无向图，其中每个点的点权是 $[0;1]$ 范围内生成的连续型随机变量，求：</p><script type="math/tex; mode=display">\max \{ \max_{i \in V} x_i + \max_{(u,v) \in E} (x_u + x_v) \}</script><p>的期望，答案对 $998244353$ 取模。</p><p>$n \leq 25$。（实际上可以跑 $n \leq 30$。。。</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><script type="math/tex; mode=display">ans = \int_0^2 Pr[\lambda = x] x \text dx = 2 - \int_0^2 Pr[\lambda \leq x] \text dx</script><p>考虑如何计算 $Pr[\lambda \leq x]$，设 $g(s,y,t)$ 表示对于点集 $s$，点权最大值 $\leq y$，答案 $\leq t$ 的概率。考虑其状态转义：</p><ul><li>如果生成的所有数都 $\leq \frac t 2$，则贡献为 $(\frac t 2)^{|s|}$</li><li>对于其他情况，考虑最大值点 $i$，并递归。</li></ul><script type="math/tex; mode=display">g(s,y,t) = (\tfrac t 2)^{|s|} + \sum_{i \in s} \int_{\tfrac t 2}^y g(s_i, x, t) (t - x)^{|s| - |s_i| - 1}\text dx</script><p>其中 $s_i$ 表示从 $s$ 中删除 $i$ 以及所有和 $i$ 相邻的点得到的点集。</p><p>如果我们直接暴力状压维护二元多项式转移显然麻烦的一比，而且常数还贼他妈大，考虑理性一点的方式。</p><p>首先，如果当前的状态是若干独立的联通块，可以直接把每个联通块的答案相乘，这可以大大减小状态数。</p><p>另外，我们可以注意到，对于二元多项式的每一项 $y^i t^j$，都满足 $i+j$ 是定值，即二元多项式 $g(s)$ 每项的幂次和都是 $|s|$。由二项式定理的系数可以方便得到。</p><p>最后，我们需要注意 $g(s,y,t)$ 的取值范围 $\tfrac t 2 \leq y \leq \min(1, t)$，所以答案是</p><script type="math/tex; mode=display">ans = 2 - \int_0^1 f(t,t) \text dt  - \int_1^2 f(1,t) \text dt</script><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">30</span>,mod=<span class="number">998244353</span>,inv2=(mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tim,G[N],vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  z(<span class="keyword">int</span> x=<span class="number">0</span>):x(x)&#123;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;ans,inp[N],inv[N],C[N][N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt;&gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;a,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;b)&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">c</span><span class="params">(a.size()+b.size()<span class="number">-1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.size();j++)</span><br><span class="line">      c[i+j]=c[i+j]+a[i]*b[j];</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">integral</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; f)</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">g</span><span class="params">(f.size()+<span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=f.size();i++)g[i]=f[i<span class="number">-1</span>]*inv[i];</span><br><span class="line">  <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">evaluation</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">  a=integral(a); z p,s; <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(p=<span class="number">1</span>,i=<span class="number">0</span>;i&lt;a.size();i++)s=s+a[i]*p,p=p*r;</span><br><span class="line">  <span class="keyword">for</span>(p=<span class="number">1</span>,i=<span class="number">0</span>;i&lt;a.size();i++)s=s-a[i]*p,p=p*l;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initfac</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  inp[<span class="number">0</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)inv[i]=(mod-mod/i)*inv[mod%i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)inp[i]=inp[i<span class="number">-1</span>]*inv2;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> res=<span class="number">1</span>&lt;&lt;u; vis[u]=tim;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)<span class="keyword">if</span>(((s&gt;&gt;v)&amp;<span class="number">1</span>)&amp;&amp;((G[u]&gt;&gt;v)&amp;<span class="number">1</span>)&amp;&amp;vis[v]!=tim)res|=dfs(v,s);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; &amp;s,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">b</span><span class="params">(k+<span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)b[i]=C[k][i]*(i&amp;<span class="number">1</span>?mod<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">  a=integral(a*b);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)s[i]=s[i]+a[i],s[<span class="number">0</span>]=s[<span class="number">0</span>]-inp[i]*a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; <span class="title">solve</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">map</span>.count(s))<span class="keyword">return</span> <span class="built_in">map</span>[s];</span><br><span class="line">  <span class="keyword">int</span> l=__builtin_popcount(s); <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; res; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> t,i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>((s&gt;&gt;i)&amp;<span class="number">1</span>)++tim,t=dfs(i,s),<span class="built_in">set</span>.push_back(t),s^=t;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x:<span class="built_in">set</span>)s|=x;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">set</span>.size()&gt;<span class="number">1</span>)&#123;res=&#123;<span class="number">1</span>&#125;; <span class="keyword">for</span>(<span class="keyword">auto</span> t:<span class="built_in">set</span>)res=res*solve(t);&#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    res.resize(l+<span class="number">1</span>),res[<span class="number">0</span>]=inp[l];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>((s&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">int</span> t=s^(s&amp;(G[i]|(<span class="number">1</span>&lt;&lt;i)));</span><br><span class="line">      update(res,solve(t),__builtin_popcount(s&amp;G[i]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>[s]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m,initfac(N),<span class="built_in">map</span>[<span class="number">0</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u,v,i=<span class="number">0</span>;i&lt;m;i++)<span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v,--u,--v,G[u]|=<span class="number">1</span>&lt;&lt;v,G[v]|=<span class="number">1</span>&lt;&lt;u;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;z&gt; s=solve((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>),a(n+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)a[n]=a[n]+s[i];</span><br><span class="line">  <span class="built_in">std</span>::reverse(s.begin(),s.end());</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;(<span class="number">2</span>-evaluation(s,<span class="number">1</span>,<span class="number">2</span>)-evaluation(a,<span class="number">0</span>,<span class="number">1</span>)).x&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「CF1336E2」Chiori and Doll Picking (hard version)</title>
      <link href="cf1336e2/"/>
      <url>cf1336e2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定 $n$ 个整数 $\langle a_1, a_2 … a_n \rangle$，在 $[0; 2^m)$ 的范围内。对于 $k \in [0; m]$，求选出一个子集使得异或和的二进制表示有 $k$ 个 $1$ 的方案数。</p><p>$1 \leq n \leq 2 \times 10^5,\ 0 \leq m \leq 53$。</p></blockquote><a id="more"></a><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>定义：</p><ul><li>$\operatorname{popcount}(x)$ 表示 $x$ 的二进制表示下 $1$ 的个数</li><li>$\langle i, j \rangle = \operatorname{popcount(i\ \&amp;\ j)}$</li></ul><p>对于线性基 $S$，定义：</p><ul><li>$\operatorname{span}(S)$ 表示 $S$ 张成的向量空间</li><li>$F(S) = \sum_{x \in \operatorname{span}(S)} z^x$</li><li>$P(S) = \sum_{x \in \operatorname{span}(S)} z^{\operatorname{popcount}(x)}$</li></ul><p>对于此题，定义</p><ul><li>$A$ 为由题中给定数得到的线性基</li></ul><p>首先你已经会了一个 $O(2^{\operatorname{rank}(A)})$ 的暴力，下文我们介绍一种 $O(2^{m-\operatorname{rank}(A)})$ 的算法，就可以通过分治在 $O(2^{m/2})$ 的时间复杂度内通过本题。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>由线性基的基本性质，可以得到：</p><script type="math/tex; mode=display">(z^x) * F(A) = F(A)</script><p>在此基础上枚举 $x \in \operatorname{span}(A)$ 有</p><script type="math/tex; mode=display">\begin{aligned}    F(A) * F(A) &= F(A) \cdot 2^{\operatorname{rank}(A)} \\    \operatorname{FWT}(F(A)) \cdot \operatorname{FWT}(F(A)) &= \operatorname{FWT}(F(A)) \cdot 2^{\operatorname{rank}(A)}\end{aligned}</script><p>由于是按位相乘，考虑方程 $x^2=x+1$ 的实根仅有</p><script type="math/tex; mode=display">\left\{ \begin{aligned} x_1 &= 0 \\ x_2 &= 2^{\operatorname{rank}(A)} \end{aligned} \right.</script><p>故 $[z^i] \operatorname{FWT}(F(A))  \in \{0, 2^{\operatorname{rank}(A)}\}$。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>让我们再回到 $\operatorname{FWT}$ 运算本身的意义：</p><script type="math/tex; mode=display">\begin{aligned}[z^i] \operatorname{FWT}(F(A))&= \sum_{x \in \operatorname{span}(A)} (-1)^{\langle i,x \rangle} \\&\in \{ 0, 2^{\operatorname{rank}(A)} \} \\\end{aligned}</script><p>如果存在 $x$ 使得 $(-1)^{\langle i,x \rangle} = -1$，则 $\operatorname{FWT}(A)_i$ 只能为 $0$。</p><p>$\langle x,y \rangle$ 和 $\oplus$ 运算满足结合律：</p><script type="math/tex; mode=display">\langle i,x \rangle \oplus \langle j,x \rangle = \langle i \oplus j, x \rangle</script><p>可以通过把 $\&amp;$ 理解为二进制按位乘法，$\oplus$ 理解为二进制不进位加法来证明。</p><p>故我们只需检验 $A$ 中的每个基底而非 $\operatorname{span}(A)$ 即可判断这一位的值。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>定义 $A$ 的正交线性基为 $B$，使得对于所有 $x \in \operatorname{span}(A), y \in \operatorname{span}(B)$，满足 $\operatorname{popcount(x \&amp; y)}$ 是偶数，且 $\operatorname{rank}(A) + \operatorname{rank}(B) = m$。</p><p>根据前面的引理，有</p><script type="math/tex; mode=display">B \cdot 2^{\operatorname{rank}(A)} = \operatorname{FWT} (A) \Leftrightarrow \operatorname{IFWT}(B \cdot 2^{\operatorname{rank}(A)}) = A</script><p>一种简单的正交线性基构造方式是</p><p><img src="https://i.loli.net/2020/04/26/wKc3le9s8vBzQYr.png" style="margin: auto;" /></p><p>用高斯消元整理关键位，旋转右上角到左下角得到。</p><p><img src="https://i.loli.net/2020/04/26/QckSaT4BjewVXNE.png" style="margin: auto;" /></p><p>证明可以考虑图中圈出矩形的左上角和右上角一定为 $1$，而两向量的异或的 $\operatorname{popcount}$ 为偶数，那么左下角和右上角的数要么全为 $0$，要么全为 $1$。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>知道了正交线性基怎么求，如何计算答案呢？</p><p>考虑用 $\operatorname{FWT}$ 表示答案统计：</p><script type="math/tex; mode=display">[z^c]P(A) = [z^0] (A * G^c) = [z^0] \operatorname{IFWT}(\operatorname{FWT}(F(A)) \cdot \operatorname{FWT}(G^c))</script><p>其中 $G^c$ 表示 $\sum_{x \geq 0} z^x [\operatorname{popcount}(x)=c]$。</p><p>其中：</p><script type="math/tex; mode=display">[z^0] \operatorname{IFWT}(X) = 2^{-m} [z^0] \operatorname{FWT}(X) = 2^{-m} \sum_{i \geq 0} [z^i] X</script><p>由于 $\operatorname{FWT}(F(A)) = F(B) \cdot 2^k$，而 $B$ 中的元素只有 $2^{\operatorname{rank}(B)} = 2^{m - \operatorname{rank}(A)}$ 个。故通过暴力得到 $P(B)$，即可通过组合数计算得 $P(A)$。</p><script type="math/tex; mode=display">[z^c]P(A) = 2^{k-m} \sum_{d \geq 0} [z^d] P(B) \sum_{i \geq 0} (-1)^i \binom d i \binom {m-d} {c-i}</script><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">60</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,c[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N],g[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">z(<span class="keyword">int</span> x=<span class="number">0</span>):x(x)&#123;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;p[N],q[N],fac[N],ifac[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;<span class="keyword">return</span> n&lt;m?<span class="number">0</span>:fac[n]*ifac[m]*ifac[n-m];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">fpow</span><span class="params">(z a,<span class="keyword">int</span> b)</span></span>&#123;z s=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;<span class="keyword">return</span> s;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;<span class="keyword">if</span>(f[i])x^=f[i]; <span class="keyword">else</span> &#123;f[i]=x; <span class="keyword">return</span>;&#125;&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="keyword">long</span> <span class="keyword">long</span> x; read(x),insert(x);&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;m;j++)<span class="keyword">if</span>((f[j]&gt;&gt;i)&amp;<span class="number">1</span>)f[j]^=f[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="keyword">if</span>(f[i])c[i]=k++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="keyword">if</span>(!f[i])c[i]=k+(t++);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="keyword">if</span>(f[i])<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)<span class="keyword">if</span>((f[i]&gt;&gt;j)&amp;<span class="number">1</span>)g[c[i]]|=<span class="number">1l</span>l&lt;&lt;c[j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)<span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&lt;m;j++)<span class="keyword">if</span>((g[i]&gt;&gt;j)&amp;<span class="number">1</span>)g[j]|=<span class="number">1l</span>l&lt;&lt;i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;m;i++)g[i]|=<span class="number">1l</span>l&lt;&lt;i;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=((m+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>))&#123;</span><br><span class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>,<span class="keyword">long</span> <span class="keyword">long</span>)&gt; dfs=[&amp;](<span class="keyword">int</span> i,<span class="keyword">long</span> <span class="keyword">long</span> s)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=k)&#123;p[__builtin_popcountll(s)].x++;<span class="keyword">return</span>;&#125;</span><br><span class="line">dfs(i+<span class="number">1</span>,s),dfs(i+<span class="number">1</span>,s^g[i]);</span><br><span class="line">&#125;;</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">0l</span>l);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>,<span class="keyword">long</span> <span class="keyword">long</span>)&gt; dfs=[&amp;](<span class="keyword">int</span> i,<span class="keyword">long</span> <span class="keyword">long</span> s)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=m)&#123;q[__builtin_popcountll(s)].x++;<span class="keyword">return</span>;&#125;</span><br><span class="line">dfs(i+<span class="number">1</span>,s),dfs(i+<span class="number">1</span>,s^g[i]);</span><br><span class="line">&#125;;</span><br><span class="line">dfs(k,<span class="number">0l</span>l);</span><br><span class="line">fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=ifac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)ifac[i]=(mod-mod/i)*ifac[mod%i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)ifac[i]=ifac[i<span class="number">-1</span>]*ifac[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=m;c++)<span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;=m;d++)<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=c;i++)&#123;</span><br><span class="line">p[c]=p[c]+fpow(<span class="number">2</span>,mod<span class="number">-1</span>+k-m)*q[d]*(i&amp;<span class="number">1</span>?mod<span class="number">-1</span>:<span class="number">1</span>)*C(d,i)*C(m-d,c-i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,(p[i]*fpow(<span class="number">2</span>,n-k)).x,<span class="string">&quot; \n&quot;</span>[i==m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「WC2016」论战捆竹竿</title>
      <link href="luogu4156/"/>
      <url>luogu4156/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个字符串 $s$，假设其 border 集合为 $S$，则每次你可以在 $s$ 后面接上一个长度为 $|s| - x$ 的字符串，其中 $x \in S$。问在总长度 $\leq w$ 的情况下有多少种可能的本质不同的长度。</p><p>$n \leq 5 \times 10^5,\ w \leq 10^{18}$。</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>做法和哥哥们的好像不大一样，不过本质应该差不多，但还是厚颜无耻的来水一篇。</p><p>border 的贡献是若干端等差数列，不妨设其中一段为 $kx + b$，其中 $x \in [0,l]$，考虑其产生的贡献整理后可以理解为三种：</p><ul><li>长度为 $b$ 的贡献，可以选择 $\inf$ 次；</li><li>长度为 $lk + b$ 的贡献，可以选择 $\inf$ 次；</li><li>长度为 $(0…l)k + b$ 的贡献，可以选择 $1$ 次。</li></ul><p>考虑前两种贡献，就是朴素的同余最短路问题。考虑先计算出他们的 dis 数组，再转移上第三类贡献。</p><p>对于每一种等差数列分开处理，分模 $k$ 的余数讨论，容易发现可以直接用单调队列维护下转移。</p><p>同余最短路跑 spfa 是线性的，可以直接用（。</p><p>时间复杂度 $O(n \log w)$。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,fl,mod;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w,ans,t[N],dis[<span class="number">2</span>][N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; key;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">atom</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> b,k,l;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;atom&gt; res;</span><br><span class="line"><span class="keyword">namespace</span> <span class="built_in">priority_queue</span>&#123;</span><br><span class="line"><span class="keyword">int</span> nod;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> pre,nxt,i;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">nod=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">set</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lim,hed,til;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">hed=til=<span class="number">0</span>,lim=l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_front</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hed==til)hed=til=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">e[e[til].pre].nxt=<span class="number">0</span>;</span><br><span class="line">til=e[til].pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hed==til)hed=til=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">e[e[hed].nxt].pre=<span class="number">0</span>;</span><br><span class="line">hed=e[hed].nxt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">e[++nod].i=i,e[nod].x=x;</span><br><span class="line"><span class="keyword">if</span>(!hed)&#123;</span><br><span class="line">hed=til=nod;</span><br><span class="line">e[nod].pre=e[nod].nxt=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">e[nod].nxt=hed,e[hed].pre=nod;</span><br><span class="line">hed=nod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(hed&amp;&amp;e[hed].x&gt;x)pop_back();</span><br><span class="line">push_back(i,x);</span><br><span class="line"><span class="keyword">while</span>(e[til].i&lt;i-lim)pop_front();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> e[til].x;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">priority_queue</span>::<span class="built_in">set</span> <span class="built_in">set</span>[N];</span><br><span class="line"><span class="keyword">namespace</span> border_finder&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b=<span class="number">131131</span>,p1=<span class="number">998244353</span>,p2=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> f[N],g[N],pf[N],pg[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vet;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> *a,<span class="keyword">int</span> *pa,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=(a[r]-(<span class="keyword">long</span> <span class="keyword">long</span>)a[l<span class="number">-1</span>]*pa[r-l+<span class="number">1</span>])%p;</span><br><span class="line"><span class="keyword">return</span> res&lt;<span class="number">0</span>?res+p:res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">pf[<span class="number">0</span>]=pg[<span class="number">0</span>]=<span class="number">1</span>,vet.clear(),res.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">pf[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)pf[i<span class="number">-1</span>]*b%p1;</span><br><span class="line">pg[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)pg[i<span class="number">-1</span>]*b%p2;</span><br><span class="line">f[i]=((<span class="keyword">long</span> <span class="keyword">long</span>)f[i<span class="number">-1</span>]*b+s[i]-<span class="string">&#x27;a&#x27;</span>)%p1;</span><br><span class="line">g[i]=((<span class="keyword">long</span> <span class="keyword">long</span>)g[i<span class="number">-1</span>]*b+s[i]-<span class="string">&#x27;a&#x27;</span>)%p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(query(<span class="number">1</span>,i,f,pf,p1)==query(n-i+<span class="number">1</span>,n,f,pf,p1)&amp;&amp;query(<span class="number">1</span>,i,g,pg,p2)==query(n-i+<span class="number">1</span>,n,g,pg,p2))</span><br><span class="line">vet.push_back(n-i);</span><br><span class="line">vet.push_back(n);</span><br><span class="line"><span class="keyword">int</span> first=vet[<span class="number">0</span>],delta=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;vet.size();i++)<span class="keyword">if</span>(!delta)&#123;</span><br><span class="line">delta=vet[i]-vet[i<span class="number">-1</span>],cnt=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vet[i]-vet[i<span class="number">-1</span>]==delta)++cnt;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">res.push_back((atom)&#123;first,delta,cnt&#125;);</span><br><span class="line">first=vet[i],delta=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res.push_back((atom)&#123;first,delta,cnt&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;key,<span class="keyword">long</span> <span class="keyword">long</span> *dis)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> l,r,q[N&lt;&lt;<span class="number">3</span>]; <span class="keyword">static</span> <span class="keyword">bool</span> inq[N];</span><br><span class="line">mod=*<span class="built_in">std</span>::max_element(key.begin(),key.end());</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">63</span>,mod&lt;&lt;<span class="number">3</span>);</span><br><span class="line">q[l=r=<span class="number">1</span>]=dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[l++]; inq[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> w:key)&#123;</span><br><span class="line"><span class="keyword">int</span> c=(u+w)/mod; <span class="keyword">int</span> v=u+w-c*mod;</span><br><span class="line"><span class="keyword">if</span>(dis[u]+c&lt;dis[v])&#123;</span><br><span class="line">dis[v]=dis[u]+c;</span><br><span class="line"><span class="keyword">if</span>(!inq[v])inq[v]=<span class="number">1</span>,q[++r]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> *f,<span class="keyword">long</span> <span class="keyword">long</span> *g,<span class="keyword">const</span> atom &amp;it)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!it.l)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mod;i++)&#123;</span><br><span class="line">g[i]=<span class="built_in">std</span>::min(f[i],f[(i-it.b+mod)%mod]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(t,<span class="number">63</span>,mod&lt;&lt;<span class="number">3</span>),<span class="built_in">priority_queue</span>::init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;it.k;i++)<span class="built_in">set</span>[i].reset(it.l);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=-mod;i&lt;mod;i++)&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;<span class="built_in">set</span>=::<span class="built_in">set</span>[(i+mod)%it.k];</span><br><span class="line"><span class="built_in">set</span>.insert((i+mod)/it.k,i&lt;<span class="number">0</span>?f[i+mod]+<span class="number">1</span>:f[i]);</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">0</span>)t[i]=<span class="built_in">set</span>.query();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mod;i++)&#123;</span><br><span class="line">g[i]=<span class="built_in">std</span>::min(f[i],i&lt;it.b?t[i-it.b+mod]+<span class="number">1</span>:t[i-it.b]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(read(T);T--;ans=<span class="number">0</span>,key.clear())&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%s&quot;</span>,&amp;n,&amp;w,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(w&lt;n)&#123;<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">border_finder::solve(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:res)&#123;</span><br><span class="line">key.push_back(x.b);</span><br><span class="line"><span class="keyword">if</span>(x.l)key.push_back(x.b+x.k*x.l);</span><br><span class="line">&#125;</span><br><span class="line">spfa(key,dis[fl]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:res)&#123;</span><br><span class="line">trans(dis[fl],dis[fl^<span class="number">1</span>],x);</span><br><span class="line">fl^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mod;i++)<span class="keyword">if</span>(dis[fl][i]!=<span class="number">4557430888798830399</span>)&#123;</span><br><span class="line">ans+=<span class="built_in">std</span>::max(<span class="number">0l</span>l,(w-n-i)/mod+<span class="number">1</span>-dis[fl][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 同余最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「UOJ Goodbye Jihai」新年的追逐战</title>
      <link href="uoj498/"/>
      <url>uoj498/</url>
      
        <content type="html"><![CDATA[<p>定义两个简单无向图 $G_{1} =( V_{1} , E_{1}) , G_{2} =( V_{2} , E_{2})$ 的乘积为一个新的图 $G_{1} \times G_{2} =\left( V^{\star} , E^{\star} \right)$。</p><p>其中新的点集 $V^{\star}$ 为:</p><script type="math/tex; mode=display">V^{\star} = \left\{ {(a, b)| a \in V_{1}, b \in V_{2} }\right\}</script><p>其中新的边集 $E^{\star}$ 为：</p><script type="math/tex; mode=display">E^{\star} =\left\{\left(( u_{1} , v_{1}) , ( u_{2} , v_{2})\right) \mid ( u_{1} , u_{2}) \in E_{1}, ( v_{1} , v_{2}) \in E_{2}\right\}</script><p>对于正整数 $n$ ，以及给定的图 $G_{1} , G_{2} , \dotsc , G_{n}$ ，两只鞋太太的家可以表示成</p><script type="math/tex; mode=display">H = (((G_1 \times G_2) \times G_3) \times \cdots) \times G_n</script><p>每个 $G_k$ 中任意两点间都有 $\frac12$ 的概率连边，求 $H$ 的连通块的期望。显然 $G_k$ 的全体取法共有 ${\large {2^{\binom{m_1}2 + \binom{m_2}2 + \cdots + \binom{m_n}2}}}$ 种。</p><p>方便起见，你只需要输出答案乘以 ${\large {2^{\binom{m_1}2 + \binom{m_2}2 + \cdots + \binom{m_n}2}}}$ ，对 $998244353$ 取模即可。</p><p>$1\le n, m_k\le 10^5$ 。</p><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>大概是一个二合一状物，我们搞出生成函数以后逐个合并。</p><p>考虑 $k=1$ 怎么做，假设 $G$ 为无标号无向图生成函数：</p><script type="math/tex; mode=display">G = \sum_{i\ge 0} \frac {2^{\binom i 2} x^i} {i!}</script><p>则 $\ln G$ 为无标号联通无向图生成函数， $n! [x^n] G \ln G$ 即为答案。</p><p>考虑 $k=2$ 怎么做，我们需要特判下孤立点的情况。合并的结果和两边的图是否为二分图（即题解所谓没有奇环）是有关的，当且仅当两侧都是二分图时会使得生成的图对应两个联通块。</p><p>考虑无标号二分图生成函数 $B$ （可以卷积解决）：</p><script type="math/tex; mode=display">B = \sum_{i \ge 0} \sum_{j \ge 0} \frac {2^{ij} x^{i+j}} {i! j!} = \sum_{i \ge 0} \sum_{j \ge 0} \frac {2^{\binom {i+j} 2 - \binom  i 2 - \binom j 2} x^{i+j}} {i! j!}</script><p>故非平凡二分图联通块生成函数为 $G (\frac {\ln B} 2 - 1)$ ，非平凡非二分图联通块生成函数为 $G (\ln G - \frac {\ln B} 2)$ ，非平凡联通块生成函数为 $G (\ln G - 1)$ 。孤立点联通块生成函数为 $x G$ （这几个均为无标号</p><p>考虑记录下期望点数，期望非平凡二分图联通块，期望非平凡非二分图联通块，期望孤立点个数，即可合并两个图的信息，做下去即可（</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> poly std::vector<span class="meta-string">&lt;z&gt;</span></span></span><br><span class="line"><span class="comment">// #define log(...) (void(0))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug log(<span class="meta-string">&quot;\33[2mPassing [%s] in LINE %d\33[0m\n&quot;</span>,__FUNCTION__,__LINE__);</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">  x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c=getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))f^=c==<span class="string">&#x27;-&#x27;</span>,c=getchar();</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=getchar(); <span class="keyword">if</span>(f)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,l,lim,m[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  z(<span class="keyword">int</span> x=<span class="number">0</span>):x(x)&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">half</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> x&amp;<span class="number">1</span>?(x+mod)&gt;&gt;<span class="number">1</span>:x&gt;&gt;<span class="number">1</span>;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>*(z a,z b)&#123;<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)a.x*b.x%mod;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>-(z a,z b)&#123;<span class="keyword">return</span> (a.x-=b.x)&lt;<span class="number">0</span>?a.x+mod:a.x;&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> z <span class="keyword">operator</span>+(z a,z b)&#123;<span class="keyword">return</span> (a.x+=b.x)&gt;=mod?a.x-mod:a.x;&#125;</span><br><span class="line">&#125;a[N],b[N],c[N],d[N],fac[N],inv[N],ifac[N],t1[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> z <span class="title">fpow</span><span class="params">(z a,<span class="keyword">int</span> b)</span></span>&#123;z s=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=s*a;<span class="keyword">return</span> s;&#125;</span><br><span class="line"><span class="keyword">namespace</span> Polynomial&#123;</span><br><span class="line">  <span class="keyword">int</span> rev[N&lt;&lt;<span class="number">2</span>]; z w[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">polyInit</span><span class="params">(<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lim=<span class="number">1</span>,k=<span class="number">0</span>; <span class="keyword">while</span>(lim&lt;l)lim&lt;&lt;=<span class="number">1</span>,++k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;len&lt;lim;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">      z wn=fpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>)); w[len]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)w[i+len]=w[i+len<span class="number">-1</span>]*wn;</span><br><span class="line">    &#125;<span class="keyword">return</span> lim;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(poly &amp;a,<span class="keyword">int</span> lim)</span></span>&#123; </span><br><span class="line">    a.resize(lim);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)<span class="keyword">if</span>(i&lt;rev[i])<span class="built_in">std</span>::swap(a[i],a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;lim;len&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i+=(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">          z x=a[i+j],y=a[i+j+len]*w[j+len];</span><br><span class="line">          a[i+j]=x+y,a[i+j+len]=x-y;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">idft</span><span class="params">(poly &amp;a,<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line">    dft(a,lim),<span class="built_in">std</span>::reverse(&amp;a[<span class="number">1</span>],&amp;a[lim]); z inv=fpow(lim,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*inv;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">poly <span class="title">polyInc</span><span class="params">(poly a,<span class="keyword">const</span> poly &amp;b)</span></span>&#123;</span><br><span class="line">    a.resize(<span class="built_in">std</span>::max(a.size(),b.size()));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]=a[i]+b[i]; <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">poly <span class="title">polyDec</span><span class="params">(poly a,<span class="keyword">const</span> poly &amp;b)</span></span>&#123;</span><br><span class="line">    a.resize(<span class="built_in">std</span>::max(a.size(),b.size()));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)a[i]=a[i]-b[i]; <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">poly <span class="title">polyMul</span><span class="params">(poly a,poly b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lim=polyInit(a.size()+b.size()<span class="number">-1</span>);</span><br><span class="line">    dft(a,lim),dft(b,lim);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=a[i]*b[i];</span><br><span class="line">    idft(a,lim),a.resize(l); <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">poly <span class="title">polyInv</span><span class="params">(poly f,<span class="keyword">int</span> len=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((len=~len?len:f.size())==<span class="number">1</span>)<span class="keyword">return</span> &#123;fpow(f[<span class="number">0</span>],mod<span class="number">-2</span>)&#125;;</span><br><span class="line">    poly a(&amp;f[0],&amp;f[len]),b=polyInv(f,(len+1)&gt;&gt;1);</span><br><span class="line">    <span class="keyword">int</span> lim=polyInit((len&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">    dft(a,lim),dft(b,lim);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)a[i]=b[i]*(<span class="number">2</span>-a[i]*b[i]);</span><br><span class="line">    idft(a,lim),a.resize(len); <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">poly <span class="title">polyDer</span><span class="params">(poly f)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=f.size()<span class="number">-2</span>;i++)f[i]=f[i+<span class="number">1</span>]*(i+<span class="number">1</span>); *--f.end()=<span class="number">0</span>; <span class="keyword">return</span> f;&#125;</span><br><span class="line">  <span class="function">poly <span class="title">polyInt</span><span class="params">(poly f)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=f.size()<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)f[i]=f[i<span class="number">-1</span>]*inv[i]; *f.begin()=<span class="number">0</span>; <span class="keyword">return</span> f;&#125;</span><br><span class="line">  <span class="function">poly <span class="title">polyLn</span><span class="params">(poly f)</span></span>&#123;<span class="keyword">return</span> polyInt(polyMul(polyInv(f),polyDer(f)));&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Polynomial;</span><br><span class="line">poly A,B,C,D,E,F,G,H;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span>&#123;</span></span><br><span class="line">  z n,a,b,c;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> z <span class="title">dump</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> a+b+c;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;n=G[x]*fac[x]*x,a=C[x]*fac[x],b=D[x]*fac[x],c=G[x<span class="number">-1</span>]*fac[x];&#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">inline</span> info <span class="keyword">operator</span>^(<span class="keyword">const</span> info &amp;a,<span class="keyword">const</span> info &amp;b)&#123;</span><br><span class="line">    <span class="keyword">static</span> info s;</span><br><span class="line">    s.n=a.n*b.n;</span><br><span class="line">    s.a=<span class="number">2</span>*a.a*b.a+a.a*b.b+a.b*b.a;</span><br><span class="line">    s.b=a.b*b.b;</span><br><span class="line">    s.c=a.c*b.c+a.c*(b.n-b.c)+b.c*(a.n-a.c);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;ans,tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line">  freopen(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  read(n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)read(m[i]),l=<span class="built_in">std</span>::max(l,m[i]+<span class="number">1</span>);</span><br><span class="line">  fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=l;i++)inv[i]=(mod-mod/i)*inv[mod%i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)ifac[i]=ifac[i<span class="number">-1</span>]*inv[i];</span><br><span class="line">  G.resize(l),B.resize(l);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)t1[i]=fpow(<span class="number">2</span>,(<span class="keyword">long</span> <span class="keyword">long</span>)i*(i<span class="number">-1</span>)/<span class="number">2</span>%(mod<span class="number">-1</span>));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)G[i]=t1[i]*ifac[i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)B[i]=ifac[i]*fpow(t1[i],mod<span class="number">-2</span>);</span><br><span class="line">  B=polyMul(B,B),B.resize(l);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)B[i]=B[i]*t1[i];</span><br><span class="line">  F=polyLn(G),H=G,F[<span class="number">1</span>]=<span class="number">0</span>,A=polyLn(B),A[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)A[i]=A[i].half();</span><br><span class="line">  C=polyMul(G,A),C.resize(l),E=polyMul(G,F),E.resize(l),D=polyDec(E,C);</span><br><span class="line">  ans.load(m[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)ans=ans^(tmp.load(m[i]),tmp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans.dump().x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成函数 </tag>
            
            <tag> 图计数 </tag>
            
            <tag> 期望 </tag>
            
            <tag> bluestain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「洛谷5655」基础数论函数练习题</title>
      <link href="luogu5655/"/>
      <url>luogu5655/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个长度为 $n$ 的数组 $\{a_i\}_{i=1}^n$，$Q$ 次询问，每次给定 $l$ 和 $r$ 查询 $\operatorname{lcm}(\{a_i\}_{i=l}^r)$，答案对 $10^9+7$ 取模。</p><p><strong>多组数据</strong>，$T,n,Q \leq 300,\ a_i \leq 10^{18}$。</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>把 $&lt; 10^{4.5}$ 的质数分开来处理，这样剩余每个数至多剩余 $3$ 个不同的质因子。考虑我们不需把每个数分解质因数，只需要能够构造一个等价的质数集合即可。构造方法如下：</p><p>对于所有 $1 \leq i &lt; j \leq n$，将 $\gcd(a_i, a_j), a_i / \gcd(a_i, a_j), a_j / \gcd(a_i, a_j)$ 加入到集合 $S$ 中。将其中存在 $S$ 中的数作为因数的数删掉，剩下的集合就是一个合法的质数集合。</p><p>接下来的一个朴素做法是莫队，需要一些精妙的实现使得那个 $\log$ 是加上去的而不是乘上去的。</p><ol><li>会用到质数的快速幂，这个可以预处理</li><li>相当于对于每个质数维护一个出现次数集合，支持加减和查询最大的出现次数。首先维护一个桶来去重，然后开一个 long long，并每次查询最高的 $1$ 出现的位置。</li></ol><p>时间复杂度近似于 $O(n^3 \log n)$，需要一些精细的实现。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>一度 TLE，后来被 zx2003 哥哥卡了半天卡进去了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pair std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">310</span>,M=<span class="number">32000</span>,L=<span class="number">5000</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = (<span class="number">1</span> &lt;&lt; <span class="number">21</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ibuf[SIZE], *iS, *iT, obuf[SIZE], *oS = obuf, *oT = oS + SIZE - <span class="number">1</span>, c, qu[<span class="number">55</span>]; <span class="keyword">int</span> f, qr;</span><br><span class="line"><span class="comment">// getchar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)</span></span><br><span class="line"><span class="comment">// print the remaining part</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">fwrite (obuf, <span class="number">1</span>, oS - obuf, <span class="built_in">stdout</span>);</span><br><span class="line">oS = obuf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// putchar</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span> <span class="params">(<span class="keyword">char</span> x)</span> </span>&#123;</span><br><span class="line">*oS ++ = x;</span><br><span class="line"><span class="keyword">if</span> (oS == oT) flush ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// input a signed integer</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gch</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=gc();<span class="keyword">for</span>(;<span class="built_in">isspace</span>(c);c=gc());</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gs</span><span class="params">(<span class="keyword">char</span>*c)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> x=gc();<span class="keyword">for</span>(;<span class="built_in">isspace</span>(x);x=gc());</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isspace</span>(x);x=gc())*c++=x;*c=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gi</span> <span class="params">(I &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (f = <span class="number">1</span>, c = gc(); c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c = gc()) <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; c &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; c &gt;= <span class="string">&#x27;0&#x27;</span>; c = gc()) x = x * <span class="number">10</span> + (c &amp; <span class="number">15</span>); x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print a signed integer</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">(I x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) putc (<span class="string">&#x27;0&#x27;</span>); <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc (<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">while</span> (x) qu[++ qr] = x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>,  x /= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (qr) putc (qu[qr --]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//no need to call flush at the end manually!</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flusher_</span> &#123;</span>~Flusher_()&#123;flush();&#125;&#125;io_flusher_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ExactDiv</span> &#123;</span></span><br><span class="line">  ExactDiv() &#123;&#125;</span><br><span class="line">  ExactDiv(ull n)&#123;</span><br><span class="line">  <span class="keyword">for</span>(z=<span class="number">0</span>;!(n&amp;<span class="number">1</span>);++z,n&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">  t=((ull)<span class="number">-1</span>) / n;</span><br><span class="line">i=mul_inv(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">ull <span class="title">mul_inv</span><span class="params">(ull n)</span> </span>&#123;</span><br><span class="line">    ull x = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) x *= <span class="number">2</span> - n * x;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">divide</span><span class="params">(<span class="keyword">const</span> ull&amp;n)</span> </span>&#123; <span class="keyword">return</span> ((n&gt;&gt;z&lt;&lt;z)==n) &amp;&amp; (n&gt;&gt;z)*<span class="keyword">this</span>-&gt;i&lt;=<span class="keyword">this</span>-&gt;t; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">const</span> ll&amp;n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n&gt;=<span class="number">0</span> &amp;&amp; divide(n);</span><br><span class="line">  &#125;</span><br><span class="line">  ull t, i,z;</span><br><span class="line">&#125;ediv[M],el[L];</span><br><span class="line"><span class="keyword">int</span> T,n,m,l,tl,pc,sqn,p[L],ans[N],vis[M],bln[N],pri[M];ll a[N],ls[L],pw[L][<span class="number">65</span>],ipw[L][<span class="number">65</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ll&gt; fac;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&gt; v[N];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Z=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> gg[Z][Z];</span><br><span class="line"><span class="keyword">int</span> C;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt; <span class="keyword">inline</span> T <span class="title">gcd</span><span class="params">(T x,T y)</span></span>&#123;++C;<span class="keyword">return</span> x&lt;Z &amp;&amp; y&lt;Z?gg[x][y]:(y?gcd(y,x%y):x);&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> query &amp;other)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> bln[l]==bln[other.l]?(r&lt;other.r)==(bln[l]&amp;<span class="number">1</span>):l&lt;other.l;</span><br><span class="line"><span class="comment">//return bln[l]==bln[other.l]?r&lt;other.r:l&lt;other.l;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=(ll)a*a%mod)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)s=(ll)s*a%mod;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> buc[L][<span class="number">65</span>],mx[L];</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">1</span>,zcnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&gt; &amp;vet)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:vet)&#123;</span><br><span class="line"><span class="keyword">if</span>(mx[it.first])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls[it.first])tot=tot*ipw[it.first][mx[it.first]]%mod;</span><br><span class="line"><span class="keyword">else</span> --zcnt;</span><br><span class="line">&#125;</span><br><span class="line">++buc[it.first][it.second];</span><br><span class="line">mx[it.first]=<span class="built_in">std</span>::max(mx[it.first],it.second);</span><br><span class="line"><span class="keyword">if</span>(mx[it.first])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls[it.first])tot=tot*pw[it.first][mx[it.first]]%mod;</span><br><span class="line"><span class="keyword">else</span> ++zcnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&gt; &amp;vet)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:vet)&#123;</span><br><span class="line"><span class="keyword">if</span>(mx[it.first])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls[it.first])tot=tot*ipw[it.first][mx[it.first]]%mod;</span><br><span class="line"><span class="keyword">else</span> --zcnt;</span><br><span class="line">&#125;</span><br><span class="line">--buc[it.first][it.second];</span><br><span class="line"><span class="keyword">for</span>(mx[it.first]=p[it.first];mx[it.first] &amp;&amp; !buc[it.first][mx[it.first]];--mx[it.first]);</span><br><span class="line"><span class="keyword">if</span>(mx[it.first])&#123;</span><br><span class="line"><span class="keyword">if</span>(ls[it.first])tot=tot*pw[it.first][mx[it.first]]%mod;</span><br><span class="line"><span class="keyword">else</span> ++zcnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fpow2</span><span class="params">(ll x,ll y,ll mo)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=(__int128)x*x%mo)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans=(__int128)x*x%mo;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ck</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;pri[i]&lt;=<span class="number">10</span>;++i)<span class="keyword">if</span>(fpow2(pri[i],x<span class="number">-1</span>,x)!=<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hmp</span>&#123;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> mo=<span class="number">1999</span>;</span><br><span class="line"><span class="keyword">int</span> h[mo],nxt[mo],xb;ll v[mo];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> z=x%mo,i=h[z];</span><br><span class="line"><span class="keyword">for</span>(;i &amp;&amp; v[i]!=x;i=nxt[i]);</span><br><span class="line"><span class="keyword">if</span>(!i)nxt[++xb]=h[z],h[z]=xb,v[xb]=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;ss;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;M;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])pri[++pc]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=pc&amp;&amp;i*pri[j]&lt;M;j++)&#123;</span><br><span class="line">vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pc;++i)ediv[i]=pri[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Z;++i)<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Z;++j)gg[i][j]=!i || !j?i+j:(i&gt;j?gg[i-j][j]:gg[i][j-i]);</span><br><span class="line"><span class="keyword">for</span>(io::gi(T);T--;)&#123;</span><br><span class="line">io::gi(n),io::gi(m),sqn=<span class="built_in">sqrt</span>(n),l=<span class="number">0</span>,fac.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)io::gi(a[i]),bln[i]=i/sqn,v[i].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)io::gi(q[i].l),io::gi(q[i].r),q[i].id=i,ans[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> id[M];<span class="built_in">memset</span>(id+<span class="number">1</span>,<span class="number">0</span>,pc&lt;&lt;<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,cnt;j&lt;=pc;j++)<span class="keyword">if</span>(ediv[j].divide(a[i]))&#123;</span><br><span class="line">cnt=<span class="number">0</span>;<span class="keyword">while</span>(a[i]%pri[j]==<span class="number">0</span>)++cnt,a[i]/=pri[j];</span><br><span class="line"><span class="keyword">if</span>(!id[j])ls[id[j]=++l]=pri[j],el[l]=ls[l],p[l]=<span class="number">0</span>;</span><br><span class="line">v[i].push_back(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(id[j],cnt)),p[id[j]]=<span class="built_in">std</span>::max(p[id[j]],cnt);</span><br><span class="line">&#125;</span><br><span class="line">ss.xb=<span class="number">0</span>;<span class="built_in">memset</span>(ss.h,<span class="number">0</span>,<span class="keyword">sizeof</span> ss.h);</span><br><span class="line"><span class="keyword">int</span> step=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">static</span> ll aa[N];<span class="keyword">int</span> nn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>)aa[++nn]=a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;++i)ss.insert(aa[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=nn;j+=step)&#123;</span><br><span class="line">ll pi=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;step &amp;&amp; j+k&lt;=nn;++k)pi=(__int128)pi*aa[j+k]%aa[i];</span><br><span class="line"><span class="keyword">if</span>(gcd(pi,aa[i])!=<span class="number">1</span>)<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;step &amp;&amp; j+k&lt;=nn;++k)&#123;</span><br><span class="line">ll x=gcd(aa[i],aa[j+k]);</span><br><span class="line">ss.insert(x);ss.insert(aa[i]/x);ss.insert(aa[j+k]/x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fac=<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ll&gt;(ss.v+<span class="number">1</span>,ss.v+ss.xb+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">std</span>::sort(fac.begin(),fac.end()),fac.erase(<span class="built_in">std</span>::unique(fac.begin(),fac.end()),fac.end());</span><br><span class="line">tl=l;</span><br><span class="line"><span class="keyword">if</span>(!fac.empty())<span class="keyword">for</span>(<span class="keyword">int</span> i=fac[<span class="number">0</span>]==<span class="number">1</span>?<span class="number">1</span>:<span class="number">0</span>,fl;fl=<span class="number">0</span>,i&lt;fac.size();i++)&#123;</span><br><span class="line">fl=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(fl)ls[++l]=fac[i],p[l]=<span class="number">0</span>,el[l]=ls[l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=tl+<span class="number">1</span>,cnt;j&lt;=l;j++)<span class="keyword">if</span>(el[j].divide(a[i]))&#123;</span><br><span class="line">cnt=<span class="number">0</span>;<span class="keyword">while</span>(a[i]%ls[j]==<span class="number">0</span>)++cnt,a[i]/=ls[j];</span><br><span class="line">v[i].push_back(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(j,cnt)),p[j]=<span class="built_in">std</span>::max(p[j],cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=p[i];j++)ipw[i][j]=fpow(pw[i][j]=fpow(ls[i]%mod,j),mod<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">std</span>::stable_sort(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ul=<span class="number">1</span>,ur=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(ul&gt;q[i].l)add(v[--ul]);<span class="keyword">while</span>(ur&lt;q[i].r)add(v[++ur]);</span><br><span class="line"><span class="keyword">while</span>(ul&lt;q[i].l)del(v[ul++]);<span class="keyword">while</span>(ur&gt;q[i].r)del(v[ur--]);</span><br><span class="line">ans[q[i].id]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ul&lt;=ur)del(v[ur--]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)io::print(ans[i]),io::putc(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「雅礼集训2017」PATH</title>
      <link href="loj6051/"/>
      <url>loj6051/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定 $ n $ 和 $ \{a_i\} $，满足 $ a_0 \geq a_1 \geq \cdots \geq a_{n - 1} \geq 0 $，求出在 $ n $ 维空间中从 $ (0, 0, \ldots, 0) $ 走到 $ (a_0, a_1, \ldots, a_{n - 1}) $，每一步使某一维坐标增加 $ 1 $ 的方案中随机选出一种，满足经过的所有点 $ (x_0, x_1, \ldots, x_{n - 1}) $ 都满足 $ x_0 \geq x_1 \geq \cdots \geq x_{n - 1} $ 的概率，答案模 $ 1004535809 $ 输出。</p><p>$n, a_i \leq 5\times 10^5$。</p></blockquote><a id="more"></a><p>利用钩子定理相关知识我们可以直接得到</p><script type="math/tex; mode=display">ans = \frac { \displaystyle \frac {m!} { \prod\limits_{(i, j) \in \lambda} h(i, j)}} { \displaystyle \frac {m!} {\prod\limits_{i=1}^n a_i} }</script><p>其中 $m = \sum\limits_{i=1}^n a_i$，$\lambda$ 是第 $i$ 行长度为 $a_i$ 的杨表，$h_\lambda(i, j)$ 表示杨表 $\lambda$ 中第 $i$ 行第 $j$ 个元素的钩子长度。</p><p>根据</p><script type="math/tex; mode=display">\prod\limits_{(i, j) \in \lambda} h_\lambda(i, j)= \frac { \prod\limits_{i=1}^n (a_i + n - i)! } { \prod\limits_{1 \leq i < j \leq n} \left((a_i - i) - (a_j - j)\right)}</script><p>那么</p><script type="math/tex; mode=display">\begin{aligned}ans&= \frac { \displaystyle \frac {m! \prod\limits_{1 \leq i < j \leq n} \left((a_i - i) - (a_j - j)\right)} { \prod\limits_{i=1}^n (a_i + n - i)! }} { \displaystyle \frac {m!} {\prod\limits_{i=1}^n a_i} } \\&= \frac { \prod\limits_{i=1}^n a_i} { \prod\limits_{i=1}^n (a_i + n - i)! } \times \prod\limits_{1 \leq i < j \leq n} \left((a_i - i) - (a_j - j)\right)\end{aligned}</script><p>发现处理的瓶颈在于右半部分。</p><p>注意到 $\{a_i\}_{i=1}^n$ 为仅为 $O(n)$ 级别。并且由于 $\forall i &lt; j ,\; a_i \geq a_j$ ，可得 $\forall i &lt; j, (a_i - i) &gt; (a_j - j)$ 。考虑卷积优化。</p><p>可以开两个多项式，一个幂次为 $(a_i - i)$ 一个幂次为 $-(a_i - i)$ ，卷积一波只取幂次为整数的即可。（如果由 $i \geq j$ 的贡献而成，一定满足幂次 $\leq 0$）。</p><p>时间复杂度 $O(n \log n)$ 。</p><!--more--><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2019.07.20 18:22:18</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = (l), i##ed = (r); i &lt;= i##ed; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> for_each(i, a) for (size_t i = 0, i##ed = a.size(); i &lt; i##ed; ++i)</span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">char</span> c = getchar(); <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">&#x27;-&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c)</span> </span>&#123; print(x), <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T a, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="string">&quot;&quot;</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) print(a[i], <span class="string">&quot; \n&quot;</span>[i == r]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e6</span> + <span class="number">10</span>, mod = <span class="number">1004535809</span>;</span><br><span class="line"><span class="keyword">int</span> n, l, tn, tm, ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], f[N], g[N], h[N], w[N], rev[N], fac[N], ifac[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> &amp;l, <span class="keyword">int</span> n)</span> </span>&#123; ++a[n], l = <span class="built_in">std</span>::max(l, n); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a -= b; <span class="keyword">return</span> a &lt; <span class="number">0</span> ? a + mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a += b; <span class="keyword">return</span> a &gt;= mod ? a - mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (ll)a * b - (ll)a * b / mod * mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">2</span> ? <span class="number">1</span> : mul(mod - mod / x, inv(mod % x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">int</span> s = <span class="number">1</span>; <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = mul(a, a)) <span class="keyword">if</span> (b &amp; <span class="number">1</span>) s = mul(s, a); <span class="keyword">return</span> s; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_fac</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fac[i] = mul(fac[i - <span class="number">1</span>], i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = mul(mod - mod / i, ifac[mod % i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = mul(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; l; len &lt;&lt;= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i += (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = a[i + j], y = mul(a[i + j + len], w[j + len]);</span><br><span class="line">a[i + j] = inc(x, y), a[i + j + len] = dec(x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *c, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> &amp;l)</span> </span>&#123;</span><br><span class="line">l = <span class="number">1</span>; <span class="keyword">int</span> k = <span class="number">0</span>; <span class="keyword">while</span> (l &lt; n + m - <span class="number">1</span>) l &lt;&lt;= <span class="number">1</span>, ++k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> wn, len = <span class="number">1</span>; len &lt; l; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">wn = fpow(<span class="number">3</span>, (mod - <span class="number">1</span>) / (len &lt;&lt; <span class="number">1</span>)), w[len] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) w[i + len] = mul(w[i + len - <span class="number">1</span>], wn);</span><br><span class="line">&#125; <span class="keyword">int</span> inv_l = inv(l);</span><br><span class="line">ntt(a, l), ntt(b, l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) c[i] = mul(a[i], b[i]);</span><br><span class="line"><span class="built_in">std</span>::reverse(c + <span class="number">1</span>, c + l), ntt(c, l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) c[i] = mul(c[i], inv_l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]);</span><br><span class="line">init_fac(n + a[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans = mul(ans, mul(fac[a[i]], ifac[a[i] + n - i]));</span><br><span class="line">setup(f, tn, a[i] - i + n);</span><br><span class="line">setup(g, tm, -a[i] + i + a[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// printf(&quot;%d &lt;&lt; %d %d : %d %d\n&quot;, ans, a[i], a[i] + n - i, fac[a[i]], mul(ifac[a[i] + n - i], fac[a[i] + n - i]));</span></span><br><span class="line">&#125;</span><br><span class="line">mul(f, g, h, tn + <span class="number">1</span>, tm + <span class="number">1</span>, l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, d = n + a[<span class="number">1</span>]; i + d &lt; l; i++) &#123;</span><br><span class="line"><span class="comment">// if (h[i + d]) printf(&quot;%d %d : %d\n&quot;, i, i + d, h[i + d]);</span></span><br><span class="line">ans = mul(ans, fpow(i, h[i + d]));</span><br><span class="line">&#125;</span><br><span class="line">print(ans, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> ringo::main(), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 杨表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「CTT2018」esperar</title>
      <link href="ctt2018-esperar/"/>
      <url>ctt2018-esperar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定 $n$ 和长度为 $n$ 的数组 $\{a_i \} _{i=1}^n$ ，求满足 $\forall i \in [1, n], c_i | b_i, b_i | a_i$ 并且 $\prod_{i=1}^n c_i^2  \leq \prod_{i=1}^n b_i$ 的 $\{b_i\}_{i=1}^n$ 和 $\{c_i\}_{i=1}^n$ 的方案数。</p><p>$n \leq 100,\ a_i \leq 10^9$。</p></blockquote><a id="more"></a><p>假设 $B = \prod_{i=1}^n b_i, C = \prod_{i=1}^n c_i^2$ ，易证 $C &lt; B$ 的方案与 $C &gt; B$ 的方案是相同的，可以算出总共的方案加上等于的方案再除以二。</p><p>考虑等于的方案，可把每个质因数分开考虑，相当于做背包取第 $0$ 项；</p><p>考虑总共的方案，对于在 $a_i$ 中出现了 $k$ 次的质因数 $x$，贡献为 $\frac 1 2 (k + 1) (k + 2)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2019.07.07 11:14:03</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">char</span> c = getchar(); <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">&#x27;-&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c)</span> </span>&#123; print(x), <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T a, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="string">&quot;&quot;</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) print(a[i], <span class="string">&quot; \n&quot;</span>[i == r]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">1e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, min, max, ans = <span class="number">1</span>, sum = <span class="number">1</span>, pcnt;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N][M], c[M][N], pri[M], vis[M], f[M], g[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a -= b; <span class="keyword">return</span> a &lt; <span class="number">0</span> ? a + mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a += b; <span class="keyword">return</span> a &gt;= mod ? a - mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (ll)a * b - (ll)a * b / mod * mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_pri</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; limit; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[i]) pri[++pcnt] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pcnt &amp;&amp; i * pri[j] &lt; limit; j++)</span><br><span class="line">&#123; vis[i * pri[j]] = <span class="number">1</span>; <span class="keyword">if</span> (i % pri[j] == <span class="number">0</span>) <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> *cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pcnt; i++) <span class="keyword">while</span> (x % pri[i] == <span class="number">0</span>) ++cnt[i], x /= pri[i];</span><br><span class="line"><span class="keyword">if</span> (x != <span class="number">1</span>) ++cnt[<span class="built_in">map</span>.find(x) == <span class="built_in">map</span>.end() ? (pri[++pcnt] = x, <span class="built_in">map</span>[x] = pcnt) : <span class="built_in">map</span>[x]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = min; i &lt;= max; i++) f[i] = <span class="number">0</span>;</span><br><span class="line">min = max = <span class="number">0</span>, f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= cnt[i]; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= j; k++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = min; i &lt;= max; i++)</span><br><span class="line">g[i + (k &lt;&lt; <span class="number">1</span>) - j] = inc(g[i + (k &lt;&lt; <span class="number">1</span>) - j], f[i]);</span><br><span class="line">min -= cnt[i], max += cnt[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = min; i &lt;= max; i++) f[i] = g[i], g[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), init_pri(<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]), split(a[i], b[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pcnt; j++) c[j][i] = b[i][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pcnt; i++) ans = mul(ans, solve(c[i]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pcnt; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) sum = mul(sum, mul((mod + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, mul(c[i][j] + <span class="number">2</span>, c[i][j] + <span class="number">1</span>)));</span><br><span class="line">print(mul(inc(ans, sum), (mod + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MEMSET0_LOCAL_ENVIRONMENT</span></span><br><span class="line">freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> ringo::main(), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「CF1053E」Euler tour</title>
      <link href="cf1053e/"/>
      <url>cf1053e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一棵树的欧拉序，其中被若干位被删除。你可以在被删除的位置填数，要求构造任何一个合法的欧拉序。</p><p>$n \leq 5 \times 10^5, |S| = 2n - 1$。</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="主体思路"><a href="#主体思路" class="headerlink" title="主体思路"></a>主体思路</h3><p>我们可以分治，$\operatorname{solve}(l, r)$ 表示解决 $l$ 到 $r$ 这段区间其中 $a_l = a_r$。</p><p>首先如果 $a_{(l + 1) \cdots (r - 1)}$ 中有何 $a_l$ 相等的数，那么可以继续分治，否则的话中间没有和 $a_l$ 相等的数。</p><p>对于所有满足 $l &lt; p &lt; q &lt; r \text{ and } a_p = a_q$，也可以递归，递归完后删除掉除了这段区间的根节点的点。这样的话 $a_{(l + 1) \cdots (r - 1)}$ 除 $0$ 外互不相同。</p><p>接下来考虑对于所有 $x, y, 0$ 或 $0, y, x$ 的，可以直接把空格处填成 $x$，然后缩掉。这样的话只会剩下连续的 $0$。</p><p>对于连续的 $0$，依次补过去，每补上一个，如果存在 $x, y, 0$ 或 $0, y, x$ 就继续缩掉。</p><p>最后只剩下一个点，也就完成了递归。</p><h3 id="对无解的判断"><a href="#对无解的判断" class="headerlink" title="对无解的判断"></a>对无解的判断</h3><ol><li>没有足够的点用来放</li><li>$a_1 \neq a_n$</li><li>对于 $\operatorname{solve}(l, r)$，$r - l + 1$ 是 $2$ 的倍数</li><li>对于 $\operatorname{solve}(l, r)$，递归完后 $0$ 的个数小于非 $0$ 个数 $-1$</li><li>存在 $p &lt; q &lt; r &lt; s$ 满足 $a_p = a_r \text{ and } a_q = a_s \text{ and } a_p \neq a_q \text{ and } a_r \neq a_s$</li></ol><h3 id="对于-a-1-a-2n-1-的特殊处理"><a href="#对于-a-1-a-2n-1-的特殊处理" class="headerlink" title="对于 $a_1, a_{2n - 1}$ 的特殊处理"></a>对于 $a_1, a_{2n - 1}$ 的特殊处理</h3><ol><li>如果 $a_1 \neq 0 \text{ and } a_{2n-1} \neq 0 \text{ and } a_1 \neq a_{2n-1}$，那么无解</li><li>如果 $(a_1 = 0 \text{ and } a_{2n-1} \neq 0) \text{ or } (a_1 \neq 0 \text{ and } a_{2n-1} = 0)$，那么 $a_1 = a_{2n-1} = \max(a_1, a_{2n-1})$ 即可</li><li>如果 $a_1 = a_{2n-1} = 0$ 那么需要给 $a_1, a_{2n-1}$ 分配一个标号。先枚举检查有没有可以从中间选出的可能，如果没有，就新分配一个点</li></ol><h3 id="对于递归的复杂度保证"><a href="#对于递归的复杂度保证" class="headerlink" title="对于递归的复杂度保证"></a>对于递归的复杂度保证</h3><p>直接实现的可能会超时，我把相同值的下标存到一起，然后根据「CTSC2018 青蕈领主」的方式建树，先把区间内与根节点不同色的递归处理掉，再来处理根节点同色的。</p><h3 id="对于扫描形如-x-y-0-和-y-x-0-的复杂度保证"><a href="#对于扫描形如-x-y-0-和-y-x-0-的复杂度保证" class="headerlink" title="对于扫描形如 $x, y, 0$ 和 $y, x, 0$ 的复杂度保证"></a>对于扫描形如 $x, y, 0$ 和 $y, x, 0$ 的复杂度保证</h3><p>可以开一个栈暴力扫过去，用类似括号匹配的方式处理，这里不多讲。</p><p>需要注意的是，我的实现是先把已有的 $x, y, 0$ 和 $y, x, 0$ 填掉，不然有可能不是最优方案。</p><p>然后两端同时扫描，如果没有可以直接填的，但给两端中的 $0$ 的点分配标号可以配对的话，就分配掉。如果都没有，随便一端填个数即可。</p><h3 id="复杂度证明"><a href="#复杂度证明" class="headerlink" title="复杂度证明"></a>复杂度证明</h3><p>一个数只会在某一层被处理掉，对那一层的复杂度贡献是 $\mathcal O(1)$ 的，所以这一部分的时间复杂度为 $\mathcal O(n)$。</p><p>由于需要判断无解等等情况，可以写一个支持区间查询最大值 / 最小值的线段树 / ST 表，时间复杂度 $\mathcal O(n \log n)$，其中 ST 表的空间复杂度为 $\mathcal O(n \log n)$，可能会导致 $\text{MLE}$。</p><p>综上，时间复杂度 $\mathcal O(n \log n)$，空间复杂度 $\mathcal O(n)$，可以通过本题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2019.05.08 21:39:49</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">&#x27;-&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c)</span> </span>&#123; print(x), <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T a, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="string">&quot;&quot;</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) print(a[i], <span class="string">&quot; \n&quot;</span>[i == r]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, L = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N], del[N], use[N], <span class="built_in">log</span>[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[N], G[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val, id;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">info</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">info</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123; val = a[k], id = k; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">info</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; val = a, id = b; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;info&gt; s, h, t, bkt[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="built_in">std</span>::greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">noSolution</span><span class="params">()</span> </span>&#123; <span class="built_in">puts</span>(<span class="string">&quot;no&quot;</span>), <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">minimax</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> min, max;</span><br><span class="line"><span class="keyword">inline</span> minimax <span class="keyword">operator</span>^(<span class="keyword">const</span> minimax &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="built_in">std</span>::min(min, other.min), <span class="built_in">std</span>::max(max, other.max)&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> seg &#123;</span><br><span class="line">minimax b[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, mid;</span><br><span class="line">minimax x;</span><br><span class="line">&#125; p[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">p[u].l = l, p[u].r = r, p[u].mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123; p[u].x = b[l]; <span class="keyword">return</span>; &#125;</span><br><span class="line">build(u &lt;&lt; <span class="number">1</span>, l, p[u].mid);</span><br><span class="line">build(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, p[u].mid + <span class="number">1</span>, r);</span><br><span class="line">p[u].x = p[u &lt;&lt; <span class="number">1</span>].x ^ p[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">minimax <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p[u].l == l &amp;&amp; p[u].r == r) <span class="keyword">return</span> p[u].x;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= p[u].mid) <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (l &gt; p[u].mid) <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span>, l, p[u].mid) ^ query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, p[u].mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> tmp[N];</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (!tmp[a[i]]) tmp[a[i]] = i;</span><br><span class="line">b[i].min = tmp[a[i]];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b[i].min = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= <span class="number">1</span>; i--) <span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (!tmp[a[i]]) tmp[a[i]] = i;</span><br><span class="line">b[i].max = tmp[a[i]];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b[i].max = i;</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">minimax <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> query(<span class="number">1</span>, l, r); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">possible</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!((r - l + <span class="number">1</span>) &amp; <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (l + <span class="number">1</span> &gt; r - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">auto</span> it = query(l + <span class="number">1</span>, r - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> it.max &lt;= r &amp;&amp; it.min &gt;= l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (use[cur]) cur++;</span><br><span class="line"><span class="keyword">if</span> (cur &gt; n) <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;[No enougth nodes] No solution.\n&quot;</span>, noSolution();</span><br><span class="line"><span class="keyword">return</span> use[cur] = <span class="number">1</span>, cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; jump;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> y : G[x]) &#123;</span><br><span class="line">solve(y);</span><br><span class="line">jump.push_back(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(*v[y].begin(), *--v[y].end()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::reverse(jump.begin(), jump.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, L, R, at = <span class="number">0</span>; i + <span class="number">1</span> &lt; v[x].size(); i++) &#123;</span><br><span class="line">L = v[x][i], R = v[x][i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!((R - L + <span class="number">1</span>) &amp; <span class="number">1</span>)) noSolution(); <span class="comment">// 要求每个这样的区间为奇数</span></span><br><span class="line">s.clear(), s.push_back(info(L));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = L + <span class="number">1</span>; i &lt;= R - <span class="number">1</span>; i++) &#123;</span><br><span class="line">s.push_back(info(i));</span><br><span class="line"><span class="keyword">if</span> (at &lt; jump.size() &amp;&amp; i == jump[at].first) i = jump[at++].second;</span><br><span class="line">&#125;</span><br><span class="line">s.push_back(info(R));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c0 = <span class="number">0</span>, c1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + <span class="number">1</span> &lt; s.size(); i++)</span><br><span class="line">s[i].val ? ++c1 : ++c0;</span><br><span class="line"><span class="keyword">if</span> (c0 &lt; c1 - <span class="number">1</span>) noSolution();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tl = <span class="number">0</span>, tr = s.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (tl &lt; s.size() &amp;&amp; s[tl].val) tl++;</span><br><span class="line"><span class="keyword">while</span> (tr &gt;= <span class="number">0</span> &amp;&amp; s[tr].val) tr--;</span><br><span class="line"><span class="keyword">if</span> (tl == s.size()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = tl; i &lt;= tr; i++)</span><br><span class="line"><span class="keyword">if</span> (s[i].val) &#123;</span><br><span class="line"><span class="keyword">if</span> (t.size() &gt;= <span class="number">2</span> &amp;&amp; (--t.end())-&gt;val &amp;&amp; !(----t.end())-&gt;val) &#123;</span><br><span class="line">a[(----t.end())-&gt;id] = s[i].val;</span><br><span class="line">del[(----t.end())-&gt;id] = del[(--t.end())-&gt;id] = <span class="number">1</span>;</span><br><span class="line">t.pop_back(), t.pop_back(), t.push_back(s[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t.push_back(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (t.size() &gt;= <span class="number">2</span> &amp;&amp; (--t.end())-&gt;val &amp;&amp; (----t.end())-&gt;val) &#123;</span><br><span class="line">a[s[i].id] = (----t.end())-&gt;val;</span><br><span class="line">del[s[i].id] = del[(--t.end())-&gt;id] = <span class="number">1</span>;</span><br><span class="line">t.pop_back();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t.push_back(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.clear(), <span class="built_in">std</span>::swap(t, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.size(); i++)</span><br><span class="line"><span class="keyword">if</span> (del[t[i].id]) del[t[i].id] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> s.push_back(t[i]);</span><br><span class="line">t.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = s.size() - <span class="number">1</span>; i &lt;= j; ) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i].val) &#123;</span><br><span class="line">h.push_back(s[i++]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[j].val) &#123;</span><br><span class="line">t.push_back(s[j--]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (h.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">a[s[i].id] = s[i].val = (----h.end())-&gt;val;</span><br><span class="line">h.pop_back(), i++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">a[s[j].id] = s[j].val = (----t.end())-&gt;val;</span><br><span class="line">t.pop_back(), j--;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a[s[i].id] = s[i].val = newNode();</span><br><span class="line">h.push_back(s[i++]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h.clear(), t.clear(), s.clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), m = (n &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, <span class="built_in">log</span>[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">log</span>[i] = <span class="built_in">log</span>[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">read(a[i]);</span><br><span class="line"><span class="keyword">if</span> (a[i]) use[a[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">1</span>] &amp;&amp; a[m] &amp;&amp; a[<span class="number">1</span>] != a[m]) noSolution();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!a[<span class="number">1</span>] &amp;&amp; !a[m]) &#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> any = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= m - <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &amp;&amp; a[i] != a[<span class="number">2</span>] &amp;&amp; a[i] != a[m - <span class="number">1</span>] &amp;&amp; possible(<span class="number">1</span>, i) &amp;&amp; possible(i, m))</span><br><span class="line">any = <span class="built_in">std</span>::max(any, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;any = &quot;</span> &lt;&lt; any &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">a[<span class="number">1</span>] = a[m] = any ? any : newNode();</span><br><span class="line">&#125; <span class="keyword">else</span> a[<span class="number">1</span>] = a[m] = a[<span class="number">1</span>] | a[m];</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (a[i]) v[a[i]].push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (v[i].size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + <span class="number">1</span> &lt; v[i].size(); j++)</span><br><span class="line"><span class="keyword">if</span> (!possible(v[i][j], v[i][j + <span class="number">1</span>])) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;[Impossible section] &quot;</span> &lt;&lt; v[i][j] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i][j + <span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">noSolution();</span><br><span class="line">&#125;</span><br><span class="line">bkt[*--v[i].end()].push_back(&#123;*v[i].begin(), i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : bkt[i]) &#123;</span><br><span class="line"><span class="keyword">while</span> (s.size() &amp;&amp; (--s.end())-&gt;val &gt;= it.val) &#123;</span><br><span class="line">G[it.id].push_back((--s.end())-&gt;id);</span><br><span class="line">s.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">s.push_back(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s.clear();</span><br><span class="line">solve(a[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">print(a, <span class="number">1</span>, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> memset0</span></span><br><span class="line">freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> ringo::main(), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「HNOI2019」白兔之舞</title>
      <link href="luogu5293/"/>
      <url>luogu5293/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有一张顶点数为 $(L+1)\times n$ 的有向图。这张图的每个顶点由一个二元组$(u,v)$表示$(0\le u\le L,1\le v\le n)$。<br>这张图不是简单图，对于任意两个顶点 $(u_1,v_1)(u_2,v_2)$，如果 $u_1&lt;u_2$，则从 $(u_1,v_1)$ 到 $(u_2,v_2)$ 一共有 $w[v_1][v_2]$ 条不同的边，如果 $u_1\ge u_2$ 则没有边。</p><p>白兔将在这张图上上演一支舞曲。白兔初始时位于该有向图的顶点 $(0,x)$。</p><p>白兔将会跳若干步。每一步，白兔会从当前顶点沿任意一条出边跳到下一个顶点。白兔可以在任意时候停止跳舞（也可以没有跳就直接结束）。当到达第一维为 $L$ 的顶点就不得不停止，因为该顶点没有出边。</p><p>假设白兔停止时，跳了 $m$ 步，白兔会把这只舞曲给记录下来成为一个序列。序列的第 $i$ 个元素为它第 $i$ 步经过的边。</p><p>问题来了：给定正整数 $k$ 和 $y$（$1\le y\le n$），对于每个 $t$（$0\le t&lt;k$），求有多少种舞曲（假设其长度为 $m$）满足 $m \bmod k=t$，且白兔最后停在了坐标第二维为 $y$ 的顶点？</p><p>两支舞曲不同定义为它们的长度（$m$）不同或者存在某一步它们所走的边不同。</p><p>输出的结果对 $p$ 取模。保证 $p$ 是质数，$10^8 \leq p \leq 2^{30}$。</p><p>$1 \leq n \leq 3,\ 1 \leq k \leq 65536$。</p></blockquote><p>对于 $n=1$ 的情况，考虑令 $a = w_{1, 1}$ ，用 $f_i$ 表示跳了 $i$ 步的答案，则 $f_i = a^i \binom n i$ 。</p><p>考虑</p><script type="math/tex; mode=display">\begin{aligned}ans&= \sum_{i \bmod k=m} f_i = \sum_{i \bmod k=m} a^i \binom ni \\&= \sum_{i=0}^n [k|i-m] a^i \binom ni \\&= \sum_{i=0}^n \frac 1k \sum_{j=0}^{k-1} \omega_k^{j(i-m)} a^i \binom ni \\&= \frac 1k \sum_{j=0}^{k-1} \omega^{-mj}_k \sum_{i=0}^n \binom ni (\omega^{j}_k a)^i 1^{n-i} \\&= \frac 1k \sum_{i=0}^{k-1} \omega^{-mi}_k \left(\omega^i_k a + 1\right)^n\end{aligned}</script><p>考虑后面的 $\displaystyle{\left(\omega^i_k a + 1\right)^n}$ 对于固定的 $i$ 是相同的，可以与先处理出 $i \in [0, k)$ 的值，设为 $c(i)$。</p><p>一个暴力是多项式多点求值出多项式 $\displaystyle{\frac 1k \sum_{i=0}^{k-1} x^i c(i)}$ 在 $\omega_k^0, \omega_k^{-1}, \omega_k^{-2} … \omega_k^{-k+1}$ 的值，复杂度 $O(k \log^2 k)$，有学长写了一发，貌似被针对了过不去 …</p><p>考虑是否有更优秀的做法来处理 $\omega^{-mj}$？毛爷爷论文中提到把 $ij$ 拆成 $\frac {(i+j)^2} 2 - \frac {i^2} 2 - \frac {j^2} 2$ ，然而可能存在单位根没有二次剩余的情况。考虑把 $ij$ 拆成 $\binom {i+j} 2 - \binom i2 - \binom j2$ ，那么原式可以化为</p><script type="math/tex; mode=display">\begin{aligned}ans&= \frac 1k \sum_{i=0}^{k-1} \omega^{-mi}_k c(i) \\&= \frac 1k \sum_{i=0}^{k-1} \omega^{\binom {i-m} 2 - \binom i2 - \binom {-m}2} _k c(i) \\&= \frac {\omega^{- \binom {-m}2}} k \sum_{i=0}^{k-1} \omega^{\binom {i-m} 2}_k \left( \omega^{- \binom i2}_k  c(i)\right)  \\\end{aligned}</script><p>是一个卷积的形式，复杂度 $O(k \log k)$。</p><p>考虑 $n \le 3$ 的情况，原来的转移会变成矩阵，类似于 BZOJ3328 PYXFIB，可以发现 $c(i)$ 仍然是一个常数，同理卷积即可。</p><a id="more"></a><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2019.04.08 17:56:11</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">&#x27;-&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = getchar();</span><br><span class="line"><span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c)</span> </span>&#123; print(x), <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">7e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, L, x, y, mod;</span><br><span class="line"><span class="keyword">int</span> c[N], w[N], ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a -= b; <span class="keyword">return</span> a &lt; <span class="number">0</span> ? a + mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; a += b; <span class="keyword">return</span> a &gt;= mod ? a - mod : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (ll)a * b - (ll)a * b / mod * mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">2</span> ? <span class="number">1</span> : mul(mod - mod / x, inv(mod % x)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_omega</span><span class="params">(T x)</span> </span>&#123; x = x % k; <span class="keyword">return</span> w[x &lt; <span class="number">0</span> ? x + k : x]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">int</span> s = <span class="number">1</span>; <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = mul(a, a)) <span class="keyword">if</span> (b &amp; <span class="number">1</span>) s = mul(s, a); <span class="keyword">return</span> s; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> phi = <span class="number">1</span>, tmp = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= tmp; i++)</span><br><span class="line"><span class="keyword">if</span> (tmp % i == <span class="number">0</span>) &#123;</span><br><span class="line">phi *= i - <span class="number">1</span>, tmp /= i;</span><br><span class="line"><span class="keyword">while</span> (tmp % i == <span class="number">0</span>) phi *= i, tmp /= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp != <span class="number">1</span>) phi *= tmp - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; e(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= phi; i++)</span><br><span class="line"><span class="keyword">if</span> (phi % i == <span class="number">0</span>) &#123;</span><br><span class="line">e.push_back(i);</span><br><span class="line"><span class="keyword">if</span> (i * i != phi) e.push_back(phi / i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">2</span>; ; w++) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; ::iterator it = e.begin(); it != e.end(); it++)</span><br><span class="line"><span class="keyword">if</span> (fpow(w, *it) == <span class="number">1</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">print(a[i][j], <span class="string">&quot; \n&quot;</span>[j == <span class="number">2</span>]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> matrix <span class="keyword">operator</span> + (matrix a, <span class="keyword">const</span> matrix &amp;b) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">a.a[i][j] = sub(a.a[i][j], b.a[i][j]);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> matrix <span class="keyword">operator</span> * (matrix a, <span class="keyword">int</span> b) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">a.a[i][j] = mul(a.a[i][j], b);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> matrix &amp;a, <span class="keyword">const</span> matrix &amp;b) &#123;</span><br><span class="line">matrix c; <span class="built_in">memset</span>(c.a, <span class="number">0</span>, <span class="keyword">sizeof</span>(c.a));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++)</span><br><span class="line">c.a[i][j] = (c.a[i][j] + (ll)a.a[i][k] * b.a[k][j]) % mod;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">inline</span> matrix <span class="title">fpow</span><span class="params">(matrix a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">matrix s; <span class="built_in">memset</span>(s.a, <span class="number">0</span>, <span class="keyword">sizeof</span>(s.a)), s.a[<span class="number">0</span>][<span class="number">0</span>] = s.a[<span class="number">1</span>][<span class="number">1</span>] = s.a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a)</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) s = s * a;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125; I, S, A;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span> :</span> <span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; &#123;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; ::<span class="built_in">vector</span>;</span><br><span class="line">&#125; f, g;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MTT &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = N &lt;&lt; <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line">  ll p30 = <span class="number">1l</span>l &lt;&lt; <span class="number">30</span>, p15 = <span class="number">1l</span>l &lt;&lt; <span class="number">15</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> a, b;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">complex</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">complex</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; a = x, b = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">complex</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; a = x, b = y; &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="built_in">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="built_in">complex</span> &amp;other) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">complex</span>(a + other.a, b + other.b); &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="built_in">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="built_in">complex</span> &amp;other) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">complex</span>(a - other.a, b - other.b); &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="built_in">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="built_in">complex</span> &amp;other) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">complex</span>(a * other.a - b * other.b, a * other.b + b * other.a); &#125;</span><br><span class="line">  &#125; w[M], iw[M], a[M], b[M], c[M], d[M], e[M], f[M], g[M], h[M];</span><br><span class="line">  <span class="keyword">int</span> lim, rev[M];</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lim = <span class="number">1</span>, k = <span class="number">0</span>; <span class="keyword">while</span> (lim &lt; len) lim &lt;&lt;= <span class="number">1</span>, ++k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span><br><span class="line">    len = lim &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) w[i + len] = <span class="built_in">complex</span>(<span class="built_in">cos</span>(pi * i / len), <span class="built_in">sin</span>(pi * i / len));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) iw[i + len] = <span class="built_in">complex</span>(<span class="built_in">cos</span>(pi * i / len), -<span class="built_in">sin</span>(pi * i / len));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) w[i] = w[i &lt;&lt; <span class="number">1</span>], iw[i] = iw[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> lim;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="built_in">complex</span> *a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; lim; len &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i += (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">          <span class="built_in">complex</span> x = a[i + j], y = a[i + j + len] * w[j + len];</span><br><span class="line">          a[i + j] = x + y, a[i + j + len] = x - y;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ifft</span><span class="params">(<span class="built_in">complex</span> *a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; lim; len &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i += (len &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">          <span class="built_in">complex</span> x = a[i + j], y = a[i + j + len] * iw[j + len];</span><br><span class="line">          a[i + j] = x + y, a[i + j + len] = x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) a[i].a /= lim;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">inline</span> poly <span class="keyword">operator</span> * (<span class="keyword">const</span> poly &amp;F, <span class="keyword">const</span> poly &amp;G) &#123;</span><br><span class="line">    <span class="function">poly <span class="title">H</span><span class="params">(F.size() + G.size() - <span class="number">1</span>)</span></span>; lim = init(H.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; F.size(); i++) a[i] = F[i] &gt;&gt; <span class="number">15</span>, b[i] = F[i] &amp; <span class="number">32767</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.size(); i++) c[i] = G[i] &gt;&gt; <span class="number">15</span>, d[i] = G[i] &amp; <span class="number">32767</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = F.size(); i &lt; lim; i++) a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = G.size(); i &lt; lim; i++) c[i] = d[i] = <span class="number">0</span>;</span><br><span class="line">    fft(a), fft(b), fft(c), fft(d);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++)</span><br><span class="line">      e[i] = a[i] * c[i], f[i] = a[i] * d[i], g[i] = b[i] * c[i], h[i] = b[i] * d[i];</span><br><span class="line">    ifft(e), ifft(f), ifft(g), ifft(h);</span><br><span class="line">    p30 %= mod, p15 %= mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; H.size(); i++)</span><br><span class="line">      H[i] = ((ll)(e[i].a + <span class="number">0.5</span>) % mod * p30 % mod + (ll)(f[i].a + <span class="number">0.5</span>) % mod * p15 % mod + (ll)(g[i].a + <span class="number">0.5</span>) % mod * p15 % mod + (ll)(h[i].a + <span class="number">0.5</span>)) % mod;</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> MTT::<span class="keyword">operator</span> *;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), read(k), read(L), read(x), read(y), read(mod), --x, --y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) read(A.a[i][j]);</span><br><span class="line">w[<span class="number">0</span>] = <span class="number">1</span>, w[<span class="number">1</span>] = fpow(get_root(mod), (mod - <span class="number">1</span>) / k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; k; i++) w[i] = mul(w[i - <span class="number">1</span>], w[<span class="number">1</span>]);</span><br><span class="line">I.a[<span class="number">0</span>][<span class="number">0</span>] = I.a[<span class="number">1</span>][<span class="number">1</span>] = I.a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>, S.a[<span class="number">0</span>][x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) c[i] = (S * fpow(A * w[i] + I, L)).a[<span class="number">0</span>][y];</span><br><span class="line">f.resize((k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>), g.resize(k + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; f.size(); i++) f[i] = get_omega(-((ll)i * (i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g.size(); i++) g[i] = mul(c[i], get_omega(((ll)i * (i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>)));</span><br><span class="line"><span class="comment">// printf(&quot;w: &quot;); for (int i = 0; i &lt; k; i++) print(w[i], &quot; \n&quot;[i == k - 1]);</span></span><br><span class="line"><span class="comment">// printf(&quot;c: &quot;); for (int i = 0; i &lt; k; i++) print(c[i], &quot; \n&quot;[i == k - 1]);</span></span><br><span class="line"><span class="comment">// printf(&quot;f: &quot;); for (int i = 0; i &lt; f.size(); i++) print(f[i], &quot; \n&quot;[i == f.size() - 1]);</span></span><br><span class="line"><span class="comment">// printf(&quot;g: &quot;); for (int i = 0; i &lt; g.size(); i++) print(g[i], &quot; \n&quot;[i == g.size() - 1]);</span></span><br><span class="line"><span class="built_in">std</span>::reverse(g.begin(), g.end());</span><br><span class="line">f = f * g;<span class="keyword">int</span> inv_k = inv(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) ans[i] = mul(f[k + i], mul(get_omega(((ll)i * (i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>)), inv_k));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) print(ans[i], <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MEMSET0_LOCAL_ENVIRONMENT</span></span><br><span class="line">freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> ringo::main(), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数 </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 单位根 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式多点求值与快速插值学习笔记</title>
      <link href="mpe-and-fip/"/>
      <url>mpe-and-fip/</url>
      
        <content type="html"><![CDATA[<h2 id="多点求值"><a href="#多点求值" class="headerlink" title="多点求值"></a>多点求值</h2><p>我们若求一个一次函数 $f(x) = ax + b$ 在 $x_0$ 处的值，可以拿 $f(x)$ 对 $(x - x_0)$ 取模，得到的零次多项式即在 $x_0$ 处的点值，容易证明其正确性。</p><p>考虑分治，假设我们需要求 $x_l$ ~ $x_r$ 处的点值，可以通过当前的 $f(x)$ 对 $\prod_{i=l}^{mid} (x-x_i)$ 取模得到递归到 $x_{mid + 1}$ ~ $x_r$ 的多项式，对 $\prod_{i=mid+1}^r (x-x_i)$ 取模得到递归到 $x_l$ ~ $x_{mid}$ 的多项式。其中上面两个连乘积可以通过分治 + 多项式乘法得到，保存在线段树状结构中。若多项式项数与待求值点数相同则在叶子节点我们可以直接获取点值。</p><h2 id="快速插值"><a href="#快速插值" class="headerlink" title="快速插值"></a>快速插值</h2><p>这是朴素的拉格朗日插值</p><script type="math/tex; mode=display">f(x) = \sum_{i=1}^n y_i \prod_{j\not=i} \frac {x-x_j} {x_i - x_j}</script><p>1、<br>求下半部分，即对于每个 $i \in [1, n]$ 求出 $\prod_{j\not=i} (x_i - x_j)$ 。</p><script type="math/tex; mode=display">\prod_{j\not=i} (x_i - x_j)= \lim_{x \rightarrow x_i} \frac {\prod_{j=1}^n (x_i - x_j)} {x - x_i}</script><p>设分子上半部分为 $g(x)$ ，上下均为不定式，用洛必达法则得</p><script type="math/tex; mode=display">\lim_{x \rightarrow x_i} \frac {g(x)} {x - x_i} = \lim_{x \rightarrow x_i} g'(x) = g'(x_i)</script><p>对 $g’(x)$ 多点求值即可。</p><p>2、<br>现在我们可以把原式化为</p><script type="math/tex; mode=display">f(x) = \sum_{i=1}^n \frac {y_i} {\prod\limits_{j\not=i} (x_i - x_j)} \prod_{j\not=i} (x-x_j)</script><p>其中 $\dfrac {y_i} {\prod_{j\not=i} (x_i - x_j)}$ 我们已知，可以用 $z_i$ 来表示</p><script type="math/tex; mode=display">f(x) = \sum_{i=1}^n z_i \prod_{j\not=i} (x-x_j)</script><p>仍然考虑分治，</p><script type="math/tex; mode=display">\begin{aligned}f_{l \rightarrow r}(x)    =&  \sum_{i=l}^r z_i \prod_{j=l,j\not=i}^r (x-x_j) \\    =&  \sum_{i=l}^{mid} z_i \prod_{j=l,j\not=i}^r (x-x_j) +        \sum_{i=mid+1}^{r} z_i \prod_{j=l,j\not=i} (x-x_j) \\    =&  \sum_{i=l}^{mid} z_i \prod_{j=l,j\not=i}^{mid} (x-x_j) \times        \prod_{j=mid+1,j\not=i}^{r} (x-x_j) +\\     &  \sum_{i=mid+1}^{r} z_i \prod_{j=mid+1,j\not=i}^{r} (x-x_j) \times        \prod_{j=l,j\not=i}^{mid} (x-x_j) \\    =&  f_{l \rightarrow mid}(x)        \prod_{j=mid+1,j\not=i}^{r} (x-x_j) +        f_{mid+1 \rightarrow r}(x)        \prod_{j=l,j\not=i}^{mid} (x-x_j) \\\end{aligned}</script><p>可以直接调用之前分治 + 多项式乘法的结果，减小常数。</p>]]></content>
      
      
      <categories>
          
          <category> OI算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
